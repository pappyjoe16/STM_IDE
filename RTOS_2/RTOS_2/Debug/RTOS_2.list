
RTOS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c4  080041c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041cc  080041cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080041d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004030  20000074  08004248  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040a4  08004248  000240a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e39f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002569  00000000  00000000  0002e443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  000309b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00031860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018473  00000000  00000000  000325e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0b9  00000000  00000000  0004aa5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095525  00000000  00000000  00059b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef039  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004430  00000000  00000000  000ef08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004068 	.word	0x08004068

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004068 	.word	0x08004068

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000090 	.word	0x20000090
 80005b4:	200000e4 	.word	0x200000e4

080005b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d013      	beq.n	80005f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00b      	beq.n	80005f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	e000      	b.n	80005e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b086      	sub	sp, #24
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
	int i=0;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e009      	b.n	8000630 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ffc7 	bl	80005b8 <ITM_SendChar>
	for (i=0; i<len; i++)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf1      	blt.n	800061c <_write+0x16>
	return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b08e      	sub	sp, #56	; 0x38
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fa71 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f837 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f893 	bl	800077c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  printf("starting... \n");
 8000656:	4815      	ldr	r0, [pc, #84]	; (80006ac <main+0x68>)
 8000658:	f002 fd88 	bl	800316c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <main+0x6c>)
 800065e:	f107 041c 	add.w	r4, r7, #28
 8000662:	461d      	mov	r5, r3
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fa93 	bl	8001ba2 <osThreadCreate>
 800067c:	4603      	mov	r3, r0
 800067e:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <main+0x70>)
 8000680:	6013      	str	r3, [r2, #0]

  /* definition and creation of defaultTask */
  osThreadDef(Task_2, StartTask_2, osPriorityAboveNormal, 0, 128);
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <main+0x74>)
 8000684:	463c      	mov	r4, r7
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task_2), NULL);
 8000694:	463b      	mov	r3, r7
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fa82 	bl	8001ba2 <osThreadCreate>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <main+0x78>)
 80006a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006a4:	f001 fa76 	bl	8001b94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0x64>
 80006aa:	bf00      	nop
 80006ac:	08004094 	.word	0x08004094
 80006b0:	080040a4 	.word	0x080040a4
 80006b4:	200002e4 	.word	0x200002e4
 80006b8:	080040c0 	.word	0x080040c0
 80006bc:	200002e8 	.word	0x200002e8

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fcbe 	bl	8003050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xb4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xb4>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xb4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <SystemClock_Config+0xb8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <SystemClock_Config+0xb8>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <SystemClock_Config+0xb8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fb21 	bl	8000d78 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800073c:	f000 f870 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fd84 	bl	8001268 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000766:	f000 f85b 	bl	8000820 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_GPIO_Init+0x30>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <MX_GPIO_Init+0x30>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_GPIO_Init+0x30>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("Default Task running... \n");
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <StartDefaultTask+0x18>)
 80007ba:	f002 fcd7 	bl	800316c <puts>
    osDelay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c2:	f001 fa3a 	bl	8001c3a <osDelay>
	printf("Default Task running... \n");
 80007c6:	e7f7      	b.n	80007b8 <StartDefaultTask+0x8>
 80007c8:	080040dc 	.word	0x080040dc

080007cc <StartTask_2>:
  }
  /* USER CODE END 5 */
}

void StartTask_2(void const * argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("Task2, indx = %d\n", indx++);
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <StartTask_2+0x28>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	b2d1      	uxtb	r1, r2
 80007dc:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <StartTask_2+0x28>)
 80007de:	7011      	strb	r1, [r2, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <StartTask_2+0x2c>)
 80007e4:	f002 fc3c 	bl	8003060 <iprintf>
    osDelay(2000);
 80007e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007ec:	f001 fa25 	bl	8001c3a <osDelay>
	printf("Task2, indx = %d\n", indx++);
 80007f0:	e7f0      	b.n	80007d4 <StartTask_2+0x8>
 80007f2:	bf00      	nop
 80007f4:	200002ec 	.word	0x200002ec
 80007f8:	080040f8 	.word	0x080040f8

080007fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d101      	bne.n	8000812 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800080e:	f000 f9b1 	bl	8000b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40010000 	.word	0x40010000

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_MspInit+0x54>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a11      	ldr	r2, [pc, #68]	; (8000880 <HAL_MspInit+0x54>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x54>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_MspInit+0x54>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_MspInit+0x54>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_MspInit+0x54>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	210f      	movs	r1, #15
 800086e:	f06f 0001 	mvn.w	r0, #1
 8000872:	f000 fa57 	bl	8000d24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <HAL_InitTick+0xd0>)
 800089a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089c:	4a2d      	ldr	r2, [pc, #180]	; (8000954 <HAL_InitTick+0xd0>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6453      	str	r3, [r2, #68]	; 0x44
 80008a4:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <HAL_InitTick+0xd0>)
 80008a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b0:	f107 020c 	add.w	r2, r7, #12
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4611      	mov	r1, r2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fea0 	bl	8001600 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008c0:	f000 fe8a 	bl	80015d8 <HAL_RCC_GetPCLK2Freq>
 80008c4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c8:	4a23      	ldr	r2, [pc, #140]	; (8000958 <HAL_InitTick+0xd4>)
 80008ca:	fba2 2303 	umull	r2, r3, r2, r3
 80008ce:	0c9b      	lsrs	r3, r3, #18
 80008d0:	3b01      	subs	r3, #1
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <HAL_InitTick+0xd8>)
 80008d6:	4a22      	ldr	r2, [pc, #136]	; (8000960 <HAL_InitTick+0xdc>)
 80008d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <HAL_InitTick+0xd8>)
 80008dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008e2:	4a1e      	ldr	r2, [pc, #120]	; (800095c <HAL_InitTick+0xd8>)
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <HAL_InitTick+0xd8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <HAL_InitTick+0xd8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <HAL_InitTick+0xd8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008fa:	4818      	ldr	r0, [pc, #96]	; (800095c <HAL_InitTick+0xd8>)
 80008fc:	f000 feb2 	bl	8001664 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11b      	bne.n	8000946 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800090e:	4813      	ldr	r0, [pc, #76]	; (800095c <HAL_InitTick+0xd8>)
 8000910:	f000 ff02 	bl	8001718 <HAL_TIM_Base_Start_IT>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800091a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800091e:	2b00      	cmp	r3, #0
 8000920:	d111      	bne.n	8000946 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000922:	2019      	movs	r0, #25
 8000924:	f000 fa1a 	bl	8000d5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b0f      	cmp	r3, #15
 800092c:	d808      	bhi.n	8000940 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800092e:	2200      	movs	r2, #0
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	2019      	movs	r0, #25
 8000934:	f000 f9f6 	bl	8000d24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_InitTick+0xe0>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e002      	b.n	8000946 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800094a:	4618      	mov	r0, r3
 800094c:	3730      	adds	r7, #48	; 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	431bde83 	.word	0x431bde83
 800095c:	200002f0 	.word	0x200002f0
 8000960:	40010000 	.word	0x40010000
 8000964:	20000004 	.word	0x20000004

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800099a:	f000 ff1f 	bl	80017dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200002f0 	.word	0x200002f0

080009a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	e00a      	b.n	80009d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ba:	f3af 8000 	nop.w
 80009be:	4601      	mov	r1, r0
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf0      	blt.n	80009ba <_read+0x12>
  }

  return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_isatty>:

int _isatty(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f002 fabe 	bl	8002ffc <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20020000 	.word	0x20020000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	20000338 	.word	0x20000338
 8000ab4:	200040a8 	.word	0x200040a8

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae2:	490e      	ldr	r1, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af8:	4c0b      	ldr	r4, [pc, #44]	; (8000b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b06:	f7ff ffd7 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f002 fa7d 	bl	8003008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0e:	f7ff fd99 	bl	8000644 <main>
  bx  lr    
 8000b12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b20:	080041d4 	.word	0x080041d4
  ldr r2, =_sbss
 8000b24:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b28:	200040a4 	.word	0x200040a4

08000b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <HAL_Init+0x40>)
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_Init+0x40>)
 8000b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x40>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f8d8 	bl	8000d0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	200f      	movs	r0, #15
 8000b60:	f7ff fe90 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fe62 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023c00 	.word	0x40023c00

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	2000033c 	.word	0x2000033c

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	2000033c 	.word	0x2000033c

08000bb4 <__NVIC_SetPriorityGrouping>:
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff4c 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d36:	f7ff ff61 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	68b9      	ldr	r1, [r7, #8]
 8000d40:	6978      	ldr	r0, [r7, #20]
 8000d42:	f7ff ffb1 	bl	8000ca8 <NVIC_EncodePriority>
 8000d46:	4602      	mov	r2, r0
 8000d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff80 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff54 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e267      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d075      	beq.n	8000e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d96:	4b88      	ldr	r3, [pc, #544]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d00c      	beq.n	8000dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000da2:	4b85      	ldr	r3, [pc, #532]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d112      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dae:	4b82      	ldr	r3, [pc, #520]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000dba:	d10b      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbc:	4b7e      	ldr	r3, [pc, #504]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d05b      	beq.n	8000e80 <HAL_RCC_OscConfig+0x108>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d157      	bne.n	8000e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e242      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ddc:	d106      	bne.n	8000dec <HAL_RCC_OscConfig+0x74>
 8000dde:	4b76      	ldr	r3, [pc, #472]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a75      	ldr	r2, [pc, #468]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e01d      	b.n	8000e28 <HAL_RCC_OscConfig+0xb0>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df4:	d10c      	bne.n	8000e10 <HAL_RCC_OscConfig+0x98>
 8000df6:	4b70      	ldr	r3, [pc, #448]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a6f      	ldr	r2, [pc, #444]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	4b6d      	ldr	r3, [pc, #436]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a6c      	ldr	r2, [pc, #432]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e00b      	b.n	8000e28 <HAL_RCC_OscConfig+0xb0>
 8000e10:	4b69      	ldr	r3, [pc, #420]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a68      	ldr	r2, [pc, #416]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b66      	ldr	r3, [pc, #408]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a65      	ldr	r2, [pc, #404]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d013      	beq.n	8000e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e30:	f7ff feb4 	bl	8000b9c <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff feb0 	bl	8000b9c <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e207      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	4b5b      	ldr	r3, [pc, #364]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0xc0>
 8000e56:	e014      	b.n	8000e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fea0 	bl	8000b9c <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fe9c 	bl	8000b9c <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e1f3      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0xe8>
 8000e7e:	e000      	b.n	8000e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d063      	beq.n	8000f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e8e:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f003 030c 	and.w	r3, r3, #12
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00b      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e9a:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ea2:	2b08      	cmp	r3, #8
 8000ea4:	d11c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ea6:	4b44      	ldr	r3, [pc, #272]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d116      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb2:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <HAL_RCC_OscConfig+0x152>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d001      	beq.n	8000eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e1c7      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4937      	ldr	r1, [pc, #220]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ede:	e03a      	b.n	8000f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d020      	beq.n	8000f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <HAL_RCC_OscConfig+0x244>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eee:	f7ff fe55 	bl	8000b9c <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ef6:	f7ff fe51 	bl	8000b9c <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e1a8      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f0      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4925      	ldr	r1, [pc, #148]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
 8000f28:	e015      	b.n	8000f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f2a:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <HAL_RCC_OscConfig+0x244>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fe34 	bl	8000b9c <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fe30 	bl	8000b9c <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e187      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d036      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d016      	beq.n	8000f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_RCC_OscConfig+0x248>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f70:	f7ff fe14 	bl	8000b9c <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f78:	f7ff fe10 	bl	8000b9c <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e167      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_RCC_OscConfig+0x240>)
 8000f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0x200>
 8000f96:	e01b      	b.n	8000fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_RCC_OscConfig+0x248>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9e:	f7ff fdfd 	bl	8000b9c <HAL_GetTick>
 8000fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa4:	e00e      	b.n	8000fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fa6:	f7ff fdf9 	bl	8000b9c <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d907      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e150      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	42470000 	.word	0x42470000
 8000fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc4:	4b88      	ldr	r3, [pc, #544]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8000fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1ea      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 8097 	beq.w	800110c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe2:	4b81      	ldr	r3, [pc, #516]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10f      	bne.n	800100e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b7d      	ldr	r3, [pc, #500]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a7c      	ldr	r2, [pc, #496]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b7a      	ldr	r3, [pc, #488]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100a:	2301      	movs	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100e:	4b77      	ldr	r3, [pc, #476]	; (80011ec <HAL_RCC_OscConfig+0x474>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001016:	2b00      	cmp	r3, #0
 8001018:	d118      	bne.n	800104c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101a:	4b74      	ldr	r3, [pc, #464]	; (80011ec <HAL_RCC_OscConfig+0x474>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a73      	ldr	r2, [pc, #460]	; (80011ec <HAL_RCC_OscConfig+0x474>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001026:	f7ff fdb9 	bl	8000b9c <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102e:	f7ff fdb5 	bl	8000b9c <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e10c      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	4b6a      	ldr	r3, [pc, #424]	; (80011ec <HAL_RCC_OscConfig+0x474>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d106      	bne.n	8001062 <HAL_RCC_OscConfig+0x2ea>
 8001054:	4b64      	ldr	r3, [pc, #400]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8001056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001058:	4a63      	ldr	r2, [pc, #396]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6713      	str	r3, [r2, #112]	; 0x70
 8001060:	e01c      	b.n	800109c <HAL_RCC_OscConfig+0x324>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b05      	cmp	r3, #5
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x30c>
 800106a:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 800106c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800106e:	4a5e      	ldr	r2, [pc, #376]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6713      	str	r3, [r2, #112]	; 0x70
 8001076:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8001078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800107a:	4a5b      	ldr	r2, [pc, #364]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6713      	str	r3, [r2, #112]	; 0x70
 8001082:	e00b      	b.n	800109c <HAL_RCC_OscConfig+0x324>
 8001084:	4b58      	ldr	r3, [pc, #352]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8001086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001088:	4a57      	ldr	r2, [pc, #348]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	6713      	str	r3, [r2, #112]	; 0x70
 8001090:	4b55      	ldr	r3, [pc, #340]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8001092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001094:	4a54      	ldr	r2, [pc, #336]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8001096:	f023 0304 	bic.w	r3, r3, #4
 800109a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d015      	beq.n	80010d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a4:	f7ff fd7a 	bl	8000b9c <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010aa:	e00a      	b.n	80010c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ac:	f7ff fd76 	bl	8000b9c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e0cb      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c2:	4b49      	ldr	r3, [pc, #292]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 80010c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0ee      	beq.n	80010ac <HAL_RCC_OscConfig+0x334>
 80010ce:	e014      	b.n	80010fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d0:	f7ff fd64 	bl	8000b9c <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d6:	e00a      	b.n	80010ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d8:	f7ff fd60 	bl	8000b9c <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e0b5      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 80010f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1ee      	bne.n	80010d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d105      	bne.n	800110c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001100:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a38      	ldr	r2, [pc, #224]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8001106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80a1 	beq.w	8001258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001116:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 030c 	and.w	r3, r3, #12
 800111e:	2b08      	cmp	r3, #8
 8001120:	d05c      	beq.n	80011dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d141      	bne.n	80011ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800112a:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <HAL_RCC_OscConfig+0x478>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fd34 	bl	8000b9c <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001138:	f7ff fd30 	bl	8000b9c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e087      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	085b      	lsrs	r3, r3, #1
 800116e:	3b01      	subs	r3, #1
 8001170:	041b      	lsls	r3, r3, #16
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001178:	061b      	lsls	r3, r3, #24
 800117a:	491b      	ldr	r1, [pc, #108]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_RCC_OscConfig+0x478>)
 8001182:	2201      	movs	r2, #1
 8001184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001186:	f7ff fd09 	bl	8000b9c <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800118e:	f7ff fd05 	bl	8000b9c <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e05c      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0x416>
 80011ac:	e054      	b.n	8001258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_RCC_OscConfig+0x478>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcf2 	bl	8000b9c <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011bc:	f7ff fcee 	bl	8000b9c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e045      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_RCC_OscConfig+0x470>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x444>
 80011da:	e03d      	b.n	8001258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d107      	bne.n	80011f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e038      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000
 80011f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_RCC_OscConfig+0x4ec>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d028      	beq.n	8001254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800120c:	429a      	cmp	r2, r3
 800120e:	d121      	bne.n	8001254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	429a      	cmp	r2, r3
 800121c:	d11a      	bne.n	8001254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001224:	4013      	ands	r3, r2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800122a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800122c:	4293      	cmp	r3, r2
 800122e:	d111      	bne.n	8001254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	085b      	lsrs	r3, r3, #1
 800123c:	3b01      	subs	r3, #1
 800123e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001240:	429a      	cmp	r2, r3
 8001242:	d107      	bne.n	8001254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e0cc      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800127c:	4b68      	ldr	r3, [pc, #416]	; (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d90c      	bls.n	80012a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128a:	4b65      	ldr	r3, [pc, #404]	; (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001292:	4b63      	ldr	r3, [pc, #396]	; (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0b8      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012bc:	4b59      	ldr	r3, [pc, #356]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a58      	ldr	r2, [pc, #352]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4a52      	ldr	r2, [pc, #328]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e0:	4b50      	ldr	r3, [pc, #320]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	494d      	ldr	r1, [pc, #308]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d044      	beq.n	8001388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d119      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e07f      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d003      	beq.n	8001326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001322:	2b03      	cmp	r3, #3
 8001324:	d107      	bne.n	8001336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001326:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d109      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e06f      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e067      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f023 0203 	bic.w	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4934      	ldr	r1, [pc, #208]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001354:	4313      	orrs	r3, r2
 8001356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001358:	f7ff fc20 	bl	8000b9c <HAL_GetTick>
 800135c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135e:	e00a      	b.n	8001376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001360:	f7ff fc1c 	bl	8000b9c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f241 3288 	movw	r2, #5000	; 0x1388
 800136e:	4293      	cmp	r3, r2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e04f      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 020c 	and.w	r2, r3, #12
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	429a      	cmp	r2, r3
 8001386:	d1eb      	bne.n	8001360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d20c      	bcs.n	80013b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e032      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	4916      	ldr	r1, [pc, #88]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	490e      	ldr	r1, [pc, #56]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ee:	f000 f821 	bl	8001434 <HAL_RCC_GetSysClockFreq>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	490a      	ldr	r1, [pc, #40]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	5ccb      	ldrb	r3, [r1, r3]
 8001402:	fa22 f303 	lsr.w	r3, r2, r3
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_RCC_ClockConfig+0x1c8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fa38 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023c00 	.word	0x40023c00
 8001424:	40023800 	.word	0x40023800
 8001428:	08004114 	.word	0x08004114
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001438:	b090      	sub	sp, #64	; 0x40
 800143a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
 8001440:	2300      	movs	r3, #0
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800144c:	4b59      	ldr	r3, [pc, #356]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b08      	cmp	r3, #8
 8001456:	d00d      	beq.n	8001474 <HAL_RCC_GetSysClockFreq+0x40>
 8001458:	2b08      	cmp	r3, #8
 800145a:	f200 80a1 	bhi.w	80015a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x34>
 8001462:	2b04      	cmp	r3, #4
 8001464:	d003      	beq.n	800146e <HAL_RCC_GetSysClockFreq+0x3a>
 8001466:	e09b      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001468:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800146c:	e09b      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800146e:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_GetSysClockFreq+0x188>)
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001472:	e098      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001474:	4b4f      	ldr	r3, [pc, #316]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800147e:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d028      	beq.n	80014dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800148a:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	099b      	lsrs	r3, r3, #6
 8001490:	2200      	movs	r2, #0
 8001492:	623b      	str	r3, [r7, #32]
 8001494:	627a      	str	r2, [r7, #36]	; 0x24
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800149c:	2100      	movs	r1, #0
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_GetSysClockFreq+0x188>)
 80014a0:	fb03 f201 	mul.w	r2, r3, r1
 80014a4:	2300      	movs	r3, #0
 80014a6:	fb00 f303 	mul.w	r3, r0, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	4a43      	ldr	r2, [pc, #268]	; (80015bc <HAL_RCC_GetSysClockFreq+0x188>)
 80014ae:	fba0 1202 	umull	r1, r2, r0, r2
 80014b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014b4:	460a      	mov	r2, r1
 80014b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80014b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ba:	4413      	add	r3, r2
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c0:	2200      	movs	r2, #0
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	61fa      	str	r2, [r7, #28]
 80014c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014ce:	f7fe fed7 	bl	8000280 <__aeabi_uldivmod>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4613      	mov	r3, r2
 80014d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014da:	e053      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014dc:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	2200      	movs	r2, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	617a      	str	r2, [r7, #20]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80014ee:	f04f 0b00 	mov.w	fp, #0
 80014f2:	4652      	mov	r2, sl
 80014f4:	465b      	mov	r3, fp
 80014f6:	f04f 0000 	mov.w	r0, #0
 80014fa:	f04f 0100 	mov.w	r1, #0
 80014fe:	0159      	lsls	r1, r3, #5
 8001500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001504:	0150      	lsls	r0, r2, #5
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	ebb2 080a 	subs.w	r8, r2, sl
 800150e:	eb63 090b 	sbc.w	r9, r3, fp
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800151e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001522:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001526:	ebb2 0408 	subs.w	r4, r2, r8
 800152a:	eb63 0509 	sbc.w	r5, r3, r9
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	00eb      	lsls	r3, r5, #3
 8001538:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800153c:	00e2      	lsls	r2, r4, #3
 800153e:	4614      	mov	r4, r2
 8001540:	461d      	mov	r5, r3
 8001542:	eb14 030a 	adds.w	r3, r4, sl
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	eb45 030b 	adc.w	r3, r5, fp
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800155a:	4629      	mov	r1, r5
 800155c:	028b      	lsls	r3, r1, #10
 800155e:	4621      	mov	r1, r4
 8001560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001564:	4621      	mov	r1, r4
 8001566:	028a      	lsls	r2, r1, #10
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156e:	2200      	movs	r2, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	60fa      	str	r2, [r7, #12]
 8001574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001578:	f7fe fe82 	bl	8000280 <__aeabi_uldivmod>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4613      	mov	r3, r2
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	3301      	adds	r3, #1
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001594:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001598:	fbb2 f3f3 	udiv	r3, r2, r3
 800159c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800159e:	e002      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80015a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3740      	adds	r7, #64	; 0x40
 80015ac:	46bd      	mov	sp, r7
 80015ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	00f42400 	.word	0x00f42400
 80015bc:	017d7840 	.word	0x017d7840

080015c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000000 	.word	0x20000000

080015d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015dc:	f7ff fff0 	bl	80015c0 <HAL_RCC_GetHCLKFreq>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	0b5b      	lsrs	r3, r3, #13
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	4903      	ldr	r1, [pc, #12]	; (80015fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ee:	5ccb      	ldrb	r3, [r1, r3]
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	08004124 	.word	0x08004124

08001600 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	220f      	movs	r2, #15
 800160e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_RCC_GetClockConfig+0x5c>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0203 	and.w	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_RCC_GetClockConfig+0x5c>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_RCC_GetClockConfig+0x5c>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_GetClockConfig+0x5c>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	08db      	lsrs	r3, r3, #3
 800163a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_RCC_GetClockConfig+0x60>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0207 	and.w	r2, r3, #7
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	601a      	str	r2, [r3, #0]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e041      	b.n	80016fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d106      	bne.n	8001690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f839 	bl	8001702 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2202      	movs	r2, #2
 8001694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3304      	adds	r3, #4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f000 f9ca 	bl	8001a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d001      	beq.n	8001730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e044      	b.n	80017ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d018      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x6c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800175a:	d013      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x6c>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HAL_TIM_Base_Start_IT+0xb4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00e      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x6c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d009      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x6c>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d004      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x6c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d111      	bne.n	80017a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b06      	cmp	r3, #6
 8001794:	d010      	beq.n	80017b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017a6:	e007      	b.n	80017b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40010000 	.word	0x40010000
 80017cc:	40000400 	.word	0x40000400
 80017d0:	40000800 	.word	0x40000800
 80017d4:	40000c00 	.word	0x40000c00
 80017d8:	40014000 	.word	0x40014000

080017dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d122      	bne.n	8001838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d11b      	bne.n	8001838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f06f 0202 	mvn.w	r2, #2
 8001808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f8ee 	bl	8001a00 <HAL_TIM_IC_CaptureCallback>
 8001824:	e005      	b.n	8001832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f8e0 	bl	80019ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f8f1 	bl	8001a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b04      	cmp	r3, #4
 8001844:	d122      	bne.n	800188c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b04      	cmp	r3, #4
 8001852:	d11b      	bne.n	800188c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0204 	mvn.w	r2, #4
 800185c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2202      	movs	r2, #2
 8001862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f8c4 	bl	8001a00 <HAL_TIM_IC_CaptureCallback>
 8001878:	e005      	b.n	8001886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8b6 	bl	80019ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f8c7 	bl	8001a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b08      	cmp	r3, #8
 8001898:	d122      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d11b      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0208 	mvn.w	r2, #8
 80018b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2204      	movs	r2, #4
 80018b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f89a 	bl	8001a00 <HAL_TIM_IC_CaptureCallback>
 80018cc:	e005      	b.n	80018da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f88c 	bl	80019ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f89d 	bl	8001a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d122      	bne.n	8001934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b10      	cmp	r3, #16
 80018fa:	d11b      	bne.n	8001934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 0210 	mvn.w	r2, #16
 8001904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2208      	movs	r2, #8
 800190a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f870 	bl	8001a00 <HAL_TIM_IC_CaptureCallback>
 8001920:	e005      	b.n	800192e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f862 	bl	80019ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f873 	bl	8001a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d10e      	bne.n	8001960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f06f 0201 	mvn.w	r2, #1
 8001958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7fe ff4e 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	2b80      	cmp	r3, #128	; 0x80
 800196c:	d10e      	bne.n	800198c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001978:	2b80      	cmp	r3, #128	; 0x80
 800197a:	d107      	bne.n	800198c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f8e2 	bl	8001b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001996:	2b40      	cmp	r3, #64	; 0x40
 8001998:	d10e      	bne.n	80019b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a4:	2b40      	cmp	r3, #64	; 0x40
 80019a6:	d107      	bne.n	80019b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f838 	bl	8001a28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d10e      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d107      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f06f 0220 	mvn.w	r2, #32
 80019dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f8ac 	bl	8001b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <TIM_Base_SetConfig+0xe4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00f      	beq.n	8001a74 <TIM_Base_SetConfig+0x38>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5a:	d00b      	beq.n	8001a74 <TIM_Base_SetConfig+0x38>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <TIM_Base_SetConfig+0xe8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d007      	beq.n	8001a74 <TIM_Base_SetConfig+0x38>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a30      	ldr	r2, [pc, #192]	; (8001b28 <TIM_Base_SetConfig+0xec>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d003      	beq.n	8001a74 <TIM_Base_SetConfig+0x38>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a2f      	ldr	r2, [pc, #188]	; (8001b2c <TIM_Base_SetConfig+0xf0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d108      	bne.n	8001a86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <TIM_Base_SetConfig+0xe4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01b      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a94:	d017      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <TIM_Base_SetConfig+0xe8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <TIM_Base_SetConfig+0xec>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00f      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a20      	ldr	r2, [pc, #128]	; (8001b2c <TIM_Base_SetConfig+0xf0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00b      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <TIM_Base_SetConfig+0xf4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <TIM_Base_SetConfig+0xf8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d003      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <TIM_Base_SetConfig+0xfc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d108      	bne.n	8001ad8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <TIM_Base_SetConfig+0xe4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d103      	bne.n	8001b0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	615a      	str	r2, [r3, #20]
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40000800 	.word	0x40000800
 8001b2c:	40000c00 	.word	0x40000c00
 8001b30:	40014000 	.word	0x40014000
 8001b34:	40014400 	.word	0x40014400
 8001b38:	40014800 	.word	0x40014800

08001b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b76:	2b84      	cmp	r3, #132	; 0x84
 8001b78:	d005      	beq.n	8001b86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001b7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4413      	add	r3, r2
 8001b82:	3303      	adds	r3, #3
 8001b84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001b98:	f000 fade 	bl	8002158 <vTaskStartScheduler>
  
  return osOK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba4:	b089      	sub	sp, #36	; 0x24
 8001ba6:	af04      	add	r7, sp, #16
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d020      	beq.n	8001bf6 <osThreadCreate+0x54>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01c      	beq.n	8001bf6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685c      	ldr	r4, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681d      	ldr	r5, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691e      	ldr	r6, [r3, #16]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ffc8 	bl	8001b64 <makeFreeRtosPriority>
 8001bd4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bde:	9202      	str	r2, [sp, #8]
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	9100      	str	r1, [sp, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4632      	mov	r2, r6
 8001be8:	4629      	mov	r1, r5
 8001bea:	4620      	mov	r0, r4
 8001bec:	f000 f8ed 	bl	8001dca <xTaskCreateStatic>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e01c      	b.n	8001c30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685c      	ldr	r4, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c02:	b29e      	uxth	r6, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ffaa 	bl	8001b64 <makeFreeRtosPriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	9200      	str	r2, [sp, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	4632      	mov	r2, r6
 8001c1e:	4629      	mov	r1, r5
 8001c20:	4620      	mov	r0, r4
 8001c22:	f000 f92f 	bl	8001e84 <xTaskCreate>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d001      	beq.n	8001c30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e000      	b.n	8001c32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001c30:	68fb      	ldr	r3, [r7, #12]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <osDelay+0x16>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	e000      	b.n	8001c52 <osDelay+0x18>
 8001c50:	2301      	movs	r3, #1
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 fa4c 	bl	80020f0 <vTaskDelay>
  
  return osOK;
 8001c58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f103 0208 	add.w	r2, r3, #8
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f103 0208 	add.w	r2, r3, #8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f103 0208 	add.w	r2, r3, #8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	601a      	str	r2, [r3, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1a:	d103      	bne.n	8001d24 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	e00c      	b.n	8001d3e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3308      	adds	r3, #8
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	e002      	b.n	8001d32 <vListInsert+0x2e>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d2f6      	bcs.n	8001d2c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d76:	b480      	push	{r7}
 8001d78:	b085      	sub	sp, #20
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6892      	ldr	r2, [r2, #8]
 8001d8c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6852      	ldr	r2, [r2, #4]
 8001d96:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d103      	bne.n	8001daa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b08e      	sub	sp, #56	; 0x38
 8001dce:	af04      	add	r7, sp, #16
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10a      	bne.n	8001df4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de2:	f383 8811 	msr	BASEPRI, r3
 8001de6:	f3bf 8f6f 	isb	sy
 8001dea:	f3bf 8f4f 	dsb	sy
 8001dee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001df0:	bf00      	nop
 8001df2:	e7fe      	b.n	8001df2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10a      	bne.n	8001e10 <xTaskCreateStatic+0x46>
	__asm volatile
 8001dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dfe:	f383 8811 	msr	BASEPRI, r3
 8001e02:	f3bf 8f6f 	isb	sy
 8001e06:	f3bf 8f4f 	dsb	sy
 8001e0a:	61fb      	str	r3, [r7, #28]
}
 8001e0c:	bf00      	nop
 8001e0e:	e7fe      	b.n	8001e0e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001e10:	2354      	movs	r3, #84	; 0x54
 8001e12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2b54      	cmp	r3, #84	; 0x54
 8001e18:	d00a      	beq.n	8001e30 <xTaskCreateStatic+0x66>
	__asm volatile
 8001e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1e:	f383 8811 	msr	BASEPRI, r3
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	f3bf 8f4f 	dsb	sy
 8001e2a:	61bb      	str	r3, [r7, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	e7fe      	b.n	8001e2e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001e30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01e      	beq.n	8001e76 <xTaskCreateStatic+0xac>
 8001e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d01b      	beq.n	8001e76 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001e50:	2300      	movs	r3, #0
 8001e52:	9303      	str	r3, [sp, #12]
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 f850 	bl	8001f0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e70:	f000 f8d4 	bl	800201c <prvAddNewTaskToReadyList>
 8001e74:	e001      	b.n	8001e7a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001e7a:	697b      	ldr	r3, [r7, #20]
	}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08c      	sub	sp, #48	; 0x30
 8001e88:	af04      	add	r7, sp, #16
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fec5 	bl	8002c28 <pvPortMalloc>
 8001e9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001ea6:	2054      	movs	r0, #84	; 0x54
 8001ea8:	f000 febe 	bl	8002c28 <pvPortMalloc>
 8001eac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eba:	e005      	b.n	8001ec8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001ebc:	6978      	ldr	r0, [r7, #20]
 8001ebe:	f000 ff7f 	bl	8002dc0 <vPortFree>
 8001ec2:	e001      	b.n	8001ec8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d017      	beq.n	8001efe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ed6:	88fa      	ldrh	r2, [r7, #6]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	9303      	str	r3, [sp, #12]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	9302      	str	r3, [sp, #8]
 8001ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f80e 	bl	8001f0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ef2:	69f8      	ldr	r0, [r7, #28]
 8001ef4:	f000 f892 	bl	800201c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	e002      	b.n	8001f04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001f04:	69bb      	ldr	r3, [r7, #24]
	}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3720      	adds	r7, #32
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b088      	sub	sp, #32
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f26:	3b01      	subs	r3, #1
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f023 0307 	bic.w	r3, r3, #7
 8001f34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f44:	f383 8811 	msr	BASEPRI, r3
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	617b      	str	r3, [r7, #20]
}
 8001f52:	bf00      	nop
 8001f54:	e7fe      	b.n	8001f54 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01f      	beq.n	8001f9c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	e012      	b.n	8001f88 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	4413      	add	r3, r2
 8001f68:	7819      	ldrb	r1, [r3, #0]
 8001f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4413      	add	r3, r2
 8001f70:	3334      	adds	r3, #52	; 0x34
 8001f72:	460a      	mov	r2, r1
 8001f74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	d9e9      	bls.n	8001f62 <prvInitialiseNewTask+0x54>
 8001f8e:	e000      	b.n	8001f92 <prvInitialiseNewTask+0x84>
			{
				break;
 8001f90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f9a:	e003      	b.n	8001fa4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d901      	bls.n	8001fae <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001faa:	2306      	movs	r3, #6
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fe6c 	bl	8001ca2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	3318      	adds	r3, #24
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fe67 	bl	8001ca2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	f1c3 0207 	rsb	r2, r3, #7
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	2200      	movs	r2, #0
 8001fee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	69b8      	ldr	r0, [r7, #24]
 8001ffe:	f000 fc05 	bl	800280c <pxPortInitialiseStack>
 8002002:	4602      	mov	r2, r0
 8002004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002006:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002012:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002014:	bf00      	nop
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002024:	f000 fd1e 	bl	8002a64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <prvAddNewTaskToReadyList+0xb8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	4a29      	ldr	r2, [pc, #164]	; (80020d4 <prvAddNewTaskToReadyList+0xb8>)
 8002030:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002032:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <prvAddNewTaskToReadyList+0xbc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800203a:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <prvAddNewTaskToReadyList+0xbc>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <prvAddNewTaskToReadyList+0xb8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d110      	bne.n	800206a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002048:	f000 fabc 	bl	80025c4 <prvInitialiseTaskLists>
 800204c:	e00d      	b.n	800206a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800204e:	4b23      	ldr	r3, [pc, #140]	; (80020dc <prvAddNewTaskToReadyList+0xc0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <prvAddNewTaskToReadyList+0xbc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	429a      	cmp	r2, r3
 8002062:	d802      	bhi.n	800206a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002064:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <prvAddNewTaskToReadyList+0xbc>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <prvAddNewTaskToReadyList+0xc4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <prvAddNewTaskToReadyList+0xc4>)
 8002072:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	2201      	movs	r2, #1
 800207a:	409a      	lsls	r2, r3
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <prvAddNewTaskToReadyList+0xc8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4313      	orrs	r3, r2
 8002082:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <prvAddNewTaskToReadyList+0xc8>)
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4a15      	ldr	r2, [pc, #84]	; (80020e8 <prvAddNewTaskToReadyList+0xcc>)
 8002094:	441a      	add	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3304      	adds	r3, #4
 800209a:	4619      	mov	r1, r3
 800209c:	4610      	mov	r0, r2
 800209e:	f7ff fe0d 	bl	8001cbc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80020a2:	f000 fd0f 	bl	8002ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <prvAddNewTaskToReadyList+0xc0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00e      	beq.n	80020cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <prvAddNewTaskToReadyList+0xbc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <prvAddNewTaskToReadyList+0xd0>)
 80020be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000440 	.word	0x20000440
 80020d8:	20000340 	.word	0x20000340
 80020dc:	2000044c 	.word	0x2000044c
 80020e0:	2000045c 	.word	0x2000045c
 80020e4:	20000448 	.word	0x20000448
 80020e8:	20000344 	.word	0x20000344
 80020ec:	e000ed04 	.word	0xe000ed04

080020f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d017      	beq.n	8002132 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <vTaskDelay+0x60>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <vTaskDelay+0x30>
	__asm volatile
 800210a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	60bb      	str	r3, [r7, #8]
}
 800211c:	bf00      	nop
 800211e:	e7fe      	b.n	800211e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002120:	f000 f87a 	bl	8002218 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002124:	2100      	movs	r1, #0
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fb0a 	bl	8002740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800212c:	f000 f882 	bl	8002234 <xTaskResumeAll>
 8002130:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <vTaskDelay+0x64>)
 800213a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000468 	.word	0x20000468
 8002154:	e000ed04 	.word	0xe000ed04

08002158 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002166:	463a      	mov	r2, r7
 8002168:	1d39      	adds	r1, r7, #4
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe fa08 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002174:	6839      	ldr	r1, [r7, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	9202      	str	r2, [sp, #8]
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	2300      	movs	r3, #0
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2300      	movs	r3, #0
 8002184:	460a      	mov	r2, r1
 8002186:	491e      	ldr	r1, [pc, #120]	; (8002200 <vTaskStartScheduler+0xa8>)
 8002188:	481e      	ldr	r0, [pc, #120]	; (8002204 <vTaskStartScheduler+0xac>)
 800218a:	f7ff fe1e 	bl	8001dca <xTaskCreateStatic>
 800218e:	4603      	mov	r3, r0
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <vTaskStartScheduler+0xb0>)
 8002192:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <vTaskStartScheduler+0xb0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800219c:	2301      	movs	r3, #1
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	e001      	b.n	80021a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d116      	bne.n	80021da <vTaskStartScheduler+0x82>
	__asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	613b      	str	r3, [r7, #16]
}
 80021be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <vTaskStartScheduler+0xb4>)
 80021c2:	f04f 32ff 	mov.w	r2, #4294967295
 80021c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <vTaskStartScheduler+0xb8>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <vTaskStartScheduler+0xbc>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80021d4:	f000 fba4 	bl	8002920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80021d8:	e00e      	b.n	80021f8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d10a      	bne.n	80021f8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80021e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e6:	f383 8811 	msr	BASEPRI, r3
 80021ea:	f3bf 8f6f 	isb	sy
 80021ee:	f3bf 8f4f 	dsb	sy
 80021f2:	60fb      	str	r3, [r7, #12]
}
 80021f4:	bf00      	nop
 80021f6:	e7fe      	b.n	80021f6 <vTaskStartScheduler+0x9e>
}
 80021f8:	bf00      	nop
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	0800410c 	.word	0x0800410c
 8002204:	08002595 	.word	0x08002595
 8002208:	20000464 	.word	0x20000464
 800220c:	20000460 	.word	0x20000460
 8002210:	2000044c 	.word	0x2000044c
 8002214:	20000444 	.word	0x20000444

08002218 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <vTaskSuspendAll+0x18>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	4a03      	ldr	r2, [pc, #12]	; (8002230 <vTaskSuspendAll+0x18>)
 8002224:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	20000468 	.word	0x20000468

08002234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <xTaskResumeAll+0x114>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <xTaskResumeAll+0x2c>
	__asm volatile
 800224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224e:	f383 8811 	msr	BASEPRI, r3
 8002252:	f3bf 8f6f 	isb	sy
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	603b      	str	r3, [r7, #0]
}
 800225c:	bf00      	nop
 800225e:	e7fe      	b.n	800225e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002260:	f000 fc00 	bl	8002a64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002264:	4b38      	ldr	r3, [pc, #224]	; (8002348 <xTaskResumeAll+0x114>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3b01      	subs	r3, #1
 800226a:	4a37      	ldr	r2, [pc, #220]	; (8002348 <xTaskResumeAll+0x114>)
 800226c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800226e:	4b36      	ldr	r3, [pc, #216]	; (8002348 <xTaskResumeAll+0x114>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d161      	bne.n	800233a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002276:	4b35      	ldr	r3, [pc, #212]	; (800234c <xTaskResumeAll+0x118>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d05d      	beq.n	800233a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800227e:	e02e      	b.n	80022de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002280:	4b33      	ldr	r3, [pc, #204]	; (8002350 <xTaskResumeAll+0x11c>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3318      	adds	r3, #24
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fd72 	bl	8001d76 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3304      	adds	r3, #4
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fd6d 	bl	8001d76 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	2201      	movs	r2, #1
 80022a2:	409a      	lsls	r2, r3
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <xTaskResumeAll+0x120>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <xTaskResumeAll+0x120>)
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4a27      	ldr	r2, [pc, #156]	; (8002358 <xTaskResumeAll+0x124>)
 80022bc:	441a      	add	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3304      	adds	r3, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4610      	mov	r0, r2
 80022c6:	f7ff fcf9 	bl	8001cbc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ce:	4b23      	ldr	r3, [pc, #140]	; (800235c <xTaskResumeAll+0x128>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d302      	bcc.n	80022de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <xTaskResumeAll+0x12c>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <xTaskResumeAll+0x11c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1cc      	bne.n	8002280 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80022ec:	f000 fa08 	bl	8002700 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <xTaskResumeAll+0x130>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d010      	beq.n	800231e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80022fc:	f000 f836 	bl	800236c <xTaskIncrementTick>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <xTaskResumeAll+0x12c>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f1      	bne.n	80022fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <xTaskResumeAll+0x130>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <xTaskResumeAll+0x12c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002326:	2301      	movs	r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <xTaskResumeAll+0x134>)
 800232c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f3bf 8f4f 	dsb	sy
 8002336:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800233a:	f000 fbc3 	bl	8002ac4 <vPortExitCritical>

	return xAlreadyYielded;
 800233e:	68bb      	ldr	r3, [r7, #8]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000468 	.word	0x20000468
 800234c:	20000440 	.word	0x20000440
 8002350:	20000400 	.word	0x20000400
 8002354:	20000448 	.word	0x20000448
 8002358:	20000344 	.word	0x20000344
 800235c:	20000340 	.word	0x20000340
 8002360:	20000454 	.word	0x20000454
 8002364:	20000450 	.word	0x20000450
 8002368:	e000ed04 	.word	0xe000ed04

0800236c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002376:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <xTaskIncrementTick+0x144>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 808e 	bne.w	800249c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002380:	4b4c      	ldr	r3, [pc, #304]	; (80024b4 <xTaskIncrementTick+0x148>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002388:	4a4a      	ldr	r2, [pc, #296]	; (80024b4 <xTaskIncrementTick+0x148>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d120      	bne.n	80023d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002394:	4b48      	ldr	r3, [pc, #288]	; (80024b8 <xTaskIncrementTick+0x14c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	603b      	str	r3, [r7, #0]
}
 80023b0:	bf00      	nop
 80023b2:	e7fe      	b.n	80023b2 <xTaskIncrementTick+0x46>
 80023b4:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <xTaskIncrementTick+0x14c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b40      	ldr	r3, [pc, #256]	; (80024bc <xTaskIncrementTick+0x150>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a3e      	ldr	r2, [pc, #248]	; (80024b8 <xTaskIncrementTick+0x14c>)
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4a3e      	ldr	r2, [pc, #248]	; (80024bc <xTaskIncrementTick+0x150>)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <xTaskIncrementTick+0x154>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a3c      	ldr	r2, [pc, #240]	; (80024c0 <xTaskIncrementTick+0x154>)
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	f000 f995 	bl	8002700 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <xTaskIncrementTick+0x158>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d348      	bcc.n	8002472 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023e0:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <xTaskIncrementTick+0x14c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ea:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <xTaskIncrementTick+0x158>)
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	601a      	str	r2, [r3, #0]
					break;
 80023f2:	e03e      	b.n	8002472 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023f4:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <xTaskIncrementTick+0x14c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	d203      	bcs.n	8002414 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800240c:	4a2d      	ldr	r2, [pc, #180]	; (80024c4 <xTaskIncrementTick+0x158>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002412:	e02e      	b.n	8002472 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3304      	adds	r3, #4
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fcac 	bl	8001d76 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3318      	adds	r3, #24
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fca3 	bl	8001d76 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	2201      	movs	r2, #1
 8002436:	409a      	lsls	r2, r3
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <xTaskIncrementTick+0x15c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	4a22      	ldr	r2, [pc, #136]	; (80024c8 <xTaskIncrementTick+0x15c>)
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4a1f      	ldr	r2, [pc, #124]	; (80024cc <xTaskIncrementTick+0x160>)
 8002450:	441a      	add	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	3304      	adds	r3, #4
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f7ff fc2f 	bl	8001cbc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <xTaskIncrementTick+0x164>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	429a      	cmp	r2, r3
 800246a:	d3b9      	bcc.n	80023e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800246c:	2301      	movs	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002470:	e7b6      	b.n	80023e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002472:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <xTaskIncrementTick+0x164>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002478:	4914      	ldr	r1, [pc, #80]	; (80024cc <xTaskIncrementTick+0x160>)
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d901      	bls.n	800248e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800248a:	2301      	movs	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <xTaskIncrementTick+0x168>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002496:	2301      	movs	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	e004      	b.n	80024a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <xTaskIncrementTick+0x16c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <xTaskIncrementTick+0x16c>)
 80024a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80024a6:	697b      	ldr	r3, [r7, #20]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000468 	.word	0x20000468
 80024b4:	20000444 	.word	0x20000444
 80024b8:	200003f8 	.word	0x200003f8
 80024bc:	200003fc 	.word	0x200003fc
 80024c0:	20000458 	.word	0x20000458
 80024c4:	20000460 	.word	0x20000460
 80024c8:	20000448 	.word	0x20000448
 80024cc:	20000344 	.word	0x20000344
 80024d0:	20000340 	.word	0x20000340
 80024d4:	20000454 	.word	0x20000454
 80024d8:	20000450 	.word	0x20000450

080024dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024e2:	4b27      	ldr	r3, [pc, #156]	; (8002580 <vTaskSwitchContext+0xa4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <vTaskSwitchContext+0xa8>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80024f0:	e03f      	b.n	8002572 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <vTaskSwitchContext+0xa8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024f8:	4b23      	ldr	r3, [pc, #140]	; (8002588 <vTaskSwitchContext+0xac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002506:	7afb      	ldrb	r3, [r7, #11]
 8002508:	f1c3 031f 	rsb	r3, r3, #31
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	491f      	ldr	r1, [pc, #124]	; (800258c <vTaskSwitchContext+0xb0>)
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	607b      	str	r3, [r7, #4]
}
 8002534:	bf00      	nop
 8002536:	e7fe      	b.n	8002536 <vTaskSwitchContext+0x5a>
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <vTaskSwitchContext+0xb0>)
 8002544:	4413      	add	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	3308      	adds	r3, #8
 800255a:	429a      	cmp	r2, r3
 800255c:	d104      	bne.n	8002568 <vTaskSwitchContext+0x8c>
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	4a08      	ldr	r2, [pc, #32]	; (8002590 <vTaskSwitchContext+0xb4>)
 8002570:	6013      	str	r3, [r2, #0]
}
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000468 	.word	0x20000468
 8002584:	20000454 	.word	0x20000454
 8002588:	20000448 	.word	0x20000448
 800258c:	20000344 	.word	0x20000344
 8002590:	20000340 	.word	0x20000340

08002594 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800259c:	f000 f852 	bl	8002644 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <prvIdleTask+0x28>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d9f9      	bls.n	800259c <prvIdleTask+0x8>
			{
				taskYIELD();
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <prvIdleTask+0x2c>)
 80025aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80025b8:	e7f0      	b.n	800259c <prvIdleTask+0x8>
 80025ba:	bf00      	nop
 80025bc:	20000344 	.word	0x20000344
 80025c0:	e000ed04 	.word	0xe000ed04

080025c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	e00c      	b.n	80025ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <prvInitialiseTaskLists+0x60>)
 80025dc:	4413      	add	r3, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fb3f 	bl	8001c62 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3301      	adds	r3, #1
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d9ef      	bls.n	80025d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80025f0:	480d      	ldr	r0, [pc, #52]	; (8002628 <prvInitialiseTaskLists+0x64>)
 80025f2:	f7ff fb36 	bl	8001c62 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80025f6:	480d      	ldr	r0, [pc, #52]	; (800262c <prvInitialiseTaskLists+0x68>)
 80025f8:	f7ff fb33 	bl	8001c62 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80025fc:	480c      	ldr	r0, [pc, #48]	; (8002630 <prvInitialiseTaskLists+0x6c>)
 80025fe:	f7ff fb30 	bl	8001c62 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002602:	480c      	ldr	r0, [pc, #48]	; (8002634 <prvInitialiseTaskLists+0x70>)
 8002604:	f7ff fb2d 	bl	8001c62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002608:	480b      	ldr	r0, [pc, #44]	; (8002638 <prvInitialiseTaskLists+0x74>)
 800260a:	f7ff fb2a 	bl	8001c62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <prvInitialiseTaskLists+0x78>)
 8002610:	4a05      	ldr	r2, [pc, #20]	; (8002628 <prvInitialiseTaskLists+0x64>)
 8002612:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <prvInitialiseTaskLists+0x7c>)
 8002616:	4a05      	ldr	r2, [pc, #20]	; (800262c <prvInitialiseTaskLists+0x68>)
 8002618:	601a      	str	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000344 	.word	0x20000344
 8002628:	200003d0 	.word	0x200003d0
 800262c:	200003e4 	.word	0x200003e4
 8002630:	20000400 	.word	0x20000400
 8002634:	20000414 	.word	0x20000414
 8002638:	2000042c 	.word	0x2000042c
 800263c:	200003f8 	.word	0x200003f8
 8002640:	200003fc 	.word	0x200003fc

08002644 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800264a:	e019      	b.n	8002680 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800264c:	f000 fa0a 	bl	8002a64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <prvCheckTasksWaitingTermination+0x50>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3304      	adds	r3, #4
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fb8a 	bl	8001d76 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <prvCheckTasksWaitingTermination+0x54>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3b01      	subs	r3, #1
 8002668:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <prvCheckTasksWaitingTermination+0x54>)
 800266a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <prvCheckTasksWaitingTermination+0x58>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3b01      	subs	r3, #1
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <prvCheckTasksWaitingTermination+0x58>)
 8002674:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002676:	f000 fa25 	bl	8002ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f810 	bl	80026a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <prvCheckTasksWaitingTermination+0x58>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e1      	bne.n	800264c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000414 	.word	0x20000414
 8002698:	20000440 	.word	0x20000440
 800269c:	20000428 	.word	0x20000428

080026a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d108      	bne.n	80026c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fb82 	bl	8002dc0 <vPortFree>
				vPortFree( pxTCB );
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fb7f 	bl	8002dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80026c2:	e018      	b.n	80026f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d103      	bne.n	80026d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fb76 	bl	8002dc0 <vPortFree>
	}
 80026d4:	e00f      	b.n	80026f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d00a      	beq.n	80026f6 <prvDeleteTCB+0x56>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	60fb      	str	r3, [r7, #12]
}
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <prvDeleteTCB+0x54>
	}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <prvResetNextTaskUnblockTime+0x38>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d104      	bne.n	800271a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <prvResetNextTaskUnblockTime+0x3c>)
 8002712:	f04f 32ff 	mov.w	r2, #4294967295
 8002716:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002718:	e008      	b.n	800272c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <prvResetNextTaskUnblockTime+0x38>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a04      	ldr	r2, [pc, #16]	; (800273c <prvResetNextTaskUnblockTime+0x3c>)
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	200003f8 	.word	0x200003f8
 800273c:	20000460 	.word	0x20000460

08002740 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800274a:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3304      	adds	r3, #4
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fb0d 	bl	8001d76 <uxListRemove>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10b      	bne.n	800277a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	2201      	movs	r2, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4013      	ands	r3, r2
 8002776:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002778:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d10a      	bne.n	8002798 <prvAddCurrentTaskToDelayedList+0x58>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3304      	adds	r3, #4
 800278e:	4619      	mov	r1, r3
 8002790:	481a      	ldr	r0, [pc, #104]	; (80027fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8002792:	f7ff fa93 	bl	8001cbc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002796:	e026      	b.n	80027e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027a0:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d209      	bcs.n	80027c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <prvAddCurrentTaskToDelayedList+0xc0>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3304      	adds	r3, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f7ff faa1 	bl	8001d04 <vListInsert>
}
 80027c2:	e010      	b.n	80027e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <prvAddCurrentTaskToDelayedList+0xc4>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3304      	adds	r3, #4
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f7ff fa97 	bl	8001d04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80027d6:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <prvAddCurrentTaskToDelayedList+0xc8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d202      	bcs.n	80027e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80027e0:	4a09      	ldr	r2, [pc, #36]	; (8002808 <prvAddCurrentTaskToDelayedList+0xc8>)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	6013      	str	r3, [r2, #0]
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000444 	.word	0x20000444
 80027f4:	20000340 	.word	0x20000340
 80027f8:	20000448 	.word	0x20000448
 80027fc:	2000042c 	.word	0x2000042c
 8002800:	200003fc 	.word	0x200003fc
 8002804:	200003f8 	.word	0x200003f8
 8002808:	20000460 	.word	0x20000460

0800280c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3b04      	subs	r3, #4
 800281c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3b04      	subs	r3, #4
 800282a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f023 0201 	bic.w	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3b04      	subs	r3, #4
 800283a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800283c:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <pxPortInitialiseStack+0x64>)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3b14      	subs	r3, #20
 8002846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3b04      	subs	r3, #4
 8002852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f06f 0202 	mvn.w	r2, #2
 800285a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3b20      	subs	r3, #32
 8002860:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002862:	68fb      	ldr	r3, [r7, #12]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	08002875 	.word	0x08002875

08002874 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <prvTaskExitError+0x54>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002886:	d00a      	beq.n	800289e <prvTaskExitError+0x2a>
	__asm volatile
 8002888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	60fb      	str	r3, [r7, #12]
}
 800289a:	bf00      	nop
 800289c:	e7fe      	b.n	800289c <prvTaskExitError+0x28>
	__asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	60bb      	str	r3, [r7, #8]
}
 80028b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80028b2:	bf00      	nop
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0fc      	beq.n	80028b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	2000000c 	.word	0x2000000c
 80028cc:	00000000 	.word	0x00000000

080028d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <pxCurrentTCBConst2>)
 80028d2:	6819      	ldr	r1, [r3, #0]
 80028d4:	6808      	ldr	r0, [r1, #0]
 80028d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028da:	f380 8809 	msr	PSP, r0
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f04f 0000 	mov.w	r0, #0
 80028e6:	f380 8811 	msr	BASEPRI, r0
 80028ea:	4770      	bx	lr
 80028ec:	f3af 8000 	nop.w

080028f0 <pxCurrentTCBConst2>:
 80028f0:	20000340 	.word	0x20000340
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop

080028f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80028f8:	4808      	ldr	r0, [pc, #32]	; (800291c <prvPortStartFirstTask+0x24>)
 80028fa:	6800      	ldr	r0, [r0, #0]
 80028fc:	6800      	ldr	r0, [r0, #0]
 80028fe:	f380 8808 	msr	MSP, r0
 8002902:	f04f 0000 	mov.w	r0, #0
 8002906:	f380 8814 	msr	CONTROL, r0
 800290a:	b662      	cpsie	i
 800290c:	b661      	cpsie	f
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	f3bf 8f6f 	isb	sy
 8002916:	df00      	svc	0
 8002918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800291a:	bf00      	nop
 800291c:	e000ed08 	.word	0xe000ed08

08002920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002926:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <xPortStartScheduler+0x120>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a46      	ldr	r2, [pc, #280]	; (8002a44 <xPortStartScheduler+0x124>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d10a      	bne.n	8002946 <xPortStartScheduler+0x26>
	__asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	613b      	str	r3, [r7, #16]
}
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002946:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <xPortStartScheduler+0x120>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3f      	ldr	r2, [pc, #252]	; (8002a48 <xPortStartScheduler+0x128>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d10a      	bne.n	8002966 <xPortStartScheduler+0x46>
	__asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	60fb      	str	r3, [r7, #12]
}
 8002962:	bf00      	nop
 8002964:	e7fe      	b.n	8002964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002966:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <xPortStartScheduler+0x12c>)
 8002968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	22ff      	movs	r2, #255	; 0xff
 8002976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <xPortStartScheduler+0x130>)
 800298c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <xPortStartScheduler+0x134>)
 8002990:	2207      	movs	r2, #7
 8002992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002994:	e009      	b.n	80029aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002996:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <xPortStartScheduler+0x134>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3b01      	subs	r3, #1
 800299c:	4a2d      	ldr	r2, [pc, #180]	; (8002a54 <xPortStartScheduler+0x134>)
 800299e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b80      	cmp	r3, #128	; 0x80
 80029b4:	d0ef      	beq.n	8002996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80029b6:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <xPortStartScheduler+0x134>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d00a      	beq.n	80029d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	60bb      	str	r3, [r7, #8]
}
 80029d4:	bf00      	nop
 80029d6:	e7fe      	b.n	80029d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029d8:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <xPortStartScheduler+0x134>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <xPortStartScheduler+0x134>)
 80029e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <xPortStartScheduler+0x134>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029ea:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <xPortStartScheduler+0x134>)
 80029ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <xPortStartScheduler+0x138>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <xPortStartScheduler+0x138>)
 80029fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <xPortStartScheduler+0x138>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <xPortStartScheduler+0x138>)
 8002a08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002a0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002a0e:	f000 f8dd 	bl	8002bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <xPortStartScheduler+0x13c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002a18:	f000 f8fc 	bl	8002c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <xPortStartScheduler+0x140>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0f      	ldr	r2, [pc, #60]	; (8002a60 <xPortStartScheduler+0x140>)
 8002a22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002a28:	f7ff ff66 	bl	80028f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002a2c:	f7ff fd56 	bl	80024dc <vTaskSwitchContext>
	prvTaskExitError();
 8002a30:	f7ff ff20 	bl	8002874 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000ed00 	.word	0xe000ed00
 8002a44:	410fc271 	.word	0x410fc271
 8002a48:	410fc270 	.word	0x410fc270
 8002a4c:	e000e400 	.word	0xe000e400
 8002a50:	2000046c 	.word	0x2000046c
 8002a54:	20000470 	.word	0x20000470
 8002a58:	e000ed20 	.word	0xe000ed20
 8002a5c:	2000000c 	.word	0x2000000c
 8002a60:	e000ef34 	.word	0xe000ef34

08002a64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
	__asm volatile
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	607b      	str	r3, [r7, #4]
}
 8002a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <vPortEnterCritical+0x58>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3301      	adds	r3, #1
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <vPortEnterCritical+0x58>)
 8002a86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <vPortEnterCritical+0x58>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10f      	bne.n	8002ab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <vPortEnterCritical+0x5c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <vPortEnterCritical+0x4c>
	__asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	603b      	str	r3, [r7, #0]
}
 8002aac:	bf00      	nop
 8002aae:	e7fe      	b.n	8002aae <vPortEnterCritical+0x4a>
	}
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	2000000c 	.word	0x2000000c
 8002ac0:	e000ed04 	.word	0xe000ed04

08002ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <vPortExitCritical+0x50>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10a      	bne.n	8002ae8 <vPortExitCritical+0x24>
	__asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	607b      	str	r3, [r7, #4]
}
 8002ae4:	bf00      	nop
 8002ae6:	e7fe      	b.n	8002ae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <vPortExitCritical+0x50>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3b01      	subs	r3, #1
 8002aee:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <vPortExitCritical+0x50>)
 8002af0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <vPortExitCritical+0x50>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <vPortExitCritical+0x42>
 8002afa:	2300      	movs	r3, #0
 8002afc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	2000000c 	.word	0x2000000c
	...

08002b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002b20:	f3ef 8009 	mrs	r0, PSP
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <pxCurrentTCBConst>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f01e 0f10 	tst.w	lr, #16
 8002b30:	bf08      	it	eq
 8002b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b3a:	6010      	str	r0, [r2, #0]
 8002b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002b44:	f380 8811 	msr	BASEPRI, r0
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f7ff fcc4 	bl	80024dc <vTaskSwitchContext>
 8002b54:	f04f 0000 	mov.w	r0, #0
 8002b58:	f380 8811 	msr	BASEPRI, r0
 8002b5c:	bc09      	pop	{r0, r3}
 8002b5e:	6819      	ldr	r1, [r3, #0]
 8002b60:	6808      	ldr	r0, [r1, #0]
 8002b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b66:	f01e 0f10 	tst.w	lr, #16
 8002b6a:	bf08      	it	eq
 8002b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b70:	f380 8809 	msr	PSP, r0
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w

08002b80 <pxCurrentTCBConst>:
 8002b80:	20000340 	.word	0x20000340
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop

08002b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	607b      	str	r3, [r7, #4]
}
 8002ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ba2:	f7ff fbe3 	bl	800236c <xTaskIncrementTick>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <SysTick_Handler+0x40>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f383 8811 	msr	BASEPRI, r3
}
 8002bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	e000ed04 	.word	0xe000ed04

08002bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <vPortSetupTimerInterrupt+0x34>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <vPortSetupTimerInterrupt+0x38>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <vPortSetupTimerInterrupt+0x3c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <vPortSetupTimerInterrupt+0x40>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <vPortSetupTimerInterrupt+0x44>)
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002bee:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <vPortSetupTimerInterrupt+0x34>)
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	601a      	str	r2, [r3, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e010 	.word	0xe000e010
 8002c04:	e000e018 	.word	0xe000e018
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	10624dd3 	.word	0x10624dd3
 8002c10:	e000e014 	.word	0xe000e014

08002c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002c24 <vPortEnableVFP+0x10>
 8002c18:	6801      	ldr	r1, [r0, #0]
 8002c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002c1e:	6001      	str	r1, [r0, #0]
 8002c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002c22:	bf00      	nop
 8002c24:	e000ed88 	.word	0xe000ed88

08002c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002c34:	f7ff faf0 	bl	8002218 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002c38:	4b5b      	ldr	r3, [pc, #364]	; (8002da8 <pvPortMalloc+0x180>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002c40:	f000 f920 	bl	8002e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c44:	4b59      	ldr	r3, [pc, #356]	; (8002dac <pvPortMalloc+0x184>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f040 8093 	bne.w	8002d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01d      	beq.n	8002c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002c58:	2208      	movs	r2, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d014      	beq.n	8002c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f023 0307 	bic.w	r3, r3, #7
 8002c70:	3308      	adds	r3, #8
 8002c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <pvPortMalloc+0x6c>
	__asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	617b      	str	r3, [r7, #20]
}
 8002c90:	bf00      	nop
 8002c92:	e7fe      	b.n	8002c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d06e      	beq.n	8002d78 <pvPortMalloc+0x150>
 8002c9a:	4b45      	ldr	r3, [pc, #276]	; (8002db0 <pvPortMalloc+0x188>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d869      	bhi.n	8002d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002ca4:	4b43      	ldr	r3, [pc, #268]	; (8002db4 <pvPortMalloc+0x18c>)
 8002ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002ca8:	4b42      	ldr	r3, [pc, #264]	; (8002db4 <pvPortMalloc+0x18c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cae:	e004      	b.n	8002cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d903      	bls.n	8002ccc <pvPortMalloc+0xa4>
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f1      	bne.n	8002cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <pvPortMalloc+0x180>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d050      	beq.n	8002d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2208      	movs	r2, #8
 8002cdc:	4413      	add	r3, r2
 8002cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1ad2      	subs	r2, r2, r3
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d91f      	bls.n	8002d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <pvPortMalloc+0xf8>
	__asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	613b      	str	r3, [r7, #16]
}
 8002d1c:	bf00      	nop
 8002d1e:	e7fe      	b.n	8002d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	1ad2      	subs	r2, r2, r3
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d32:	69b8      	ldr	r0, [r7, #24]
 8002d34:	f000 f908 	bl	8002f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <pvPortMalloc+0x188>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <pvPortMalloc+0x188>)
 8002d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <pvPortMalloc+0x188>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <pvPortMalloc+0x190>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d203      	bcs.n	8002d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <pvPortMalloc+0x188>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <pvPortMalloc+0x190>)
 8002d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <pvPortMalloc+0x184>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <pvPortMalloc+0x194>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <pvPortMalloc+0x194>)
 8002d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002d78:	f7ff fa5c 	bl	8002234 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <pvPortMalloc+0x174>
	__asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	60fb      	str	r3, [r7, #12]
}
 8002d98:	bf00      	nop
 8002d9a:	e7fe      	b.n	8002d9a <pvPortMalloc+0x172>
	return pvReturn;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3728      	adds	r7, #40	; 0x28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2000407c 	.word	0x2000407c
 8002dac:	20004090 	.word	0x20004090
 8002db0:	20004080 	.word	0x20004080
 8002db4:	20004074 	.word	0x20004074
 8002db8:	20004084 	.word	0x20004084
 8002dbc:	20004088 	.word	0x20004088

08002dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d04d      	beq.n	8002e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	425b      	negs	r3, r3
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4413      	add	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <vPortFree+0xb8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <vPortFree+0x44>
	__asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	60fb      	str	r3, [r7, #12]
}
 8002e00:	bf00      	nop
 8002e02:	e7fe      	b.n	8002e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <vPortFree+0x62>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	60bb      	str	r3, [r7, #8]
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <vPortFree+0xb8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01e      	beq.n	8002e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d11a      	bne.n	8002e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <vPortFree+0xb8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	401a      	ands	r2, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002e48:	f7ff f9e6 	bl	8002218 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <vPortFree+0xbc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4413      	add	r3, r2
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <vPortFree+0xbc>)
 8002e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e5a:	6938      	ldr	r0, [r7, #16]
 8002e5c:	f000 f874 	bl	8002f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002e60:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <vPortFree+0xc0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	4a06      	ldr	r2, [pc, #24]	; (8002e80 <vPortFree+0xc0>)
 8002e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002e6a:	f7ff f9e3 	bl	8002234 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20004090 	.word	0x20004090
 8002e7c:	20004080 	.word	0x20004080
 8002e80:	2000408c 	.word	0x2000408c

08002e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <prvHeapInit+0xac>)
 8002e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3307      	adds	r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0307 	bic.w	r3, r3, #7
 8002eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	4a1f      	ldr	r2, [pc, #124]	; (8002f30 <prvHeapInit+0xac>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <prvHeapInit+0xb0>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <prvHeapInit+0xb0>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	4413      	add	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0307 	bic.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <prvHeapInit+0xb4>)
 8002ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <prvHeapInit+0xb4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2200      	movs	r2, #0
 8002eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <prvHeapInit+0xb4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	1ad2      	subs	r2, r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <prvHeapInit+0xb4>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <prvHeapInit+0xb8>)
 8002f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <prvHeapInit+0xbc>)
 8002f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <prvHeapInit+0xc0>)
 8002f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f22:	601a      	str	r2, [r3, #0]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	20000474 	.word	0x20000474
 8002f34:	20004074 	.word	0x20004074
 8002f38:	2000407c 	.word	0x2000407c
 8002f3c:	20004084 	.word	0x20004084
 8002f40:	20004080 	.word	0x20004080
 8002f44:	20004090 	.word	0x20004090

08002f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f50:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <prvInsertBlockIntoFreeList+0xac>)
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	e002      	b.n	8002f5c <prvInsertBlockIntoFreeList+0x14>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d8f7      	bhi.n	8002f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	4413      	add	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d108      	bne.n	8002f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	441a      	add	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	441a      	add	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d118      	bne.n	8002fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d00d      	beq.n	8002fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	441a      	add	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e008      	b.n	8002fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e003      	b.n	8002fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d002      	beq.n	8002fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20004074 	.word	0x20004074
 8002ff8:	2000407c 	.word	0x2000407c

08002ffc <__errno>:
 8002ffc:	4b01      	ldr	r3, [pc, #4]	; (8003004 <__errno+0x8>)
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000010 	.word	0x20000010

08003008 <__libc_init_array>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	4d0d      	ldr	r5, [pc, #52]	; (8003040 <__libc_init_array+0x38>)
 800300c:	4c0d      	ldr	r4, [pc, #52]	; (8003044 <__libc_init_array+0x3c>)
 800300e:	1b64      	subs	r4, r4, r5
 8003010:	10a4      	asrs	r4, r4, #2
 8003012:	2600      	movs	r6, #0
 8003014:	42a6      	cmp	r6, r4
 8003016:	d109      	bne.n	800302c <__libc_init_array+0x24>
 8003018:	4d0b      	ldr	r5, [pc, #44]	; (8003048 <__libc_init_array+0x40>)
 800301a:	4c0c      	ldr	r4, [pc, #48]	; (800304c <__libc_init_array+0x44>)
 800301c:	f001 f824 	bl	8004068 <_init>
 8003020:	1b64      	subs	r4, r4, r5
 8003022:	10a4      	asrs	r4, r4, #2
 8003024:	2600      	movs	r6, #0
 8003026:	42a6      	cmp	r6, r4
 8003028:	d105      	bne.n	8003036 <__libc_init_array+0x2e>
 800302a:	bd70      	pop	{r4, r5, r6, pc}
 800302c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003030:	4798      	blx	r3
 8003032:	3601      	adds	r6, #1
 8003034:	e7ee      	b.n	8003014 <__libc_init_array+0xc>
 8003036:	f855 3b04 	ldr.w	r3, [r5], #4
 800303a:	4798      	blx	r3
 800303c:	3601      	adds	r6, #1
 800303e:	e7f2      	b.n	8003026 <__libc_init_array+0x1e>
 8003040:	080041cc 	.word	0x080041cc
 8003044:	080041cc 	.word	0x080041cc
 8003048:	080041cc 	.word	0x080041cc
 800304c:	080041d0 	.word	0x080041d0

08003050 <memset>:
 8003050:	4402      	add	r2, r0
 8003052:	4603      	mov	r3, r0
 8003054:	4293      	cmp	r3, r2
 8003056:	d100      	bne.n	800305a <memset+0xa>
 8003058:	4770      	bx	lr
 800305a:	f803 1b01 	strb.w	r1, [r3], #1
 800305e:	e7f9      	b.n	8003054 <memset+0x4>

08003060 <iprintf>:
 8003060:	b40f      	push	{r0, r1, r2, r3}
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <iprintf+0x2c>)
 8003064:	b513      	push	{r0, r1, r4, lr}
 8003066:	681c      	ldr	r4, [r3, #0]
 8003068:	b124      	cbz	r4, 8003074 <iprintf+0x14>
 800306a:	69a3      	ldr	r3, [r4, #24]
 800306c:	b913      	cbnz	r3, 8003074 <iprintf+0x14>
 800306e:	4620      	mov	r0, r4
 8003070:	f000 fa5e 	bl	8003530 <__sinit>
 8003074:	ab05      	add	r3, sp, #20
 8003076:	9a04      	ldr	r2, [sp, #16]
 8003078:	68a1      	ldr	r1, [r4, #8]
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	4620      	mov	r0, r4
 800307e:	f000 fc67 	bl	8003950 <_vfiprintf_r>
 8003082:	b002      	add	sp, #8
 8003084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003088:	b004      	add	sp, #16
 800308a:	4770      	bx	lr
 800308c:	20000010 	.word	0x20000010

08003090 <_puts_r>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	460e      	mov	r6, r1
 8003094:	4605      	mov	r5, r0
 8003096:	b118      	cbz	r0, 80030a0 <_puts_r+0x10>
 8003098:	6983      	ldr	r3, [r0, #24]
 800309a:	b90b      	cbnz	r3, 80030a0 <_puts_r+0x10>
 800309c:	f000 fa48 	bl	8003530 <__sinit>
 80030a0:	69ab      	ldr	r3, [r5, #24]
 80030a2:	68ac      	ldr	r4, [r5, #8]
 80030a4:	b913      	cbnz	r3, 80030ac <_puts_r+0x1c>
 80030a6:	4628      	mov	r0, r5
 80030a8:	f000 fa42 	bl	8003530 <__sinit>
 80030ac:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <_puts_r+0xd0>)
 80030ae:	429c      	cmp	r4, r3
 80030b0:	d120      	bne.n	80030f4 <_puts_r+0x64>
 80030b2:	686c      	ldr	r4, [r5, #4]
 80030b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030b6:	07db      	lsls	r3, r3, #31
 80030b8:	d405      	bmi.n	80030c6 <_puts_r+0x36>
 80030ba:	89a3      	ldrh	r3, [r4, #12]
 80030bc:	0598      	lsls	r0, r3, #22
 80030be:	d402      	bmi.n	80030c6 <_puts_r+0x36>
 80030c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030c2:	f000 fad3 	bl	800366c <__retarget_lock_acquire_recursive>
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	0719      	lsls	r1, r3, #28
 80030ca:	d51d      	bpl.n	8003108 <_puts_r+0x78>
 80030cc:	6923      	ldr	r3, [r4, #16]
 80030ce:	b1db      	cbz	r3, 8003108 <_puts_r+0x78>
 80030d0:	3e01      	subs	r6, #1
 80030d2:	68a3      	ldr	r3, [r4, #8]
 80030d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030d8:	3b01      	subs	r3, #1
 80030da:	60a3      	str	r3, [r4, #8]
 80030dc:	bb39      	cbnz	r1, 800312e <_puts_r+0x9e>
 80030de:	2b00      	cmp	r3, #0
 80030e0:	da38      	bge.n	8003154 <_puts_r+0xc4>
 80030e2:	4622      	mov	r2, r4
 80030e4:	210a      	movs	r1, #10
 80030e6:	4628      	mov	r0, r5
 80030e8:	f000 f848 	bl	800317c <__swbuf_r>
 80030ec:	3001      	adds	r0, #1
 80030ee:	d011      	beq.n	8003114 <_puts_r+0x84>
 80030f0:	250a      	movs	r5, #10
 80030f2:	e011      	b.n	8003118 <_puts_r+0x88>
 80030f4:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <_puts_r+0xd4>)
 80030f6:	429c      	cmp	r4, r3
 80030f8:	d101      	bne.n	80030fe <_puts_r+0x6e>
 80030fa:	68ac      	ldr	r4, [r5, #8]
 80030fc:	e7da      	b.n	80030b4 <_puts_r+0x24>
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <_puts_r+0xd8>)
 8003100:	429c      	cmp	r4, r3
 8003102:	bf08      	it	eq
 8003104:	68ec      	ldreq	r4, [r5, #12]
 8003106:	e7d5      	b.n	80030b4 <_puts_r+0x24>
 8003108:	4621      	mov	r1, r4
 800310a:	4628      	mov	r0, r5
 800310c:	f000 f888 	bl	8003220 <__swsetup_r>
 8003110:	2800      	cmp	r0, #0
 8003112:	d0dd      	beq.n	80030d0 <_puts_r+0x40>
 8003114:	f04f 35ff 	mov.w	r5, #4294967295
 8003118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800311a:	07da      	lsls	r2, r3, #31
 800311c:	d405      	bmi.n	800312a <_puts_r+0x9a>
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	059b      	lsls	r3, r3, #22
 8003122:	d402      	bmi.n	800312a <_puts_r+0x9a>
 8003124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003126:	f000 faa2 	bl	800366e <__retarget_lock_release_recursive>
 800312a:	4628      	mov	r0, r5
 800312c:	bd70      	pop	{r4, r5, r6, pc}
 800312e:	2b00      	cmp	r3, #0
 8003130:	da04      	bge.n	800313c <_puts_r+0xac>
 8003132:	69a2      	ldr	r2, [r4, #24]
 8003134:	429a      	cmp	r2, r3
 8003136:	dc06      	bgt.n	8003146 <_puts_r+0xb6>
 8003138:	290a      	cmp	r1, #10
 800313a:	d004      	beq.n	8003146 <_puts_r+0xb6>
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	6022      	str	r2, [r4, #0]
 8003142:	7019      	strb	r1, [r3, #0]
 8003144:	e7c5      	b.n	80030d2 <_puts_r+0x42>
 8003146:	4622      	mov	r2, r4
 8003148:	4628      	mov	r0, r5
 800314a:	f000 f817 	bl	800317c <__swbuf_r>
 800314e:	3001      	adds	r0, #1
 8003150:	d1bf      	bne.n	80030d2 <_puts_r+0x42>
 8003152:	e7df      	b.n	8003114 <_puts_r+0x84>
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	250a      	movs	r5, #10
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	6022      	str	r2, [r4, #0]
 800315c:	701d      	strb	r5, [r3, #0]
 800315e:	e7db      	b.n	8003118 <_puts_r+0x88>
 8003160:	08004150 	.word	0x08004150
 8003164:	08004170 	.word	0x08004170
 8003168:	08004130 	.word	0x08004130

0800316c <puts>:
 800316c:	4b02      	ldr	r3, [pc, #8]	; (8003178 <puts+0xc>)
 800316e:	4601      	mov	r1, r0
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	f7ff bf8d 	b.w	8003090 <_puts_r>
 8003176:	bf00      	nop
 8003178:	20000010 	.word	0x20000010

0800317c <__swbuf_r>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	460e      	mov	r6, r1
 8003180:	4614      	mov	r4, r2
 8003182:	4605      	mov	r5, r0
 8003184:	b118      	cbz	r0, 800318e <__swbuf_r+0x12>
 8003186:	6983      	ldr	r3, [r0, #24]
 8003188:	b90b      	cbnz	r3, 800318e <__swbuf_r+0x12>
 800318a:	f000 f9d1 	bl	8003530 <__sinit>
 800318e:	4b21      	ldr	r3, [pc, #132]	; (8003214 <__swbuf_r+0x98>)
 8003190:	429c      	cmp	r4, r3
 8003192:	d12b      	bne.n	80031ec <__swbuf_r+0x70>
 8003194:	686c      	ldr	r4, [r5, #4]
 8003196:	69a3      	ldr	r3, [r4, #24]
 8003198:	60a3      	str	r3, [r4, #8]
 800319a:	89a3      	ldrh	r3, [r4, #12]
 800319c:	071a      	lsls	r2, r3, #28
 800319e:	d52f      	bpl.n	8003200 <__swbuf_r+0x84>
 80031a0:	6923      	ldr	r3, [r4, #16]
 80031a2:	b36b      	cbz	r3, 8003200 <__swbuf_r+0x84>
 80031a4:	6923      	ldr	r3, [r4, #16]
 80031a6:	6820      	ldr	r0, [r4, #0]
 80031a8:	1ac0      	subs	r0, r0, r3
 80031aa:	6963      	ldr	r3, [r4, #20]
 80031ac:	b2f6      	uxtb	r6, r6
 80031ae:	4283      	cmp	r3, r0
 80031b0:	4637      	mov	r7, r6
 80031b2:	dc04      	bgt.n	80031be <__swbuf_r+0x42>
 80031b4:	4621      	mov	r1, r4
 80031b6:	4628      	mov	r0, r5
 80031b8:	f000 f926 	bl	8003408 <_fflush_r>
 80031bc:	bb30      	cbnz	r0, 800320c <__swbuf_r+0x90>
 80031be:	68a3      	ldr	r3, [r4, #8]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	60a3      	str	r3, [r4, #8]
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	6022      	str	r2, [r4, #0]
 80031ca:	701e      	strb	r6, [r3, #0]
 80031cc:	6963      	ldr	r3, [r4, #20]
 80031ce:	3001      	adds	r0, #1
 80031d0:	4283      	cmp	r3, r0
 80031d2:	d004      	beq.n	80031de <__swbuf_r+0x62>
 80031d4:	89a3      	ldrh	r3, [r4, #12]
 80031d6:	07db      	lsls	r3, r3, #31
 80031d8:	d506      	bpl.n	80031e8 <__swbuf_r+0x6c>
 80031da:	2e0a      	cmp	r6, #10
 80031dc:	d104      	bne.n	80031e8 <__swbuf_r+0x6c>
 80031de:	4621      	mov	r1, r4
 80031e0:	4628      	mov	r0, r5
 80031e2:	f000 f911 	bl	8003408 <_fflush_r>
 80031e6:	b988      	cbnz	r0, 800320c <__swbuf_r+0x90>
 80031e8:	4638      	mov	r0, r7
 80031ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <__swbuf_r+0x9c>)
 80031ee:	429c      	cmp	r4, r3
 80031f0:	d101      	bne.n	80031f6 <__swbuf_r+0x7a>
 80031f2:	68ac      	ldr	r4, [r5, #8]
 80031f4:	e7cf      	b.n	8003196 <__swbuf_r+0x1a>
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <__swbuf_r+0xa0>)
 80031f8:	429c      	cmp	r4, r3
 80031fa:	bf08      	it	eq
 80031fc:	68ec      	ldreq	r4, [r5, #12]
 80031fe:	e7ca      	b.n	8003196 <__swbuf_r+0x1a>
 8003200:	4621      	mov	r1, r4
 8003202:	4628      	mov	r0, r5
 8003204:	f000 f80c 	bl	8003220 <__swsetup_r>
 8003208:	2800      	cmp	r0, #0
 800320a:	d0cb      	beq.n	80031a4 <__swbuf_r+0x28>
 800320c:	f04f 37ff 	mov.w	r7, #4294967295
 8003210:	e7ea      	b.n	80031e8 <__swbuf_r+0x6c>
 8003212:	bf00      	nop
 8003214:	08004150 	.word	0x08004150
 8003218:	08004170 	.word	0x08004170
 800321c:	08004130 	.word	0x08004130

08003220 <__swsetup_r>:
 8003220:	4b32      	ldr	r3, [pc, #200]	; (80032ec <__swsetup_r+0xcc>)
 8003222:	b570      	push	{r4, r5, r6, lr}
 8003224:	681d      	ldr	r5, [r3, #0]
 8003226:	4606      	mov	r6, r0
 8003228:	460c      	mov	r4, r1
 800322a:	b125      	cbz	r5, 8003236 <__swsetup_r+0x16>
 800322c:	69ab      	ldr	r3, [r5, #24]
 800322e:	b913      	cbnz	r3, 8003236 <__swsetup_r+0x16>
 8003230:	4628      	mov	r0, r5
 8003232:	f000 f97d 	bl	8003530 <__sinit>
 8003236:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <__swsetup_r+0xd0>)
 8003238:	429c      	cmp	r4, r3
 800323a:	d10f      	bne.n	800325c <__swsetup_r+0x3c>
 800323c:	686c      	ldr	r4, [r5, #4]
 800323e:	89a3      	ldrh	r3, [r4, #12]
 8003240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003244:	0719      	lsls	r1, r3, #28
 8003246:	d42c      	bmi.n	80032a2 <__swsetup_r+0x82>
 8003248:	06dd      	lsls	r5, r3, #27
 800324a:	d411      	bmi.n	8003270 <__swsetup_r+0x50>
 800324c:	2309      	movs	r3, #9
 800324e:	6033      	str	r3, [r6, #0]
 8003250:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003254:	81a3      	strh	r3, [r4, #12]
 8003256:	f04f 30ff 	mov.w	r0, #4294967295
 800325a:	e03e      	b.n	80032da <__swsetup_r+0xba>
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <__swsetup_r+0xd4>)
 800325e:	429c      	cmp	r4, r3
 8003260:	d101      	bne.n	8003266 <__swsetup_r+0x46>
 8003262:	68ac      	ldr	r4, [r5, #8]
 8003264:	e7eb      	b.n	800323e <__swsetup_r+0x1e>
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <__swsetup_r+0xd8>)
 8003268:	429c      	cmp	r4, r3
 800326a:	bf08      	it	eq
 800326c:	68ec      	ldreq	r4, [r5, #12]
 800326e:	e7e6      	b.n	800323e <__swsetup_r+0x1e>
 8003270:	0758      	lsls	r0, r3, #29
 8003272:	d512      	bpl.n	800329a <__swsetup_r+0x7a>
 8003274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003276:	b141      	cbz	r1, 800328a <__swsetup_r+0x6a>
 8003278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800327c:	4299      	cmp	r1, r3
 800327e:	d002      	beq.n	8003286 <__swsetup_r+0x66>
 8003280:	4630      	mov	r0, r6
 8003282:	f000 fa5b 	bl	800373c <_free_r>
 8003286:	2300      	movs	r3, #0
 8003288:	6363      	str	r3, [r4, #52]	; 0x34
 800328a:	89a3      	ldrh	r3, [r4, #12]
 800328c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003290:	81a3      	strh	r3, [r4, #12]
 8003292:	2300      	movs	r3, #0
 8003294:	6063      	str	r3, [r4, #4]
 8003296:	6923      	ldr	r3, [r4, #16]
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	89a3      	ldrh	r3, [r4, #12]
 800329c:	f043 0308 	orr.w	r3, r3, #8
 80032a0:	81a3      	strh	r3, [r4, #12]
 80032a2:	6923      	ldr	r3, [r4, #16]
 80032a4:	b94b      	cbnz	r3, 80032ba <__swsetup_r+0x9a>
 80032a6:	89a3      	ldrh	r3, [r4, #12]
 80032a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b0:	d003      	beq.n	80032ba <__swsetup_r+0x9a>
 80032b2:	4621      	mov	r1, r4
 80032b4:	4630      	mov	r0, r6
 80032b6:	f000 fa01 	bl	80036bc <__smakebuf_r>
 80032ba:	89a0      	ldrh	r0, [r4, #12]
 80032bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032c0:	f010 0301 	ands.w	r3, r0, #1
 80032c4:	d00a      	beq.n	80032dc <__swsetup_r+0xbc>
 80032c6:	2300      	movs	r3, #0
 80032c8:	60a3      	str	r3, [r4, #8]
 80032ca:	6963      	ldr	r3, [r4, #20]
 80032cc:	425b      	negs	r3, r3
 80032ce:	61a3      	str	r3, [r4, #24]
 80032d0:	6923      	ldr	r3, [r4, #16]
 80032d2:	b943      	cbnz	r3, 80032e6 <__swsetup_r+0xc6>
 80032d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032d8:	d1ba      	bne.n	8003250 <__swsetup_r+0x30>
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	0781      	lsls	r1, r0, #30
 80032de:	bf58      	it	pl
 80032e0:	6963      	ldrpl	r3, [r4, #20]
 80032e2:	60a3      	str	r3, [r4, #8]
 80032e4:	e7f4      	b.n	80032d0 <__swsetup_r+0xb0>
 80032e6:	2000      	movs	r0, #0
 80032e8:	e7f7      	b.n	80032da <__swsetup_r+0xba>
 80032ea:	bf00      	nop
 80032ec:	20000010 	.word	0x20000010
 80032f0:	08004150 	.word	0x08004150
 80032f4:	08004170 	.word	0x08004170
 80032f8:	08004130 	.word	0x08004130

080032fc <__sflush_r>:
 80032fc:	898a      	ldrh	r2, [r1, #12]
 80032fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003302:	4605      	mov	r5, r0
 8003304:	0710      	lsls	r0, r2, #28
 8003306:	460c      	mov	r4, r1
 8003308:	d458      	bmi.n	80033bc <__sflush_r+0xc0>
 800330a:	684b      	ldr	r3, [r1, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	dc05      	bgt.n	800331c <__sflush_r+0x20>
 8003310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	dc02      	bgt.n	800331c <__sflush_r+0x20>
 8003316:	2000      	movs	r0, #0
 8003318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800331c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800331e:	2e00      	cmp	r6, #0
 8003320:	d0f9      	beq.n	8003316 <__sflush_r+0x1a>
 8003322:	2300      	movs	r3, #0
 8003324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003328:	682f      	ldr	r7, [r5, #0]
 800332a:	602b      	str	r3, [r5, #0]
 800332c:	d032      	beq.n	8003394 <__sflush_r+0x98>
 800332e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	075a      	lsls	r2, r3, #29
 8003334:	d505      	bpl.n	8003342 <__sflush_r+0x46>
 8003336:	6863      	ldr	r3, [r4, #4]
 8003338:	1ac0      	subs	r0, r0, r3
 800333a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800333c:	b10b      	cbz	r3, 8003342 <__sflush_r+0x46>
 800333e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003340:	1ac0      	subs	r0, r0, r3
 8003342:	2300      	movs	r3, #0
 8003344:	4602      	mov	r2, r0
 8003346:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003348:	6a21      	ldr	r1, [r4, #32]
 800334a:	4628      	mov	r0, r5
 800334c:	47b0      	blx	r6
 800334e:	1c43      	adds	r3, r0, #1
 8003350:	89a3      	ldrh	r3, [r4, #12]
 8003352:	d106      	bne.n	8003362 <__sflush_r+0x66>
 8003354:	6829      	ldr	r1, [r5, #0]
 8003356:	291d      	cmp	r1, #29
 8003358:	d82c      	bhi.n	80033b4 <__sflush_r+0xb8>
 800335a:	4a2a      	ldr	r2, [pc, #168]	; (8003404 <__sflush_r+0x108>)
 800335c:	40ca      	lsrs	r2, r1
 800335e:	07d6      	lsls	r6, r2, #31
 8003360:	d528      	bpl.n	80033b4 <__sflush_r+0xb8>
 8003362:	2200      	movs	r2, #0
 8003364:	6062      	str	r2, [r4, #4]
 8003366:	04d9      	lsls	r1, r3, #19
 8003368:	6922      	ldr	r2, [r4, #16]
 800336a:	6022      	str	r2, [r4, #0]
 800336c:	d504      	bpl.n	8003378 <__sflush_r+0x7c>
 800336e:	1c42      	adds	r2, r0, #1
 8003370:	d101      	bne.n	8003376 <__sflush_r+0x7a>
 8003372:	682b      	ldr	r3, [r5, #0]
 8003374:	b903      	cbnz	r3, 8003378 <__sflush_r+0x7c>
 8003376:	6560      	str	r0, [r4, #84]	; 0x54
 8003378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800337a:	602f      	str	r7, [r5, #0]
 800337c:	2900      	cmp	r1, #0
 800337e:	d0ca      	beq.n	8003316 <__sflush_r+0x1a>
 8003380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003384:	4299      	cmp	r1, r3
 8003386:	d002      	beq.n	800338e <__sflush_r+0x92>
 8003388:	4628      	mov	r0, r5
 800338a:	f000 f9d7 	bl	800373c <_free_r>
 800338e:	2000      	movs	r0, #0
 8003390:	6360      	str	r0, [r4, #52]	; 0x34
 8003392:	e7c1      	b.n	8003318 <__sflush_r+0x1c>
 8003394:	6a21      	ldr	r1, [r4, #32]
 8003396:	2301      	movs	r3, #1
 8003398:	4628      	mov	r0, r5
 800339a:	47b0      	blx	r6
 800339c:	1c41      	adds	r1, r0, #1
 800339e:	d1c7      	bne.n	8003330 <__sflush_r+0x34>
 80033a0:	682b      	ldr	r3, [r5, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0c4      	beq.n	8003330 <__sflush_r+0x34>
 80033a6:	2b1d      	cmp	r3, #29
 80033a8:	d001      	beq.n	80033ae <__sflush_r+0xb2>
 80033aa:	2b16      	cmp	r3, #22
 80033ac:	d101      	bne.n	80033b2 <__sflush_r+0xb6>
 80033ae:	602f      	str	r7, [r5, #0]
 80033b0:	e7b1      	b.n	8003316 <__sflush_r+0x1a>
 80033b2:	89a3      	ldrh	r3, [r4, #12]
 80033b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b8:	81a3      	strh	r3, [r4, #12]
 80033ba:	e7ad      	b.n	8003318 <__sflush_r+0x1c>
 80033bc:	690f      	ldr	r7, [r1, #16]
 80033be:	2f00      	cmp	r7, #0
 80033c0:	d0a9      	beq.n	8003316 <__sflush_r+0x1a>
 80033c2:	0793      	lsls	r3, r2, #30
 80033c4:	680e      	ldr	r6, [r1, #0]
 80033c6:	bf08      	it	eq
 80033c8:	694b      	ldreq	r3, [r1, #20]
 80033ca:	600f      	str	r7, [r1, #0]
 80033cc:	bf18      	it	ne
 80033ce:	2300      	movne	r3, #0
 80033d0:	eba6 0807 	sub.w	r8, r6, r7
 80033d4:	608b      	str	r3, [r1, #8]
 80033d6:	f1b8 0f00 	cmp.w	r8, #0
 80033da:	dd9c      	ble.n	8003316 <__sflush_r+0x1a>
 80033dc:	6a21      	ldr	r1, [r4, #32]
 80033de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033e0:	4643      	mov	r3, r8
 80033e2:	463a      	mov	r2, r7
 80033e4:	4628      	mov	r0, r5
 80033e6:	47b0      	blx	r6
 80033e8:	2800      	cmp	r0, #0
 80033ea:	dc06      	bgt.n	80033fa <__sflush_r+0xfe>
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f2:	81a3      	strh	r3, [r4, #12]
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	e78e      	b.n	8003318 <__sflush_r+0x1c>
 80033fa:	4407      	add	r7, r0
 80033fc:	eba8 0800 	sub.w	r8, r8, r0
 8003400:	e7e9      	b.n	80033d6 <__sflush_r+0xda>
 8003402:	bf00      	nop
 8003404:	20400001 	.word	0x20400001

08003408 <_fflush_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	690b      	ldr	r3, [r1, #16]
 800340c:	4605      	mov	r5, r0
 800340e:	460c      	mov	r4, r1
 8003410:	b913      	cbnz	r3, 8003418 <_fflush_r+0x10>
 8003412:	2500      	movs	r5, #0
 8003414:	4628      	mov	r0, r5
 8003416:	bd38      	pop	{r3, r4, r5, pc}
 8003418:	b118      	cbz	r0, 8003422 <_fflush_r+0x1a>
 800341a:	6983      	ldr	r3, [r0, #24]
 800341c:	b90b      	cbnz	r3, 8003422 <_fflush_r+0x1a>
 800341e:	f000 f887 	bl	8003530 <__sinit>
 8003422:	4b14      	ldr	r3, [pc, #80]	; (8003474 <_fflush_r+0x6c>)
 8003424:	429c      	cmp	r4, r3
 8003426:	d11b      	bne.n	8003460 <_fflush_r+0x58>
 8003428:	686c      	ldr	r4, [r5, #4]
 800342a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ef      	beq.n	8003412 <_fflush_r+0xa>
 8003432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003434:	07d0      	lsls	r0, r2, #31
 8003436:	d404      	bmi.n	8003442 <_fflush_r+0x3a>
 8003438:	0599      	lsls	r1, r3, #22
 800343a:	d402      	bmi.n	8003442 <_fflush_r+0x3a>
 800343c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800343e:	f000 f915 	bl	800366c <__retarget_lock_acquire_recursive>
 8003442:	4628      	mov	r0, r5
 8003444:	4621      	mov	r1, r4
 8003446:	f7ff ff59 	bl	80032fc <__sflush_r>
 800344a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800344c:	07da      	lsls	r2, r3, #31
 800344e:	4605      	mov	r5, r0
 8003450:	d4e0      	bmi.n	8003414 <_fflush_r+0xc>
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	059b      	lsls	r3, r3, #22
 8003456:	d4dd      	bmi.n	8003414 <_fflush_r+0xc>
 8003458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800345a:	f000 f908 	bl	800366e <__retarget_lock_release_recursive>
 800345e:	e7d9      	b.n	8003414 <_fflush_r+0xc>
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <_fflush_r+0x70>)
 8003462:	429c      	cmp	r4, r3
 8003464:	d101      	bne.n	800346a <_fflush_r+0x62>
 8003466:	68ac      	ldr	r4, [r5, #8]
 8003468:	e7df      	b.n	800342a <_fflush_r+0x22>
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <_fflush_r+0x74>)
 800346c:	429c      	cmp	r4, r3
 800346e:	bf08      	it	eq
 8003470:	68ec      	ldreq	r4, [r5, #12]
 8003472:	e7da      	b.n	800342a <_fflush_r+0x22>
 8003474:	08004150 	.word	0x08004150
 8003478:	08004170 	.word	0x08004170
 800347c:	08004130 	.word	0x08004130

08003480 <std>:
 8003480:	2300      	movs	r3, #0
 8003482:	b510      	push	{r4, lr}
 8003484:	4604      	mov	r4, r0
 8003486:	e9c0 3300 	strd	r3, r3, [r0]
 800348a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800348e:	6083      	str	r3, [r0, #8]
 8003490:	8181      	strh	r1, [r0, #12]
 8003492:	6643      	str	r3, [r0, #100]	; 0x64
 8003494:	81c2      	strh	r2, [r0, #14]
 8003496:	6183      	str	r3, [r0, #24]
 8003498:	4619      	mov	r1, r3
 800349a:	2208      	movs	r2, #8
 800349c:	305c      	adds	r0, #92	; 0x5c
 800349e:	f7ff fdd7 	bl	8003050 <memset>
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <std+0x38>)
 80034a4:	6263      	str	r3, [r4, #36]	; 0x24
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <std+0x3c>)
 80034a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <std+0x40>)
 80034ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <std+0x44>)
 80034b0:	6224      	str	r4, [r4, #32]
 80034b2:	6323      	str	r3, [r4, #48]	; 0x30
 80034b4:	bd10      	pop	{r4, pc}
 80034b6:	bf00      	nop
 80034b8:	08003ef9 	.word	0x08003ef9
 80034bc:	08003f1b 	.word	0x08003f1b
 80034c0:	08003f53 	.word	0x08003f53
 80034c4:	08003f77 	.word	0x08003f77

080034c8 <_cleanup_r>:
 80034c8:	4901      	ldr	r1, [pc, #4]	; (80034d0 <_cleanup_r+0x8>)
 80034ca:	f000 b8af 	b.w	800362c <_fwalk_reent>
 80034ce:	bf00      	nop
 80034d0:	08003409 	.word	0x08003409

080034d4 <__sfmoreglue>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	2268      	movs	r2, #104	; 0x68
 80034d8:	1e4d      	subs	r5, r1, #1
 80034da:	4355      	muls	r5, r2
 80034dc:	460e      	mov	r6, r1
 80034de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034e2:	f000 f997 	bl	8003814 <_malloc_r>
 80034e6:	4604      	mov	r4, r0
 80034e8:	b140      	cbz	r0, 80034fc <__sfmoreglue+0x28>
 80034ea:	2100      	movs	r1, #0
 80034ec:	e9c0 1600 	strd	r1, r6, [r0]
 80034f0:	300c      	adds	r0, #12
 80034f2:	60a0      	str	r0, [r4, #8]
 80034f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034f8:	f7ff fdaa 	bl	8003050 <memset>
 80034fc:	4620      	mov	r0, r4
 80034fe:	bd70      	pop	{r4, r5, r6, pc}

08003500 <__sfp_lock_acquire>:
 8003500:	4801      	ldr	r0, [pc, #4]	; (8003508 <__sfp_lock_acquire+0x8>)
 8003502:	f000 b8b3 	b.w	800366c <__retarget_lock_acquire_recursive>
 8003506:	bf00      	nop
 8003508:	20004095 	.word	0x20004095

0800350c <__sfp_lock_release>:
 800350c:	4801      	ldr	r0, [pc, #4]	; (8003514 <__sfp_lock_release+0x8>)
 800350e:	f000 b8ae 	b.w	800366e <__retarget_lock_release_recursive>
 8003512:	bf00      	nop
 8003514:	20004095 	.word	0x20004095

08003518 <__sinit_lock_acquire>:
 8003518:	4801      	ldr	r0, [pc, #4]	; (8003520 <__sinit_lock_acquire+0x8>)
 800351a:	f000 b8a7 	b.w	800366c <__retarget_lock_acquire_recursive>
 800351e:	bf00      	nop
 8003520:	20004096 	.word	0x20004096

08003524 <__sinit_lock_release>:
 8003524:	4801      	ldr	r0, [pc, #4]	; (800352c <__sinit_lock_release+0x8>)
 8003526:	f000 b8a2 	b.w	800366e <__retarget_lock_release_recursive>
 800352a:	bf00      	nop
 800352c:	20004096 	.word	0x20004096

08003530 <__sinit>:
 8003530:	b510      	push	{r4, lr}
 8003532:	4604      	mov	r4, r0
 8003534:	f7ff fff0 	bl	8003518 <__sinit_lock_acquire>
 8003538:	69a3      	ldr	r3, [r4, #24]
 800353a:	b11b      	cbz	r3, 8003544 <__sinit+0x14>
 800353c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003540:	f7ff bff0 	b.w	8003524 <__sinit_lock_release>
 8003544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003548:	6523      	str	r3, [r4, #80]	; 0x50
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <__sinit+0x68>)
 800354c:	4a13      	ldr	r2, [pc, #76]	; (800359c <__sinit+0x6c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	62a2      	str	r2, [r4, #40]	; 0x28
 8003552:	42a3      	cmp	r3, r4
 8003554:	bf04      	itt	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	61a3      	streq	r3, [r4, #24]
 800355a:	4620      	mov	r0, r4
 800355c:	f000 f820 	bl	80035a0 <__sfp>
 8003560:	6060      	str	r0, [r4, #4]
 8003562:	4620      	mov	r0, r4
 8003564:	f000 f81c 	bl	80035a0 <__sfp>
 8003568:	60a0      	str	r0, [r4, #8]
 800356a:	4620      	mov	r0, r4
 800356c:	f000 f818 	bl	80035a0 <__sfp>
 8003570:	2200      	movs	r2, #0
 8003572:	60e0      	str	r0, [r4, #12]
 8003574:	2104      	movs	r1, #4
 8003576:	6860      	ldr	r0, [r4, #4]
 8003578:	f7ff ff82 	bl	8003480 <std>
 800357c:	68a0      	ldr	r0, [r4, #8]
 800357e:	2201      	movs	r2, #1
 8003580:	2109      	movs	r1, #9
 8003582:	f7ff ff7d 	bl	8003480 <std>
 8003586:	68e0      	ldr	r0, [r4, #12]
 8003588:	2202      	movs	r2, #2
 800358a:	2112      	movs	r1, #18
 800358c:	f7ff ff78 	bl	8003480 <std>
 8003590:	2301      	movs	r3, #1
 8003592:	61a3      	str	r3, [r4, #24]
 8003594:	e7d2      	b.n	800353c <__sinit+0xc>
 8003596:	bf00      	nop
 8003598:	0800412c 	.word	0x0800412c
 800359c:	080034c9 	.word	0x080034c9

080035a0 <__sfp>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	4607      	mov	r7, r0
 80035a4:	f7ff ffac 	bl	8003500 <__sfp_lock_acquire>
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <__sfp+0x84>)
 80035aa:	681e      	ldr	r6, [r3, #0]
 80035ac:	69b3      	ldr	r3, [r6, #24]
 80035ae:	b913      	cbnz	r3, 80035b6 <__sfp+0x16>
 80035b0:	4630      	mov	r0, r6
 80035b2:	f7ff ffbd 	bl	8003530 <__sinit>
 80035b6:	3648      	adds	r6, #72	; 0x48
 80035b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035bc:	3b01      	subs	r3, #1
 80035be:	d503      	bpl.n	80035c8 <__sfp+0x28>
 80035c0:	6833      	ldr	r3, [r6, #0]
 80035c2:	b30b      	cbz	r3, 8003608 <__sfp+0x68>
 80035c4:	6836      	ldr	r6, [r6, #0]
 80035c6:	e7f7      	b.n	80035b8 <__sfp+0x18>
 80035c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035cc:	b9d5      	cbnz	r5, 8003604 <__sfp+0x64>
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <__sfp+0x88>)
 80035d0:	60e3      	str	r3, [r4, #12]
 80035d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035d6:	6665      	str	r5, [r4, #100]	; 0x64
 80035d8:	f000 f847 	bl	800366a <__retarget_lock_init_recursive>
 80035dc:	f7ff ff96 	bl	800350c <__sfp_lock_release>
 80035e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035e8:	6025      	str	r5, [r4, #0]
 80035ea:	61a5      	str	r5, [r4, #24]
 80035ec:	2208      	movs	r2, #8
 80035ee:	4629      	mov	r1, r5
 80035f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035f4:	f7ff fd2c 	bl	8003050 <memset>
 80035f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003600:	4620      	mov	r0, r4
 8003602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003604:	3468      	adds	r4, #104	; 0x68
 8003606:	e7d9      	b.n	80035bc <__sfp+0x1c>
 8003608:	2104      	movs	r1, #4
 800360a:	4638      	mov	r0, r7
 800360c:	f7ff ff62 	bl	80034d4 <__sfmoreglue>
 8003610:	4604      	mov	r4, r0
 8003612:	6030      	str	r0, [r6, #0]
 8003614:	2800      	cmp	r0, #0
 8003616:	d1d5      	bne.n	80035c4 <__sfp+0x24>
 8003618:	f7ff ff78 	bl	800350c <__sfp_lock_release>
 800361c:	230c      	movs	r3, #12
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	e7ee      	b.n	8003600 <__sfp+0x60>
 8003622:	bf00      	nop
 8003624:	0800412c 	.word	0x0800412c
 8003628:	ffff0001 	.word	0xffff0001

0800362c <_fwalk_reent>:
 800362c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003630:	4606      	mov	r6, r0
 8003632:	4688      	mov	r8, r1
 8003634:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003638:	2700      	movs	r7, #0
 800363a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800363e:	f1b9 0901 	subs.w	r9, r9, #1
 8003642:	d505      	bpl.n	8003650 <_fwalk_reent+0x24>
 8003644:	6824      	ldr	r4, [r4, #0]
 8003646:	2c00      	cmp	r4, #0
 8003648:	d1f7      	bne.n	800363a <_fwalk_reent+0xe>
 800364a:	4638      	mov	r0, r7
 800364c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003650:	89ab      	ldrh	r3, [r5, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d907      	bls.n	8003666 <_fwalk_reent+0x3a>
 8003656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800365a:	3301      	adds	r3, #1
 800365c:	d003      	beq.n	8003666 <_fwalk_reent+0x3a>
 800365e:	4629      	mov	r1, r5
 8003660:	4630      	mov	r0, r6
 8003662:	47c0      	blx	r8
 8003664:	4307      	orrs	r7, r0
 8003666:	3568      	adds	r5, #104	; 0x68
 8003668:	e7e9      	b.n	800363e <_fwalk_reent+0x12>

0800366a <__retarget_lock_init_recursive>:
 800366a:	4770      	bx	lr

0800366c <__retarget_lock_acquire_recursive>:
 800366c:	4770      	bx	lr

0800366e <__retarget_lock_release_recursive>:
 800366e:	4770      	bx	lr

08003670 <__swhatbuf_r>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	460e      	mov	r6, r1
 8003674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003678:	2900      	cmp	r1, #0
 800367a:	b096      	sub	sp, #88	; 0x58
 800367c:	4614      	mov	r4, r2
 800367e:	461d      	mov	r5, r3
 8003680:	da08      	bge.n	8003694 <__swhatbuf_r+0x24>
 8003682:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	602a      	str	r2, [r5, #0]
 800368a:	061a      	lsls	r2, r3, #24
 800368c:	d410      	bmi.n	80036b0 <__swhatbuf_r+0x40>
 800368e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003692:	e00e      	b.n	80036b2 <__swhatbuf_r+0x42>
 8003694:	466a      	mov	r2, sp
 8003696:	f000 fc95 	bl	8003fc4 <_fstat_r>
 800369a:	2800      	cmp	r0, #0
 800369c:	dbf1      	blt.n	8003682 <__swhatbuf_r+0x12>
 800369e:	9a01      	ldr	r2, [sp, #4]
 80036a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036a8:	425a      	negs	r2, r3
 80036aa:	415a      	adcs	r2, r3
 80036ac:	602a      	str	r2, [r5, #0]
 80036ae:	e7ee      	b.n	800368e <__swhatbuf_r+0x1e>
 80036b0:	2340      	movs	r3, #64	; 0x40
 80036b2:	2000      	movs	r0, #0
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	b016      	add	sp, #88	; 0x58
 80036b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080036bc <__smakebuf_r>:
 80036bc:	898b      	ldrh	r3, [r1, #12]
 80036be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036c0:	079d      	lsls	r5, r3, #30
 80036c2:	4606      	mov	r6, r0
 80036c4:	460c      	mov	r4, r1
 80036c6:	d507      	bpl.n	80036d8 <__smakebuf_r+0x1c>
 80036c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036cc:	6023      	str	r3, [r4, #0]
 80036ce:	6123      	str	r3, [r4, #16]
 80036d0:	2301      	movs	r3, #1
 80036d2:	6163      	str	r3, [r4, #20]
 80036d4:	b002      	add	sp, #8
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	ab01      	add	r3, sp, #4
 80036da:	466a      	mov	r2, sp
 80036dc:	f7ff ffc8 	bl	8003670 <__swhatbuf_r>
 80036e0:	9900      	ldr	r1, [sp, #0]
 80036e2:	4605      	mov	r5, r0
 80036e4:	4630      	mov	r0, r6
 80036e6:	f000 f895 	bl	8003814 <_malloc_r>
 80036ea:	b948      	cbnz	r0, 8003700 <__smakebuf_r+0x44>
 80036ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036f0:	059a      	lsls	r2, r3, #22
 80036f2:	d4ef      	bmi.n	80036d4 <__smakebuf_r+0x18>
 80036f4:	f023 0303 	bic.w	r3, r3, #3
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	81a3      	strh	r3, [r4, #12]
 80036fe:	e7e3      	b.n	80036c8 <__smakebuf_r+0xc>
 8003700:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <__smakebuf_r+0x7c>)
 8003702:	62b3      	str	r3, [r6, #40]	; 0x28
 8003704:	89a3      	ldrh	r3, [r4, #12]
 8003706:	6020      	str	r0, [r4, #0]
 8003708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370c:	81a3      	strh	r3, [r4, #12]
 800370e:	9b00      	ldr	r3, [sp, #0]
 8003710:	6163      	str	r3, [r4, #20]
 8003712:	9b01      	ldr	r3, [sp, #4]
 8003714:	6120      	str	r0, [r4, #16]
 8003716:	b15b      	cbz	r3, 8003730 <__smakebuf_r+0x74>
 8003718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800371c:	4630      	mov	r0, r6
 800371e:	f000 fc63 	bl	8003fe8 <_isatty_r>
 8003722:	b128      	cbz	r0, 8003730 <__smakebuf_r+0x74>
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	81a3      	strh	r3, [r4, #12]
 8003730:	89a0      	ldrh	r0, [r4, #12]
 8003732:	4305      	orrs	r5, r0
 8003734:	81a5      	strh	r5, [r4, #12]
 8003736:	e7cd      	b.n	80036d4 <__smakebuf_r+0x18>
 8003738:	080034c9 	.word	0x080034c9

0800373c <_free_r>:
 800373c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800373e:	2900      	cmp	r1, #0
 8003740:	d044      	beq.n	80037cc <_free_r+0x90>
 8003742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003746:	9001      	str	r0, [sp, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f1a1 0404 	sub.w	r4, r1, #4
 800374e:	bfb8      	it	lt
 8003750:	18e4      	addlt	r4, r4, r3
 8003752:	f000 fc6b 	bl	800402c <__malloc_lock>
 8003756:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <_free_r+0x94>)
 8003758:	9801      	ldr	r0, [sp, #4]
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	b933      	cbnz	r3, 800376c <_free_r+0x30>
 800375e:	6063      	str	r3, [r4, #4]
 8003760:	6014      	str	r4, [r2, #0]
 8003762:	b003      	add	sp, #12
 8003764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003768:	f000 bc66 	b.w	8004038 <__malloc_unlock>
 800376c:	42a3      	cmp	r3, r4
 800376e:	d908      	bls.n	8003782 <_free_r+0x46>
 8003770:	6825      	ldr	r5, [r4, #0]
 8003772:	1961      	adds	r1, r4, r5
 8003774:	428b      	cmp	r3, r1
 8003776:	bf01      	itttt	eq
 8003778:	6819      	ldreq	r1, [r3, #0]
 800377a:	685b      	ldreq	r3, [r3, #4]
 800377c:	1949      	addeq	r1, r1, r5
 800377e:	6021      	streq	r1, [r4, #0]
 8003780:	e7ed      	b.n	800375e <_free_r+0x22>
 8003782:	461a      	mov	r2, r3
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	b10b      	cbz	r3, 800378c <_free_r+0x50>
 8003788:	42a3      	cmp	r3, r4
 800378a:	d9fa      	bls.n	8003782 <_free_r+0x46>
 800378c:	6811      	ldr	r1, [r2, #0]
 800378e:	1855      	adds	r5, r2, r1
 8003790:	42a5      	cmp	r5, r4
 8003792:	d10b      	bne.n	80037ac <_free_r+0x70>
 8003794:	6824      	ldr	r4, [r4, #0]
 8003796:	4421      	add	r1, r4
 8003798:	1854      	adds	r4, r2, r1
 800379a:	42a3      	cmp	r3, r4
 800379c:	6011      	str	r1, [r2, #0]
 800379e:	d1e0      	bne.n	8003762 <_free_r+0x26>
 80037a0:	681c      	ldr	r4, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	6053      	str	r3, [r2, #4]
 80037a6:	4421      	add	r1, r4
 80037a8:	6011      	str	r1, [r2, #0]
 80037aa:	e7da      	b.n	8003762 <_free_r+0x26>
 80037ac:	d902      	bls.n	80037b4 <_free_r+0x78>
 80037ae:	230c      	movs	r3, #12
 80037b0:	6003      	str	r3, [r0, #0]
 80037b2:	e7d6      	b.n	8003762 <_free_r+0x26>
 80037b4:	6825      	ldr	r5, [r4, #0]
 80037b6:	1961      	adds	r1, r4, r5
 80037b8:	428b      	cmp	r3, r1
 80037ba:	bf04      	itt	eq
 80037bc:	6819      	ldreq	r1, [r3, #0]
 80037be:	685b      	ldreq	r3, [r3, #4]
 80037c0:	6063      	str	r3, [r4, #4]
 80037c2:	bf04      	itt	eq
 80037c4:	1949      	addeq	r1, r1, r5
 80037c6:	6021      	streq	r1, [r4, #0]
 80037c8:	6054      	str	r4, [r2, #4]
 80037ca:	e7ca      	b.n	8003762 <_free_r+0x26>
 80037cc:	b003      	add	sp, #12
 80037ce:	bd30      	pop	{r4, r5, pc}
 80037d0:	20004098 	.word	0x20004098

080037d4 <sbrk_aligned>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4e0e      	ldr	r6, [pc, #56]	; (8003810 <sbrk_aligned+0x3c>)
 80037d8:	460c      	mov	r4, r1
 80037da:	6831      	ldr	r1, [r6, #0]
 80037dc:	4605      	mov	r5, r0
 80037de:	b911      	cbnz	r1, 80037e6 <sbrk_aligned+0x12>
 80037e0:	f000 fb7a 	bl	8003ed8 <_sbrk_r>
 80037e4:	6030      	str	r0, [r6, #0]
 80037e6:	4621      	mov	r1, r4
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 fb75 	bl	8003ed8 <_sbrk_r>
 80037ee:	1c43      	adds	r3, r0, #1
 80037f0:	d00a      	beq.n	8003808 <sbrk_aligned+0x34>
 80037f2:	1cc4      	adds	r4, r0, #3
 80037f4:	f024 0403 	bic.w	r4, r4, #3
 80037f8:	42a0      	cmp	r0, r4
 80037fa:	d007      	beq.n	800380c <sbrk_aligned+0x38>
 80037fc:	1a21      	subs	r1, r4, r0
 80037fe:	4628      	mov	r0, r5
 8003800:	f000 fb6a 	bl	8003ed8 <_sbrk_r>
 8003804:	3001      	adds	r0, #1
 8003806:	d101      	bne.n	800380c <sbrk_aligned+0x38>
 8003808:	f04f 34ff 	mov.w	r4, #4294967295
 800380c:	4620      	mov	r0, r4
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	2000409c 	.word	0x2000409c

08003814 <_malloc_r>:
 8003814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003818:	1ccd      	adds	r5, r1, #3
 800381a:	f025 0503 	bic.w	r5, r5, #3
 800381e:	3508      	adds	r5, #8
 8003820:	2d0c      	cmp	r5, #12
 8003822:	bf38      	it	cc
 8003824:	250c      	movcc	r5, #12
 8003826:	2d00      	cmp	r5, #0
 8003828:	4607      	mov	r7, r0
 800382a:	db01      	blt.n	8003830 <_malloc_r+0x1c>
 800382c:	42a9      	cmp	r1, r5
 800382e:	d905      	bls.n	800383c <_malloc_r+0x28>
 8003830:	230c      	movs	r3, #12
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	2600      	movs	r6, #0
 8003836:	4630      	mov	r0, r6
 8003838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800383c:	4e2e      	ldr	r6, [pc, #184]	; (80038f8 <_malloc_r+0xe4>)
 800383e:	f000 fbf5 	bl	800402c <__malloc_lock>
 8003842:	6833      	ldr	r3, [r6, #0]
 8003844:	461c      	mov	r4, r3
 8003846:	bb34      	cbnz	r4, 8003896 <_malloc_r+0x82>
 8003848:	4629      	mov	r1, r5
 800384a:	4638      	mov	r0, r7
 800384c:	f7ff ffc2 	bl	80037d4 <sbrk_aligned>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	4604      	mov	r4, r0
 8003854:	d14d      	bne.n	80038f2 <_malloc_r+0xde>
 8003856:	6834      	ldr	r4, [r6, #0]
 8003858:	4626      	mov	r6, r4
 800385a:	2e00      	cmp	r6, #0
 800385c:	d140      	bne.n	80038e0 <_malloc_r+0xcc>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	4631      	mov	r1, r6
 8003862:	4638      	mov	r0, r7
 8003864:	eb04 0803 	add.w	r8, r4, r3
 8003868:	f000 fb36 	bl	8003ed8 <_sbrk_r>
 800386c:	4580      	cmp	r8, r0
 800386e:	d13a      	bne.n	80038e6 <_malloc_r+0xd2>
 8003870:	6821      	ldr	r1, [r4, #0]
 8003872:	3503      	adds	r5, #3
 8003874:	1a6d      	subs	r5, r5, r1
 8003876:	f025 0503 	bic.w	r5, r5, #3
 800387a:	3508      	adds	r5, #8
 800387c:	2d0c      	cmp	r5, #12
 800387e:	bf38      	it	cc
 8003880:	250c      	movcc	r5, #12
 8003882:	4629      	mov	r1, r5
 8003884:	4638      	mov	r0, r7
 8003886:	f7ff ffa5 	bl	80037d4 <sbrk_aligned>
 800388a:	3001      	adds	r0, #1
 800388c:	d02b      	beq.n	80038e6 <_malloc_r+0xd2>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	442b      	add	r3, r5
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	e00e      	b.n	80038b4 <_malloc_r+0xa0>
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	1b52      	subs	r2, r2, r5
 800389a:	d41e      	bmi.n	80038da <_malloc_r+0xc6>
 800389c:	2a0b      	cmp	r2, #11
 800389e:	d916      	bls.n	80038ce <_malloc_r+0xba>
 80038a0:	1961      	adds	r1, r4, r5
 80038a2:	42a3      	cmp	r3, r4
 80038a4:	6025      	str	r5, [r4, #0]
 80038a6:	bf18      	it	ne
 80038a8:	6059      	strne	r1, [r3, #4]
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	bf08      	it	eq
 80038ae:	6031      	streq	r1, [r6, #0]
 80038b0:	5162      	str	r2, [r4, r5]
 80038b2:	604b      	str	r3, [r1, #4]
 80038b4:	4638      	mov	r0, r7
 80038b6:	f104 060b 	add.w	r6, r4, #11
 80038ba:	f000 fbbd 	bl	8004038 <__malloc_unlock>
 80038be:	f026 0607 	bic.w	r6, r6, #7
 80038c2:	1d23      	adds	r3, r4, #4
 80038c4:	1af2      	subs	r2, r6, r3
 80038c6:	d0b6      	beq.n	8003836 <_malloc_r+0x22>
 80038c8:	1b9b      	subs	r3, r3, r6
 80038ca:	50a3      	str	r3, [r4, r2]
 80038cc:	e7b3      	b.n	8003836 <_malloc_r+0x22>
 80038ce:	6862      	ldr	r2, [r4, #4]
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	bf0c      	ite	eq
 80038d4:	6032      	streq	r2, [r6, #0]
 80038d6:	605a      	strne	r2, [r3, #4]
 80038d8:	e7ec      	b.n	80038b4 <_malloc_r+0xa0>
 80038da:	4623      	mov	r3, r4
 80038dc:	6864      	ldr	r4, [r4, #4]
 80038de:	e7b2      	b.n	8003846 <_malloc_r+0x32>
 80038e0:	4634      	mov	r4, r6
 80038e2:	6876      	ldr	r6, [r6, #4]
 80038e4:	e7b9      	b.n	800385a <_malloc_r+0x46>
 80038e6:	230c      	movs	r3, #12
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	4638      	mov	r0, r7
 80038ec:	f000 fba4 	bl	8004038 <__malloc_unlock>
 80038f0:	e7a1      	b.n	8003836 <_malloc_r+0x22>
 80038f2:	6025      	str	r5, [r4, #0]
 80038f4:	e7de      	b.n	80038b4 <_malloc_r+0xa0>
 80038f6:	bf00      	nop
 80038f8:	20004098 	.word	0x20004098

080038fc <__sfputc_r>:
 80038fc:	6893      	ldr	r3, [r2, #8]
 80038fe:	3b01      	subs	r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	b410      	push	{r4}
 8003904:	6093      	str	r3, [r2, #8]
 8003906:	da08      	bge.n	800391a <__sfputc_r+0x1e>
 8003908:	6994      	ldr	r4, [r2, #24]
 800390a:	42a3      	cmp	r3, r4
 800390c:	db01      	blt.n	8003912 <__sfputc_r+0x16>
 800390e:	290a      	cmp	r1, #10
 8003910:	d103      	bne.n	800391a <__sfputc_r+0x1e>
 8003912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003916:	f7ff bc31 	b.w	800317c <__swbuf_r>
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	1c58      	adds	r0, r3, #1
 800391e:	6010      	str	r0, [r2, #0]
 8003920:	7019      	strb	r1, [r3, #0]
 8003922:	4608      	mov	r0, r1
 8003924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003928:	4770      	bx	lr

0800392a <__sfputs_r>:
 800392a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392c:	4606      	mov	r6, r0
 800392e:	460f      	mov	r7, r1
 8003930:	4614      	mov	r4, r2
 8003932:	18d5      	adds	r5, r2, r3
 8003934:	42ac      	cmp	r4, r5
 8003936:	d101      	bne.n	800393c <__sfputs_r+0x12>
 8003938:	2000      	movs	r0, #0
 800393a:	e007      	b.n	800394c <__sfputs_r+0x22>
 800393c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003940:	463a      	mov	r2, r7
 8003942:	4630      	mov	r0, r6
 8003944:	f7ff ffda 	bl	80038fc <__sfputc_r>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	d1f3      	bne.n	8003934 <__sfputs_r+0xa>
 800394c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003950 <_vfiprintf_r>:
 8003950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003954:	460d      	mov	r5, r1
 8003956:	b09d      	sub	sp, #116	; 0x74
 8003958:	4614      	mov	r4, r2
 800395a:	4698      	mov	r8, r3
 800395c:	4606      	mov	r6, r0
 800395e:	b118      	cbz	r0, 8003968 <_vfiprintf_r+0x18>
 8003960:	6983      	ldr	r3, [r0, #24]
 8003962:	b90b      	cbnz	r3, 8003968 <_vfiprintf_r+0x18>
 8003964:	f7ff fde4 	bl	8003530 <__sinit>
 8003968:	4b89      	ldr	r3, [pc, #548]	; (8003b90 <_vfiprintf_r+0x240>)
 800396a:	429d      	cmp	r5, r3
 800396c:	d11b      	bne.n	80039a6 <_vfiprintf_r+0x56>
 800396e:	6875      	ldr	r5, [r6, #4]
 8003970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003972:	07d9      	lsls	r1, r3, #31
 8003974:	d405      	bmi.n	8003982 <_vfiprintf_r+0x32>
 8003976:	89ab      	ldrh	r3, [r5, #12]
 8003978:	059a      	lsls	r2, r3, #22
 800397a:	d402      	bmi.n	8003982 <_vfiprintf_r+0x32>
 800397c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800397e:	f7ff fe75 	bl	800366c <__retarget_lock_acquire_recursive>
 8003982:	89ab      	ldrh	r3, [r5, #12]
 8003984:	071b      	lsls	r3, r3, #28
 8003986:	d501      	bpl.n	800398c <_vfiprintf_r+0x3c>
 8003988:	692b      	ldr	r3, [r5, #16]
 800398a:	b9eb      	cbnz	r3, 80039c8 <_vfiprintf_r+0x78>
 800398c:	4629      	mov	r1, r5
 800398e:	4630      	mov	r0, r6
 8003990:	f7ff fc46 	bl	8003220 <__swsetup_r>
 8003994:	b1c0      	cbz	r0, 80039c8 <_vfiprintf_r+0x78>
 8003996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003998:	07dc      	lsls	r4, r3, #31
 800399a:	d50e      	bpl.n	80039ba <_vfiprintf_r+0x6a>
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	b01d      	add	sp, #116	; 0x74
 80039a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a6:	4b7b      	ldr	r3, [pc, #492]	; (8003b94 <_vfiprintf_r+0x244>)
 80039a8:	429d      	cmp	r5, r3
 80039aa:	d101      	bne.n	80039b0 <_vfiprintf_r+0x60>
 80039ac:	68b5      	ldr	r5, [r6, #8]
 80039ae:	e7df      	b.n	8003970 <_vfiprintf_r+0x20>
 80039b0:	4b79      	ldr	r3, [pc, #484]	; (8003b98 <_vfiprintf_r+0x248>)
 80039b2:	429d      	cmp	r5, r3
 80039b4:	bf08      	it	eq
 80039b6:	68f5      	ldreq	r5, [r6, #12]
 80039b8:	e7da      	b.n	8003970 <_vfiprintf_r+0x20>
 80039ba:	89ab      	ldrh	r3, [r5, #12]
 80039bc:	0598      	lsls	r0, r3, #22
 80039be:	d4ed      	bmi.n	800399c <_vfiprintf_r+0x4c>
 80039c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039c2:	f7ff fe54 	bl	800366e <__retarget_lock_release_recursive>
 80039c6:	e7e9      	b.n	800399c <_vfiprintf_r+0x4c>
 80039c8:	2300      	movs	r3, #0
 80039ca:	9309      	str	r3, [sp, #36]	; 0x24
 80039cc:	2320      	movs	r3, #32
 80039ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80039d6:	2330      	movs	r3, #48	; 0x30
 80039d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b9c <_vfiprintf_r+0x24c>
 80039dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039e0:	f04f 0901 	mov.w	r9, #1
 80039e4:	4623      	mov	r3, r4
 80039e6:	469a      	mov	sl, r3
 80039e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039ec:	b10a      	cbz	r2, 80039f2 <_vfiprintf_r+0xa2>
 80039ee:	2a25      	cmp	r2, #37	; 0x25
 80039f0:	d1f9      	bne.n	80039e6 <_vfiprintf_r+0x96>
 80039f2:	ebba 0b04 	subs.w	fp, sl, r4
 80039f6:	d00b      	beq.n	8003a10 <_vfiprintf_r+0xc0>
 80039f8:	465b      	mov	r3, fp
 80039fa:	4622      	mov	r2, r4
 80039fc:	4629      	mov	r1, r5
 80039fe:	4630      	mov	r0, r6
 8003a00:	f7ff ff93 	bl	800392a <__sfputs_r>
 8003a04:	3001      	adds	r0, #1
 8003a06:	f000 80aa 	beq.w	8003b5e <_vfiprintf_r+0x20e>
 8003a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a0c:	445a      	add	r2, fp
 8003a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8003a10:	f89a 3000 	ldrb.w	r3, [sl]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a2 	beq.w	8003b5e <_vfiprintf_r+0x20e>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a24:	f10a 0a01 	add.w	sl, sl, #1
 8003a28:	9304      	str	r3, [sp, #16]
 8003a2a:	9307      	str	r3, [sp, #28]
 8003a2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a30:	931a      	str	r3, [sp, #104]	; 0x68
 8003a32:	4654      	mov	r4, sl
 8003a34:	2205      	movs	r2, #5
 8003a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a3a:	4858      	ldr	r0, [pc, #352]	; (8003b9c <_vfiprintf_r+0x24c>)
 8003a3c:	f7fc fbd0 	bl	80001e0 <memchr>
 8003a40:	9a04      	ldr	r2, [sp, #16]
 8003a42:	b9d8      	cbnz	r0, 8003a7c <_vfiprintf_r+0x12c>
 8003a44:	06d1      	lsls	r1, r2, #27
 8003a46:	bf44      	itt	mi
 8003a48:	2320      	movmi	r3, #32
 8003a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a4e:	0713      	lsls	r3, r2, #28
 8003a50:	bf44      	itt	mi
 8003a52:	232b      	movmi	r3, #43	; 0x2b
 8003a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a58:	f89a 3000 	ldrb.w	r3, [sl]
 8003a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a5e:	d015      	beq.n	8003a8c <_vfiprintf_r+0x13c>
 8003a60:	9a07      	ldr	r2, [sp, #28]
 8003a62:	4654      	mov	r4, sl
 8003a64:	2000      	movs	r0, #0
 8003a66:	f04f 0c0a 	mov.w	ip, #10
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a70:	3b30      	subs	r3, #48	; 0x30
 8003a72:	2b09      	cmp	r3, #9
 8003a74:	d94e      	bls.n	8003b14 <_vfiprintf_r+0x1c4>
 8003a76:	b1b0      	cbz	r0, 8003aa6 <_vfiprintf_r+0x156>
 8003a78:	9207      	str	r2, [sp, #28]
 8003a7a:	e014      	b.n	8003aa6 <_vfiprintf_r+0x156>
 8003a7c:	eba0 0308 	sub.w	r3, r0, r8
 8003a80:	fa09 f303 	lsl.w	r3, r9, r3
 8003a84:	4313      	orrs	r3, r2
 8003a86:	9304      	str	r3, [sp, #16]
 8003a88:	46a2      	mov	sl, r4
 8003a8a:	e7d2      	b.n	8003a32 <_vfiprintf_r+0xe2>
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	1d19      	adds	r1, r3, #4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	9103      	str	r1, [sp, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bfbb      	ittet	lt
 8003a98:	425b      	neglt	r3, r3
 8003a9a:	f042 0202 	orrlt.w	r2, r2, #2
 8003a9e:	9307      	strge	r3, [sp, #28]
 8003aa0:	9307      	strlt	r3, [sp, #28]
 8003aa2:	bfb8      	it	lt
 8003aa4:	9204      	strlt	r2, [sp, #16]
 8003aa6:	7823      	ldrb	r3, [r4, #0]
 8003aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8003aaa:	d10c      	bne.n	8003ac6 <_vfiprintf_r+0x176>
 8003aac:	7863      	ldrb	r3, [r4, #1]
 8003aae:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab0:	d135      	bne.n	8003b1e <_vfiprintf_r+0x1ce>
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	1d1a      	adds	r2, r3, #4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	9203      	str	r2, [sp, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bfb8      	it	lt
 8003abe:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ac2:	3402      	adds	r4, #2
 8003ac4:	9305      	str	r3, [sp, #20]
 8003ac6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003bac <_vfiprintf_r+0x25c>
 8003aca:	7821      	ldrb	r1, [r4, #0]
 8003acc:	2203      	movs	r2, #3
 8003ace:	4650      	mov	r0, sl
 8003ad0:	f7fc fb86 	bl	80001e0 <memchr>
 8003ad4:	b140      	cbz	r0, 8003ae8 <_vfiprintf_r+0x198>
 8003ad6:	2340      	movs	r3, #64	; 0x40
 8003ad8:	eba0 000a 	sub.w	r0, r0, sl
 8003adc:	fa03 f000 	lsl.w	r0, r3, r0
 8003ae0:	9b04      	ldr	r3, [sp, #16]
 8003ae2:	4303      	orrs	r3, r0
 8003ae4:	3401      	adds	r4, #1
 8003ae6:	9304      	str	r3, [sp, #16]
 8003ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aec:	482c      	ldr	r0, [pc, #176]	; (8003ba0 <_vfiprintf_r+0x250>)
 8003aee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003af2:	2206      	movs	r2, #6
 8003af4:	f7fc fb74 	bl	80001e0 <memchr>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d03f      	beq.n	8003b7c <_vfiprintf_r+0x22c>
 8003afc:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <_vfiprintf_r+0x254>)
 8003afe:	bb1b      	cbnz	r3, 8003b48 <_vfiprintf_r+0x1f8>
 8003b00:	9b03      	ldr	r3, [sp, #12]
 8003b02:	3307      	adds	r3, #7
 8003b04:	f023 0307 	bic.w	r3, r3, #7
 8003b08:	3308      	adds	r3, #8
 8003b0a:	9303      	str	r3, [sp, #12]
 8003b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b0e:	443b      	add	r3, r7
 8003b10:	9309      	str	r3, [sp, #36]	; 0x24
 8003b12:	e767      	b.n	80039e4 <_vfiprintf_r+0x94>
 8003b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b18:	460c      	mov	r4, r1
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	e7a5      	b.n	8003a6a <_vfiprintf_r+0x11a>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	3401      	adds	r4, #1
 8003b22:	9305      	str	r3, [sp, #20]
 8003b24:	4619      	mov	r1, r3
 8003b26:	f04f 0c0a 	mov.w	ip, #10
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b30:	3a30      	subs	r2, #48	; 0x30
 8003b32:	2a09      	cmp	r2, #9
 8003b34:	d903      	bls.n	8003b3e <_vfiprintf_r+0x1ee>
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0c5      	beq.n	8003ac6 <_vfiprintf_r+0x176>
 8003b3a:	9105      	str	r1, [sp, #20]
 8003b3c:	e7c3      	b.n	8003ac6 <_vfiprintf_r+0x176>
 8003b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b42:	4604      	mov	r4, r0
 8003b44:	2301      	movs	r3, #1
 8003b46:	e7f0      	b.n	8003b2a <_vfiprintf_r+0x1da>
 8003b48:	ab03      	add	r3, sp, #12
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <_vfiprintf_r+0x258>)
 8003b50:	a904      	add	r1, sp, #16
 8003b52:	4630      	mov	r0, r6
 8003b54:	f3af 8000 	nop.w
 8003b58:	4607      	mov	r7, r0
 8003b5a:	1c78      	adds	r0, r7, #1
 8003b5c:	d1d6      	bne.n	8003b0c <_vfiprintf_r+0x1bc>
 8003b5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b60:	07d9      	lsls	r1, r3, #31
 8003b62:	d405      	bmi.n	8003b70 <_vfiprintf_r+0x220>
 8003b64:	89ab      	ldrh	r3, [r5, #12]
 8003b66:	059a      	lsls	r2, r3, #22
 8003b68:	d402      	bmi.n	8003b70 <_vfiprintf_r+0x220>
 8003b6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b6c:	f7ff fd7f 	bl	800366e <__retarget_lock_release_recursive>
 8003b70:	89ab      	ldrh	r3, [r5, #12]
 8003b72:	065b      	lsls	r3, r3, #25
 8003b74:	f53f af12 	bmi.w	800399c <_vfiprintf_r+0x4c>
 8003b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b7a:	e711      	b.n	80039a0 <_vfiprintf_r+0x50>
 8003b7c:	ab03      	add	r3, sp, #12
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	462a      	mov	r2, r5
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <_vfiprintf_r+0x258>)
 8003b84:	a904      	add	r1, sp, #16
 8003b86:	4630      	mov	r0, r6
 8003b88:	f000 f880 	bl	8003c8c <_printf_i>
 8003b8c:	e7e4      	b.n	8003b58 <_vfiprintf_r+0x208>
 8003b8e:	bf00      	nop
 8003b90:	08004150 	.word	0x08004150
 8003b94:	08004170 	.word	0x08004170
 8003b98:	08004130 	.word	0x08004130
 8003b9c:	08004190 	.word	0x08004190
 8003ba0:	0800419a 	.word	0x0800419a
 8003ba4:	00000000 	.word	0x00000000
 8003ba8:	0800392b 	.word	0x0800392b
 8003bac:	08004196 	.word	0x08004196

08003bb0 <_printf_common>:
 8003bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb4:	4616      	mov	r6, r2
 8003bb6:	4699      	mov	r9, r3
 8003bb8:	688a      	ldr	r2, [r1, #8]
 8003bba:	690b      	ldr	r3, [r1, #16]
 8003bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	bfb8      	it	lt
 8003bc4:	4613      	movlt	r3, r2
 8003bc6:	6033      	str	r3, [r6, #0]
 8003bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bcc:	4607      	mov	r7, r0
 8003bce:	460c      	mov	r4, r1
 8003bd0:	b10a      	cbz	r2, 8003bd6 <_printf_common+0x26>
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	6033      	str	r3, [r6, #0]
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	0699      	lsls	r1, r3, #26
 8003bda:	bf42      	ittt	mi
 8003bdc:	6833      	ldrmi	r3, [r6, #0]
 8003bde:	3302      	addmi	r3, #2
 8003be0:	6033      	strmi	r3, [r6, #0]
 8003be2:	6825      	ldr	r5, [r4, #0]
 8003be4:	f015 0506 	ands.w	r5, r5, #6
 8003be8:	d106      	bne.n	8003bf8 <_printf_common+0x48>
 8003bea:	f104 0a19 	add.w	sl, r4, #25
 8003bee:	68e3      	ldr	r3, [r4, #12]
 8003bf0:	6832      	ldr	r2, [r6, #0]
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	42ab      	cmp	r3, r5
 8003bf6:	dc26      	bgt.n	8003c46 <_printf_common+0x96>
 8003bf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bfc:	1e13      	subs	r3, r2, #0
 8003bfe:	6822      	ldr	r2, [r4, #0]
 8003c00:	bf18      	it	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	0692      	lsls	r2, r2, #26
 8003c06:	d42b      	bmi.n	8003c60 <_printf_common+0xb0>
 8003c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c0c:	4649      	mov	r1, r9
 8003c0e:	4638      	mov	r0, r7
 8003c10:	47c0      	blx	r8
 8003c12:	3001      	adds	r0, #1
 8003c14:	d01e      	beq.n	8003c54 <_printf_common+0xa4>
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	68e5      	ldr	r5, [r4, #12]
 8003c1a:	6832      	ldr	r2, [r6, #0]
 8003c1c:	f003 0306 	and.w	r3, r3, #6
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	bf08      	it	eq
 8003c24:	1aad      	subeq	r5, r5, r2
 8003c26:	68a3      	ldr	r3, [r4, #8]
 8003c28:	6922      	ldr	r2, [r4, #16]
 8003c2a:	bf0c      	ite	eq
 8003c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c30:	2500      	movne	r5, #0
 8003c32:	4293      	cmp	r3, r2
 8003c34:	bfc4      	itt	gt
 8003c36:	1a9b      	subgt	r3, r3, r2
 8003c38:	18ed      	addgt	r5, r5, r3
 8003c3a:	2600      	movs	r6, #0
 8003c3c:	341a      	adds	r4, #26
 8003c3e:	42b5      	cmp	r5, r6
 8003c40:	d11a      	bne.n	8003c78 <_printf_common+0xc8>
 8003c42:	2000      	movs	r0, #0
 8003c44:	e008      	b.n	8003c58 <_printf_common+0xa8>
 8003c46:	2301      	movs	r3, #1
 8003c48:	4652      	mov	r2, sl
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	47c0      	blx	r8
 8003c50:	3001      	adds	r0, #1
 8003c52:	d103      	bne.n	8003c5c <_printf_common+0xac>
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c5c:	3501      	adds	r5, #1
 8003c5e:	e7c6      	b.n	8003bee <_printf_common+0x3e>
 8003c60:	18e1      	adds	r1, r4, r3
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	2030      	movs	r0, #48	; 0x30
 8003c66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c6a:	4422      	add	r2, r4
 8003c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c74:	3302      	adds	r3, #2
 8003c76:	e7c7      	b.n	8003c08 <_printf_common+0x58>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	4622      	mov	r2, r4
 8003c7c:	4649      	mov	r1, r9
 8003c7e:	4638      	mov	r0, r7
 8003c80:	47c0      	blx	r8
 8003c82:	3001      	adds	r0, #1
 8003c84:	d0e6      	beq.n	8003c54 <_printf_common+0xa4>
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7d9      	b.n	8003c3e <_printf_common+0x8e>
	...

08003c8c <_printf_i>:
 8003c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c90:	7e0f      	ldrb	r7, [r1, #24]
 8003c92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c94:	2f78      	cmp	r7, #120	; 0x78
 8003c96:	4691      	mov	r9, r2
 8003c98:	4680      	mov	r8, r0
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	469a      	mov	sl, r3
 8003c9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ca2:	d807      	bhi.n	8003cb4 <_printf_i+0x28>
 8003ca4:	2f62      	cmp	r7, #98	; 0x62
 8003ca6:	d80a      	bhi.n	8003cbe <_printf_i+0x32>
 8003ca8:	2f00      	cmp	r7, #0
 8003caa:	f000 80d8 	beq.w	8003e5e <_printf_i+0x1d2>
 8003cae:	2f58      	cmp	r7, #88	; 0x58
 8003cb0:	f000 80a3 	beq.w	8003dfa <_printf_i+0x16e>
 8003cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cbc:	e03a      	b.n	8003d34 <_printf_i+0xa8>
 8003cbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cc2:	2b15      	cmp	r3, #21
 8003cc4:	d8f6      	bhi.n	8003cb4 <_printf_i+0x28>
 8003cc6:	a101      	add	r1, pc, #4	; (adr r1, 8003ccc <_printf_i+0x40>)
 8003cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ccc:	08003d25 	.word	0x08003d25
 8003cd0:	08003d39 	.word	0x08003d39
 8003cd4:	08003cb5 	.word	0x08003cb5
 8003cd8:	08003cb5 	.word	0x08003cb5
 8003cdc:	08003cb5 	.word	0x08003cb5
 8003ce0:	08003cb5 	.word	0x08003cb5
 8003ce4:	08003d39 	.word	0x08003d39
 8003ce8:	08003cb5 	.word	0x08003cb5
 8003cec:	08003cb5 	.word	0x08003cb5
 8003cf0:	08003cb5 	.word	0x08003cb5
 8003cf4:	08003cb5 	.word	0x08003cb5
 8003cf8:	08003e45 	.word	0x08003e45
 8003cfc:	08003d69 	.word	0x08003d69
 8003d00:	08003e27 	.word	0x08003e27
 8003d04:	08003cb5 	.word	0x08003cb5
 8003d08:	08003cb5 	.word	0x08003cb5
 8003d0c:	08003e67 	.word	0x08003e67
 8003d10:	08003cb5 	.word	0x08003cb5
 8003d14:	08003d69 	.word	0x08003d69
 8003d18:	08003cb5 	.word	0x08003cb5
 8003d1c:	08003cb5 	.word	0x08003cb5
 8003d20:	08003e2f 	.word	0x08003e2f
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	1d1a      	adds	r2, r3, #4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	602a      	str	r2, [r5, #0]
 8003d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0a3      	b.n	8003e80 <_printf_i+0x1f4>
 8003d38:	6820      	ldr	r0, [r4, #0]
 8003d3a:	6829      	ldr	r1, [r5, #0]
 8003d3c:	0606      	lsls	r6, r0, #24
 8003d3e:	f101 0304 	add.w	r3, r1, #4
 8003d42:	d50a      	bpl.n	8003d5a <_printf_i+0xce>
 8003d44:	680e      	ldr	r6, [r1, #0]
 8003d46:	602b      	str	r3, [r5, #0]
 8003d48:	2e00      	cmp	r6, #0
 8003d4a:	da03      	bge.n	8003d54 <_printf_i+0xc8>
 8003d4c:	232d      	movs	r3, #45	; 0x2d
 8003d4e:	4276      	negs	r6, r6
 8003d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d54:	485e      	ldr	r0, [pc, #376]	; (8003ed0 <_printf_i+0x244>)
 8003d56:	230a      	movs	r3, #10
 8003d58:	e019      	b.n	8003d8e <_printf_i+0x102>
 8003d5a:	680e      	ldr	r6, [r1, #0]
 8003d5c:	602b      	str	r3, [r5, #0]
 8003d5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d62:	bf18      	it	ne
 8003d64:	b236      	sxthne	r6, r6
 8003d66:	e7ef      	b.n	8003d48 <_printf_i+0xbc>
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	6820      	ldr	r0, [r4, #0]
 8003d6c:	1d19      	adds	r1, r3, #4
 8003d6e:	6029      	str	r1, [r5, #0]
 8003d70:	0601      	lsls	r1, r0, #24
 8003d72:	d501      	bpl.n	8003d78 <_printf_i+0xec>
 8003d74:	681e      	ldr	r6, [r3, #0]
 8003d76:	e002      	b.n	8003d7e <_printf_i+0xf2>
 8003d78:	0646      	lsls	r6, r0, #25
 8003d7a:	d5fb      	bpl.n	8003d74 <_printf_i+0xe8>
 8003d7c:	881e      	ldrh	r6, [r3, #0]
 8003d7e:	4854      	ldr	r0, [pc, #336]	; (8003ed0 <_printf_i+0x244>)
 8003d80:	2f6f      	cmp	r7, #111	; 0x6f
 8003d82:	bf0c      	ite	eq
 8003d84:	2308      	moveq	r3, #8
 8003d86:	230a      	movne	r3, #10
 8003d88:	2100      	movs	r1, #0
 8003d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d8e:	6865      	ldr	r5, [r4, #4]
 8003d90:	60a5      	str	r5, [r4, #8]
 8003d92:	2d00      	cmp	r5, #0
 8003d94:	bfa2      	ittt	ge
 8003d96:	6821      	ldrge	r1, [r4, #0]
 8003d98:	f021 0104 	bicge.w	r1, r1, #4
 8003d9c:	6021      	strge	r1, [r4, #0]
 8003d9e:	b90e      	cbnz	r6, 8003da4 <_printf_i+0x118>
 8003da0:	2d00      	cmp	r5, #0
 8003da2:	d04d      	beq.n	8003e40 <_printf_i+0x1b4>
 8003da4:	4615      	mov	r5, r2
 8003da6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003daa:	fb03 6711 	mls	r7, r3, r1, r6
 8003dae:	5dc7      	ldrb	r7, [r0, r7]
 8003db0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003db4:	4637      	mov	r7, r6
 8003db6:	42bb      	cmp	r3, r7
 8003db8:	460e      	mov	r6, r1
 8003dba:	d9f4      	bls.n	8003da6 <_printf_i+0x11a>
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d10b      	bne.n	8003dd8 <_printf_i+0x14c>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	07de      	lsls	r6, r3, #31
 8003dc4:	d508      	bpl.n	8003dd8 <_printf_i+0x14c>
 8003dc6:	6923      	ldr	r3, [r4, #16]
 8003dc8:	6861      	ldr	r1, [r4, #4]
 8003dca:	4299      	cmp	r1, r3
 8003dcc:	bfde      	ittt	le
 8003dce:	2330      	movle	r3, #48	; 0x30
 8003dd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dd8:	1b52      	subs	r2, r2, r5
 8003dda:	6122      	str	r2, [r4, #16]
 8003ddc:	f8cd a000 	str.w	sl, [sp]
 8003de0:	464b      	mov	r3, r9
 8003de2:	aa03      	add	r2, sp, #12
 8003de4:	4621      	mov	r1, r4
 8003de6:	4640      	mov	r0, r8
 8003de8:	f7ff fee2 	bl	8003bb0 <_printf_common>
 8003dec:	3001      	adds	r0, #1
 8003dee:	d14c      	bne.n	8003e8a <_printf_i+0x1fe>
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295
 8003df4:	b004      	add	sp, #16
 8003df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dfa:	4835      	ldr	r0, [pc, #212]	; (8003ed0 <_printf_i+0x244>)
 8003dfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e00:	6829      	ldr	r1, [r5, #0]
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e08:	6029      	str	r1, [r5, #0]
 8003e0a:	061d      	lsls	r5, r3, #24
 8003e0c:	d514      	bpl.n	8003e38 <_printf_i+0x1ac>
 8003e0e:	07df      	lsls	r7, r3, #31
 8003e10:	bf44      	itt	mi
 8003e12:	f043 0320 	orrmi.w	r3, r3, #32
 8003e16:	6023      	strmi	r3, [r4, #0]
 8003e18:	b91e      	cbnz	r6, 8003e22 <_printf_i+0x196>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	f023 0320 	bic.w	r3, r3, #32
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	2310      	movs	r3, #16
 8003e24:	e7b0      	b.n	8003d88 <_printf_i+0xfc>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	f043 0320 	orr.w	r3, r3, #32
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	2378      	movs	r3, #120	; 0x78
 8003e30:	4828      	ldr	r0, [pc, #160]	; (8003ed4 <_printf_i+0x248>)
 8003e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e36:	e7e3      	b.n	8003e00 <_printf_i+0x174>
 8003e38:	0659      	lsls	r1, r3, #25
 8003e3a:	bf48      	it	mi
 8003e3c:	b2b6      	uxthmi	r6, r6
 8003e3e:	e7e6      	b.n	8003e0e <_printf_i+0x182>
 8003e40:	4615      	mov	r5, r2
 8003e42:	e7bb      	b.n	8003dbc <_printf_i+0x130>
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	6826      	ldr	r6, [r4, #0]
 8003e48:	6961      	ldr	r1, [r4, #20]
 8003e4a:	1d18      	adds	r0, r3, #4
 8003e4c:	6028      	str	r0, [r5, #0]
 8003e4e:	0635      	lsls	r5, r6, #24
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	d501      	bpl.n	8003e58 <_printf_i+0x1cc>
 8003e54:	6019      	str	r1, [r3, #0]
 8003e56:	e002      	b.n	8003e5e <_printf_i+0x1d2>
 8003e58:	0670      	lsls	r0, r6, #25
 8003e5a:	d5fb      	bpl.n	8003e54 <_printf_i+0x1c8>
 8003e5c:	8019      	strh	r1, [r3, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6123      	str	r3, [r4, #16]
 8003e62:	4615      	mov	r5, r2
 8003e64:	e7ba      	b.n	8003ddc <_printf_i+0x150>
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	1d1a      	adds	r2, r3, #4
 8003e6a:	602a      	str	r2, [r5, #0]
 8003e6c:	681d      	ldr	r5, [r3, #0]
 8003e6e:	6862      	ldr	r2, [r4, #4]
 8003e70:	2100      	movs	r1, #0
 8003e72:	4628      	mov	r0, r5
 8003e74:	f7fc f9b4 	bl	80001e0 <memchr>
 8003e78:	b108      	cbz	r0, 8003e7e <_printf_i+0x1f2>
 8003e7a:	1b40      	subs	r0, r0, r5
 8003e7c:	6060      	str	r0, [r4, #4]
 8003e7e:	6863      	ldr	r3, [r4, #4]
 8003e80:	6123      	str	r3, [r4, #16]
 8003e82:	2300      	movs	r3, #0
 8003e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e88:	e7a8      	b.n	8003ddc <_printf_i+0x150>
 8003e8a:	6923      	ldr	r3, [r4, #16]
 8003e8c:	462a      	mov	r2, r5
 8003e8e:	4649      	mov	r1, r9
 8003e90:	4640      	mov	r0, r8
 8003e92:	47d0      	blx	sl
 8003e94:	3001      	adds	r0, #1
 8003e96:	d0ab      	beq.n	8003df0 <_printf_i+0x164>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	079b      	lsls	r3, r3, #30
 8003e9c:	d413      	bmi.n	8003ec6 <_printf_i+0x23a>
 8003e9e:	68e0      	ldr	r0, [r4, #12]
 8003ea0:	9b03      	ldr	r3, [sp, #12]
 8003ea2:	4298      	cmp	r0, r3
 8003ea4:	bfb8      	it	lt
 8003ea6:	4618      	movlt	r0, r3
 8003ea8:	e7a4      	b.n	8003df4 <_printf_i+0x168>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4632      	mov	r2, r6
 8003eae:	4649      	mov	r1, r9
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	47d0      	blx	sl
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d09b      	beq.n	8003df0 <_printf_i+0x164>
 8003eb8:	3501      	adds	r5, #1
 8003eba:	68e3      	ldr	r3, [r4, #12]
 8003ebc:	9903      	ldr	r1, [sp, #12]
 8003ebe:	1a5b      	subs	r3, r3, r1
 8003ec0:	42ab      	cmp	r3, r5
 8003ec2:	dcf2      	bgt.n	8003eaa <_printf_i+0x21e>
 8003ec4:	e7eb      	b.n	8003e9e <_printf_i+0x212>
 8003ec6:	2500      	movs	r5, #0
 8003ec8:	f104 0619 	add.w	r6, r4, #25
 8003ecc:	e7f5      	b.n	8003eba <_printf_i+0x22e>
 8003ece:	bf00      	nop
 8003ed0:	080041a1 	.word	0x080041a1
 8003ed4:	080041b2 	.word	0x080041b2

08003ed8 <_sbrk_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4d06      	ldr	r5, [pc, #24]	; (8003ef4 <_sbrk_r+0x1c>)
 8003edc:	2300      	movs	r3, #0
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	f7fc fdb2 	bl	8000a4c <_sbrk>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d102      	bne.n	8003ef2 <_sbrk_r+0x1a>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	b103      	cbz	r3, 8003ef2 <_sbrk_r+0x1a>
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	200040a0 	.word	0x200040a0

08003ef8 <__sread>:
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	460c      	mov	r4, r1
 8003efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f00:	f000 f8a0 	bl	8004044 <_read_r>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	bfab      	itete	ge
 8003f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f0c:	181b      	addge	r3, r3, r0
 8003f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f12:	bfac      	ite	ge
 8003f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f16:	81a3      	strhlt	r3, [r4, #12]
 8003f18:	bd10      	pop	{r4, pc}

08003f1a <__swrite>:
 8003f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1e:	461f      	mov	r7, r3
 8003f20:	898b      	ldrh	r3, [r1, #12]
 8003f22:	05db      	lsls	r3, r3, #23
 8003f24:	4605      	mov	r5, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	4616      	mov	r6, r2
 8003f2a:	d505      	bpl.n	8003f38 <__swrite+0x1e>
 8003f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f30:	2302      	movs	r3, #2
 8003f32:	2200      	movs	r2, #0
 8003f34:	f000 f868 	bl	8004008 <_lseek_r>
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f42:	81a3      	strh	r3, [r4, #12]
 8003f44:	4632      	mov	r2, r6
 8003f46:	463b      	mov	r3, r7
 8003f48:	4628      	mov	r0, r5
 8003f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4e:	f000 b817 	b.w	8003f80 <_write_r>

08003f52 <__sseek>:
 8003f52:	b510      	push	{r4, lr}
 8003f54:	460c      	mov	r4, r1
 8003f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5a:	f000 f855 	bl	8004008 <_lseek_r>
 8003f5e:	1c43      	adds	r3, r0, #1
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	bf15      	itete	ne
 8003f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f6e:	81a3      	strheq	r3, [r4, #12]
 8003f70:	bf18      	it	ne
 8003f72:	81a3      	strhne	r3, [r4, #12]
 8003f74:	bd10      	pop	{r4, pc}

08003f76 <__sclose>:
 8003f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f7a:	f000 b813 	b.w	8003fa4 <_close_r>
	...

08003f80 <_write_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d07      	ldr	r5, [pc, #28]	; (8003fa0 <_write_r+0x20>)
 8003f84:	4604      	mov	r4, r0
 8003f86:	4608      	mov	r0, r1
 8003f88:	4611      	mov	r1, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f7fc fb39 	bl	8000606 <_write>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_write_r+0x1e>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_write_r+0x1e>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	200040a0 	.word	0x200040a0

08003fa4 <_close_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d06      	ldr	r5, [pc, #24]	; (8003fc0 <_close_r+0x1c>)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	4604      	mov	r4, r0
 8003fac:	4608      	mov	r0, r1
 8003fae:	602b      	str	r3, [r5, #0]
 8003fb0:	f7fc fd17 	bl	80009e2 <_close>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	d102      	bne.n	8003fbe <_close_r+0x1a>
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	b103      	cbz	r3, 8003fbe <_close_r+0x1a>
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
 8003fc0:	200040a0 	.word	0x200040a0

08003fc4 <_fstat_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4d07      	ldr	r5, [pc, #28]	; (8003fe4 <_fstat_r+0x20>)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4604      	mov	r4, r0
 8003fcc:	4608      	mov	r0, r1
 8003fce:	4611      	mov	r1, r2
 8003fd0:	602b      	str	r3, [r5, #0]
 8003fd2:	f7fc fd12 	bl	80009fa <_fstat>
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	d102      	bne.n	8003fe0 <_fstat_r+0x1c>
 8003fda:	682b      	ldr	r3, [r5, #0]
 8003fdc:	b103      	cbz	r3, 8003fe0 <_fstat_r+0x1c>
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	bd38      	pop	{r3, r4, r5, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200040a0 	.word	0x200040a0

08003fe8 <_isatty_r>:
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	4d06      	ldr	r5, [pc, #24]	; (8004004 <_isatty_r+0x1c>)
 8003fec:	2300      	movs	r3, #0
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	602b      	str	r3, [r5, #0]
 8003ff4:	f7fc fd11 	bl	8000a1a <_isatty>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_isatty_r+0x1a>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_isatty_r+0x1a>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	200040a0 	.word	0x200040a0

08004008 <_lseek_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	4d07      	ldr	r5, [pc, #28]	; (8004028 <_lseek_r+0x20>)
 800400c:	4604      	mov	r4, r0
 800400e:	4608      	mov	r0, r1
 8004010:	4611      	mov	r1, r2
 8004012:	2200      	movs	r2, #0
 8004014:	602a      	str	r2, [r5, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	f7fc fd0a 	bl	8000a30 <_lseek>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_lseek_r+0x1e>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_lseek_r+0x1e>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	200040a0 	.word	0x200040a0

0800402c <__malloc_lock>:
 800402c:	4801      	ldr	r0, [pc, #4]	; (8004034 <__malloc_lock+0x8>)
 800402e:	f7ff bb1d 	b.w	800366c <__retarget_lock_acquire_recursive>
 8004032:	bf00      	nop
 8004034:	20004094 	.word	0x20004094

08004038 <__malloc_unlock>:
 8004038:	4801      	ldr	r0, [pc, #4]	; (8004040 <__malloc_unlock+0x8>)
 800403a:	f7ff bb18 	b.w	800366e <__retarget_lock_release_recursive>
 800403e:	bf00      	nop
 8004040:	20004094 	.word	0x20004094

08004044 <_read_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4d07      	ldr	r5, [pc, #28]	; (8004064 <_read_r+0x20>)
 8004048:	4604      	mov	r4, r0
 800404a:	4608      	mov	r0, r1
 800404c:	4611      	mov	r1, r2
 800404e:	2200      	movs	r2, #0
 8004050:	602a      	str	r2, [r5, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	f7fc fca8 	bl	80009a8 <_read>
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	d102      	bne.n	8004062 <_read_r+0x1e>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	b103      	cbz	r3, 8004062 <_read_r+0x1e>
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	bd38      	pop	{r3, r4, r5, pc}
 8004064:	200040a0 	.word	0x200040a0

08004068 <_init>:
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	bf00      	nop
 800406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406e:	bc08      	pop	{r3}
 8004070:	469e      	mov	lr, r3
 8004072:	4770      	bx	lr

08004074 <_fini>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	bf00      	nop
 8004078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407a:	bc08      	pop	{r3}
 800407c:	469e      	mov	lr, r3
 800407e:	4770      	bx	lr
