
RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004c1c  08004c1c  00014c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d88  08004d88  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d90  08004d90  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d94  08004d94  00014d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040d4  20000074  08004e0c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004148  08004e0c  00024148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145eb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce9  00000000  00000000  0003468f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00037378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ccb  00000000  00000000  000394e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ad3  00000000  00000000  000521ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097fcb  00000000  00000000  00064c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fcc49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f6c  00000000  00000000  000fcc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c04 	.word	0x08004c04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004c04 	.word	0x08004c04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000090 	.word	0x20000090
 80005b4:	20000144 	.word	0x20000144

080005b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d013      	beq.n	80005f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00b      	beq.n	80005f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	e000      	b.n	80005e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b086      	sub	sp, #24
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
	int i=0;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e009      	b.n	8000630 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ffc7 	bl	80005b8 <ITM_SendChar>
	for (i=0; i<len; i++)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf1      	blt.n	800061c <_write+0x16>
	return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <send_deftask>:

void send_deftask(void)
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello from Default Task \n";
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <send_deftask+0x28>)
 800064c:	1d3c      	adds	r4, r7, #4
 800064e:	461d      	mov	r5, r3
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000658:	c403      	stmia	r4!, {r0, r1}
 800065a:	8022      	strh	r2, [r4, #0]
	printf(data);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fc64 	bl	8003f2c <iprintf>
	//HAL_UART_Transmit(&huart1, data, sizeof(data), 500);
}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bdb0      	pop	{r4, r5, r7, pc}
 800066c:	08004c38 	.word	0x08004c38

08000670 <send_task2>:

void send_task2(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello from Task 2 \n";
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <send_task2+0x24>)
 8000678:	1d3c      	adds	r4, r7, #4
 800067a:	461d      	mov	r5, r3
 800067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000680:	682b      	ldr	r3, [r5, #0]
 8000682:	6023      	str	r3, [r4, #0]
	printf(data);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fc50 	bl	8003f2c <iprintf>
	//HAL_UART_Transmit(&huart1, data, sizeof(data), 500);
}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bdb0      	pop	{r4, r5, r7, pc}
 8000694:	08004c54 	.word	0x08004c54

08000698 <send_task3>:

void send_task3(void)
{
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello from Task 3 \n";
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <send_task3+0x24>)
 80006a0:	1d3c      	adds	r4, r7, #4
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	682b      	ldr	r3, [r5, #0]
 80006aa:	6023      	str	r3, [r4, #0]
	printf(data);
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fc3c 	bl	8003f2c <iprintf>
	//HAL_UART_Transmit(&huart1, data, sizeof(data), 500);
}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bdb0      	pop	{r4, r5, r7, pc}
 80006bc:	08004c68 	.word	0x08004c68

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b096      	sub	sp, #88	; 0x58
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fb4f 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f84b 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 f901 	bl	80008d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006d2:	f000 f8a5 	bl	8000820 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <main+0x8c>)
 80006d8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006dc:	461d      	mov	r5, r3
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 f800 	bl	80026f6 <osThreadCreate>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a15      	ldr	r2, [pc, #84]	; (8000750 <main+0x90>)
 80006fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_init, osPriorityAboveNormal, 0, 128);
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <main+0x94>)
 80006fe:	f107 0420 	add.w	r4, r7, #32
 8000702:	461d      	mov	r5, r3
 8000704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800070c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f001 ffed 	bl	80026f6 <osThreadCreate>
 800071c:	4603      	mov	r3, r0
 800071e:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <main+0x98>)
 8000720:	6013      	str	r3, [r2, #0]

  osThreadDef(Task3, Task3_init, osPriorityBelowNormal, 0, 128);
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <main+0x9c>)
 8000724:	1d3c      	adds	r4, r7, #4
 8000726:	461d      	mov	r5, r3
 8000728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f001 ffdc 	bl	80026f6 <osThreadCreate>
 800073e:	4603      	mov	r3, r0
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <main+0xa0>)
 8000742:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000744:	f001 ffd0 	bl	80026e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000748:	e7fe      	b.n	8000748 <main+0x88>
 800074a:	bf00      	nop
 800074c:	08004c7c 	.word	0x08004c7c
 8000750:	20000388 	.word	0x20000388
 8000754:	08004c98 	.word	0x08004c98
 8000758:	2000038c 	.word	0x2000038c
 800075c:	08004cb4 	.word	0x08004cb4
 8000760:	20000390 	.word	0x20000390

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fb3d 	bl	8003df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemClock_Config+0xb4>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <SystemClock_Config+0xb4>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemClock_Config+0xb4>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <SystemClock_Config+0xb8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <SystemClock_Config+0xb8>)
 80007ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <SystemClock_Config+0xb8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2310      	movs	r3, #16
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fda3 	bl	8001320 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007e0:	f000 f8f2 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f806 	bl	8001810 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800080a:	f000 f8dd 	bl	80009c8 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	; 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_USART1_UART_Init+0xa4>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <MX_USART1_UART_Init+0xa4>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_USART1_UART_Init+0xa4>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000856:	481c      	ldr	r0, [pc, #112]	; (80008c8 <MX_USART1_UART_Init+0xa8>)
 8000858:	f000 fd2e 	bl	80012b8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PA5 PA6 PA7 */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800085c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000860:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4815      	ldr	r0, [pc, #84]	; (80008c8 <MX_USART1_UART_Init+0xa8>)
 8000874:	f000 fb9c 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_USART1_UART_Init+0xac>)
 800087a:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <MX_USART1_UART_Init+0xb0>)
 800087c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_USART1_UART_Init+0xac>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART1_UART_Init+0xac>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_USART1_UART_Init+0xac>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART1_UART_Init+0xac>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART1_UART_Init+0xac>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART1_UART_Init+0xac>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART1_UART_Init+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4808      	ldr	r0, [pc, #32]	; (80008cc <MX_USART1_UART_Init+0xac>)
 80008ac:	f001 fc42 	bl	8002134 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 80008b6:	f000 f887 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	20000344 	.word	0x20000344
 80008d0:	40011000 	.word	0x40011000

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_GPIO_Init+0x5c>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <MX_GPIO_Init+0x5c>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6313      	str	r3, [r2, #48]	; 0x30
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_GPIO_Init+0x5c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	21e0      	movs	r1, #224	; 0xe0
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <MX_GPIO_Init+0x60>)
 800090a:	f000 fcd5 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800090e:	23e0      	movs	r3, #224	; 0xe0
 8000910:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_GPIO_Init+0x60>)
 8000924:	f000 fb44 	bl	8000fb0 <HAL_GPIO_Init>

}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000

08000938 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000940:	2120      	movs	r1, #32
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <StartDefaultTask+0x20>)
 8000944:	f000 fcd1 	bl	80012ea <HAL_GPIO_TogglePin>
	  send_deftask();
 8000948:	f7ff fe7c 	bl	8000644 <send_deftask>
	  osDelay(1000);
 800094c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000950:	f001 ff1d 	bl	800278e <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000954:	e7f4      	b.n	8000940 <StartDefaultTask+0x8>
 8000956:	bf00      	nop
 8000958:	40020000 	.word	0x40020000

0800095c <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000964:	2140      	movs	r1, #64	; 0x40
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <Task2_init+0x20>)
 8000968:	f000 fcbf 	bl	80012ea <HAL_GPIO_TogglePin>
	  send_task2();
 800096c:	f7ff fe80 	bl	8000670 <send_task2>
	  osDelay(2000);
 8000970:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000974:	f001 ff0b 	bl	800278e <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000978:	e7f4      	b.n	8000964 <Task2_init+0x8>
 800097a:	bf00      	nop
 800097c:	40020000 	.word	0x40020000

08000980 <Task3_init>:
  }
  /* USER CODE END Task2_init */
}

void Task3_init(void const * argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <Task3_init+0x20>)
 800098c:	f000 fcad 	bl	80012ea <HAL_GPIO_TogglePin>
	  send_task3();
 8000990:	f7ff fe82 	bl	8000698 <send_task3>
	  osDelay(3000);
 8000994:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000998:	f001 fef9 	bl	800278e <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800099c:	e7f4      	b.n	8000988 <Task3_init+0x8>
 800099e:	bf00      	nop
 80009a0:	40020000 	.word	0x40020000

080009a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d101      	bne.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b6:	f000 f9f9 	bl	8000dac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40010000 	.word	0x40010000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_MspInit+0x54>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <HAL_MspInit+0x54>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_MspInit+0x54>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_MspInit+0x54>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_MspInit+0x54>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_MspInit+0x54>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	210f      	movs	r1, #15
 8000a16:	f06f 0001 	mvn.w	r0, #1
 8000a1a:	f000 fa9f 	bl	8000f5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12c      	bne.n	8000aa8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_UART_MspInit+0x8c>)
 8000aa4:	f000 fa84 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40011000 	.word	0x40011000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <HAL_InitTick+0xd0>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	4a2d      	ldr	r2, [pc, #180]	; (8000b8c <HAL_InitTick+0xd0>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6453      	str	r3, [r2, #68]	; 0x44
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <HAL_InitTick+0xd0>)
 8000ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae8:	f107 020c 	add.w	r2, r7, #12
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 f86c 	bl	8001bd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000af8:	f001 f856 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 8000afc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b00:	4a23      	ldr	r2, [pc, #140]	; (8000b90 <HAL_InitTick+0xd4>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	0c9b      	lsrs	r3, r3, #18
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b0c:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b0e:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <HAL_InitTick+0xdc>)
 8000b10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b32:	4818      	ldr	r0, [pc, #96]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b34:	f001 f87e 	bl	8001c34 <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d11b      	bne.n	8000b7e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b46:	4813      	ldr	r0, [pc, #76]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b48:	f001 f8ce 	bl	8001ce8 <HAL_TIM_Base_Start_IT>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d111      	bne.n	8000b7e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b5a:	2019      	movs	r0, #25
 8000b5c:	f000 fa1a 	bl	8000f94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b0f      	cmp	r3, #15
 8000b64:	d808      	bhi.n	8000b78 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b66:	2200      	movs	r2, #0
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	2019      	movs	r0, #25
 8000b6c:	f000 f9f6 	bl	8000f5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_InitTick+0xe0>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e002      	b.n	8000b7e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	431bde83 	.word	0x431bde83
 8000b94:	20000394 	.word	0x20000394
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bd2:	f001 f8eb 	bl	8001dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000394 	.word	0x20000394

08000be0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e00a      	b.n	8000c08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bf2:	f3af 8000 	nop.w
 8000bf6:	4601      	mov	r1, r0
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	60ba      	str	r2, [r7, #8]
 8000bfe:	b2ca      	uxtb	r2, r1
 8000c00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbf0      	blt.n	8000bf2 <_read+0x12>
  }

  return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c42:	605a      	str	r2, [r3, #4]
  return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <_isatty>:

int _isatty(int file)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f002 ff7a 	bl	8003bac <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20020000 	.word	0x20020000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	200003dc 	.word	0x200003dc
 8000cec:	20004148 	.word	0x20004148

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d1a:	490e      	ldr	r1, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d30:	4c0b      	ldr	r4, [pc, #44]	; (8000d60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3e:	f7ff ffd7 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d42:	f003 f82f 	bl	8003da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fcbb 	bl	80006c0 <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d58:	08004d98 	.word	0x08004d98
  ldr r2, =_sbss
 8000d5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d60:	20004148 	.word	0x20004148

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <HAL_Init+0x40>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_Init+0x40>)
 8000d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x40>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f8d8 	bl	8000f46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	200f      	movs	r0, #15
 8000d98:	f7ff fe90 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fe1a 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	200003e0 	.word	0x200003e0

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200003e0 	.word	0x200003e0

08000dec <__NVIC_SetPriorityGrouping>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <__NVIC_EnableIRQ+0x38>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff4c 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6e:	f7ff ff61 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000f72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	6978      	ldr	r0, [r7, #20]
 8000f7a:	f7ff ffb1 	bl	8000ee0 <NVIC_EncodePriority>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff80 	bl	8000e8c <__NVIC_SetPriority>
}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff54 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e159      	b.n	8001280 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 8148 	bne.w	800127a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d005      	beq.n	8001002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d130      	bne.n	8001064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	f003 0201 	and.w	r2, r3, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b03      	cmp	r3, #3
 800106e:	d017      	beq.n	80010a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d123      	bne.n	80010f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0203 	and.w	r2, r3, #3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80a2 	beq.w	800127a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b57      	ldr	r3, [pc, #348]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a56      	ldr	r2, [pc, #344]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b54      	ldr	r3, [pc, #336]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001152:	4a52      	ldr	r2, [pc, #328]	; (800129c <HAL_GPIO_Init+0x2ec>)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a49      	ldr	r2, [pc, #292]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0x202>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a48      	ldr	r2, [pc, #288]	; (80012a4 <HAL_GPIO_Init+0x2f4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x1fe>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a47      	ldr	r2, [pc, #284]	; (80012a8 <HAL_GPIO_Init+0x2f8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x1fa>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a46      	ldr	r2, [pc, #280]	; (80012ac <HAL_GPIO_Init+0x2fc>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x1f6>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a45      	ldr	r2, [pc, #276]	; (80012b0 <HAL_GPIO_Init+0x300>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x1f2>
 800119e:	2304      	movs	r3, #4
 80011a0:	e008      	b.n	80011b4 <HAL_GPIO_Init+0x204>
 80011a2:	2307      	movs	r3, #7
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x204>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x204>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x204>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x204>
 80011b2:	2300      	movs	r3, #0
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	f002 0203 	and.w	r2, r2, #3
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4093      	lsls	r3, r2
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c4:	4935      	ldr	r1, [pc, #212]	; (800129c <HAL_GPIO_Init+0x2ec>)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <HAL_GPIO_Init+0x304>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f6:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <HAL_GPIO_Init+0x304>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <HAL_GPIO_Init+0x304>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001220:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <HAL_GPIO_Init+0x304>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <HAL_GPIO_Init+0x304>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124a:	4a1a      	ldr	r2, [pc, #104]	; (80012b4 <HAL_GPIO_Init+0x304>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_GPIO_Init+0x304>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001274:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <HAL_GPIO_Init+0x304>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3301      	adds	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	f67f aea2 	bls.w	8000fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40013800 	.word	0x40013800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40013c00 	.word	0x40013c00

080012b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
 80012c4:	4613      	mov	r3, r2
 80012c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c8:	787b      	ldrb	r3, [r7, #1]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d4:	e003      	b.n	80012de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	041a      	lsls	r2, r3, #16
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	619a      	str	r2, [r3, #24]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012fc:	887a      	ldrh	r2, [r7, #2]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	041a      	lsls	r2, r3, #16
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43d9      	mvns	r1, r3
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	400b      	ands	r3, r1
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e267      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d075      	beq.n	800142a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800133e:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b04      	cmp	r3, #4
 8001348:	d00c      	beq.n	8001364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800134a:	4b85      	ldr	r3, [pc, #532]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001352:	2b08      	cmp	r3, #8
 8001354:	d112      	bne.n	800137c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001356:	4b82      	ldr	r3, [pc, #520]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001362:	d10b      	bne.n	800137c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001364:	4b7e      	ldr	r3, [pc, #504]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d05b      	beq.n	8001428 <HAL_RCC_OscConfig+0x108>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d157      	bne.n	8001428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e242      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001384:	d106      	bne.n	8001394 <HAL_RCC_OscConfig+0x74>
 8001386:	4b76      	ldr	r3, [pc, #472]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a75      	ldr	r2, [pc, #468]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e01d      	b.n	80013d0 <HAL_RCC_OscConfig+0xb0>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x98>
 800139e:	4b70      	ldr	r3, [pc, #448]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a6f      	ldr	r2, [pc, #444]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a6c      	ldr	r2, [pc, #432]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e00b      	b.n	80013d0 <HAL_RCC_OscConfig+0xb0>
 80013b8:	4b69      	ldr	r3, [pc, #420]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a68      	ldr	r2, [pc, #416]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b66      	ldr	r3, [pc, #408]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a65      	ldr	r2, [pc, #404]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fcfc 	bl	8000dd4 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fcf8 	bl	8000dd4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e207      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0xc0>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fce8 	bl	8000dd4 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fce4 	bl	8000dd4 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1f3      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	4b51      	ldr	r3, [pc, #324]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0xe8>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d063      	beq.n	80014fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001436:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800144a:	2b08      	cmp	r3, #8
 800144c:	d11c      	bne.n	8001488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144e:	4b44      	ldr	r3, [pc, #272]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d116      	bne.n	8001488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <HAL_RCC_OscConfig+0x152>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e1c7      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4937      	ldr	r1, [pc, #220]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	e03a      	b.n	80014fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d020      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001490:	4b34      	ldr	r3, [pc, #208]	; (8001564 <HAL_RCC_OscConfig+0x244>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001496:	f7ff fc9d 	bl	8000dd4 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149e:	f7ff fc99 	bl	8000dd4 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e1a8      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4925      	ldr	r1, [pc, #148]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_RCC_OscConfig+0x244>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fc7c 	bl	8000dd4 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e0:	f7ff fc78 	bl	8000dd4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e187      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d036      	beq.n	8001578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d016      	beq.n	8001540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_RCC_OscConfig+0x248>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001518:	f7ff fc5c 	bl	8000dd4 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fc58 	bl	8000dd4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e167      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x200>
 800153e:	e01b      	b.n	8001578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_OscConfig+0x248>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff fc45 	bl	8000dd4 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154c:	e00e      	b.n	800156c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154e:	f7ff fc41 	bl	8000dd4 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d907      	bls.n	800156c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e150      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
 8001560:	40023800 	.word	0x40023800
 8001564:	42470000 	.word	0x42470000
 8001568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	4b88      	ldr	r3, [pc, #544]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1ea      	bne.n	800154e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 8097 	beq.w	80016b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158a:	4b81      	ldr	r3, [pc, #516]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10f      	bne.n	80015b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b7d      	ldr	r3, [pc, #500]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a7c      	ldr	r2, [pc, #496]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b7a      	ldr	r3, [pc, #488]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b2:	2301      	movs	r3, #1
 80015b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	4b77      	ldr	r3, [pc, #476]	; (8001794 <HAL_RCC_OscConfig+0x474>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d118      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c2:	4b74      	ldr	r3, [pc, #464]	; (8001794 <HAL_RCC_OscConfig+0x474>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a73      	ldr	r2, [pc, #460]	; (8001794 <HAL_RCC_OscConfig+0x474>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fc01 	bl	8000dd4 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fbfd 	bl	8000dd4 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e10c      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_OscConfig+0x474>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x2ea>
 80015fc:	4b64      	ldr	r3, [pc, #400]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	4a63      	ldr	r2, [pc, #396]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	; 0x70
 8001608:	e01c      	b.n	8001644 <HAL_RCC_OscConfig+0x324>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x30c>
 8001612:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a5e      	ldr	r2, [pc, #376]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a5b      	ldr	r2, [pc, #364]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0x324>
 800162c:	4b58      	ldr	r3, [pc, #352]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4a57      	ldr	r2, [pc, #348]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	6713      	str	r3, [r2, #112]	; 0x70
 8001638:	4b55      	ldr	r3, [pc, #340]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	4a54      	ldr	r2, [pc, #336]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800163e:	f023 0304 	bic.w	r3, r3, #4
 8001642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d015      	beq.n	8001678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff fbc2 	bl	8000dd4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff fbbe 	bl	8000dd4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e0cb      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166a:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0ee      	beq.n	8001654 <HAL_RCC_OscConfig+0x334>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff fbac 	bl	8000dd4 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff fba8 	bl	8000dd4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0b5      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001696:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ee      	bne.n	8001680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	4a38      	ldr	r2, [pc, #224]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80016ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80a1 	beq.w	8001800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016be:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d05c      	beq.n	8001784 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d141      	bne.n	8001756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_RCC_OscConfig+0x478>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb7c 	bl	8000dd4 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff fb78 	bl	8000dd4 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e087      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f2:	4b27      	ldr	r3, [pc, #156]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	019b      	lsls	r3, r3, #6
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	085b      	lsrs	r3, r3, #1
 8001716:	3b01      	subs	r3, #1
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	491b      	ldr	r1, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_RCC_OscConfig+0x478>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff fb51 	bl	8000dd4 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff fb4d 	bl	8000dd4 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e05c      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x416>
 8001754:	e054      	b.n	8001800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HAL_RCC_OscConfig+0x478>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fb3a 	bl	8000dd4 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff fb36 	bl	8000dd4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e045      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x444>
 8001782:	e03d      	b.n	8001800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d107      	bne.n	800179c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e038      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000
 8001798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x4ec>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d028      	beq.n	80017fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d121      	bne.n	80017fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d11a      	bne.n	80017fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d111      	bne.n	80017fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	3b01      	subs	r3, #1
 80017e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0cc      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001824:	4b68      	ldr	r3, [pc, #416]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d90c      	bls.n	800184c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001832:	4b65      	ldr	r3, [pc, #404]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0b8      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d020      	beq.n	800189a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001864:	4b59      	ldr	r3, [pc, #356]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4a58      	ldr	r2, [pc, #352]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800186e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800187c:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a52      	ldr	r2, [pc, #328]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001888:	4b50      	ldr	r3, [pc, #320]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	494d      	ldr	r1, [pc, #308]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d044      	beq.n	8001930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	4b47      	ldr	r3, [pc, #284]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d119      	bne.n	80018ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e07f      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d003      	beq.n	80018ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ce:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d109      	bne.n	80018ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e06f      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018de:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e067      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f023 0203 	bic.w	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4934      	ldr	r1, [pc, #208]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001900:	f7ff fa68 	bl	8000dd4 <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	e00a      	b.n	800191e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001908:	f7ff fa64 	bl	8000dd4 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	; 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e04f      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 020c 	and.w	r2, r3, #12
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	429a      	cmp	r2, r3
 800192e:	d1eb      	bne.n	8001908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d20c      	bcs.n	8001958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e032      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4916      	ldr	r1, [pc, #88]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	490e      	ldr	r1, [pc, #56]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001996:	f000 f821 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 800199a:	4602      	mov	r2, r0
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	490a      	ldr	r1, [pc, #40]	; (80019d0 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	5ccb      	ldrb	r3, [r1, r3]
 80019aa:	fa22 f303 	lsr.w	r3, r2, r3
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f880 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00
 80019cc:	40023800 	.word	0x40023800
 80019d0:	08004cd8 	.word	0x08004cd8
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000004 	.word	0x20000004

080019dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e0:	b090      	sub	sp, #64	; 0x40
 80019e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
 80019e8:	2300      	movs	r3, #0
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d00d      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x40>
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	f200 80a1 	bhi.w	8001b48 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x34>
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a0e:	e09b      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a14:	e09b      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a16:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a1a:	e098      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a26:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d028      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a32:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	099b      	lsrs	r3, r3, #6
 8001a38:	2200      	movs	r2, #0
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	627a      	str	r2, [r7, #36]	; 0x24
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a44:	2100      	movs	r1, #0
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a48:	fb03 f201 	mul.w	r2, r3, r1
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	fb00 f303 	mul.w	r3, r0, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	4a43      	ldr	r2, [pc, #268]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a56:	fba0 1202 	umull	r1, r2, r0, r2
 8001a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a62:	4413      	add	r3, r2
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	2200      	movs	r2, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	61fa      	str	r2, [r7, #28]
 8001a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a76:	f7fe fc03 	bl	8000280 <__aeabi_uldivmod>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4613      	mov	r3, r2
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a82:	e053      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	099b      	lsrs	r3, r3, #6
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	617a      	str	r2, [r7, #20]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a96:	f04f 0b00 	mov.w	fp, #0
 8001a9a:	4652      	mov	r2, sl
 8001a9c:	465b      	mov	r3, fp
 8001a9e:	f04f 0000 	mov.w	r0, #0
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	0159      	lsls	r1, r3, #5
 8001aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aac:	0150      	lsls	r0, r2, #5
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	ebb2 080a 	subs.w	r8, r2, sl
 8001ab6:	eb63 090b 	sbc.w	r9, r3, fp
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ac6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001aca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ace:	ebb2 0408 	subs.w	r4, r2, r8
 8001ad2:	eb63 0509 	sbc.w	r5, r3, r9
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	00eb      	lsls	r3, r5, #3
 8001ae0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae4:	00e2      	lsls	r2, r4, #3
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	461d      	mov	r5, r3
 8001aea:	eb14 030a 	adds.w	r3, r4, sl
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	eb45 030b 	adc.w	r3, r5, fp
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b02:	4629      	mov	r1, r5
 8001b04:	028b      	lsls	r3, r1, #10
 8001b06:	4621      	mov	r1, r4
 8001b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	028a      	lsls	r2, r1, #10
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b16:	2200      	movs	r2, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	60fa      	str	r2, [r7, #12]
 8001b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b20:	f7fe fbae 	bl	8000280 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	0c1b      	lsrs	r3, r3, #16
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	3301      	adds	r3, #1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b46:	e002      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3740      	adds	r7, #64	; 0x40
 8001b54:	46bd      	mov	sp, r7
 8001b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	00f42400 	.word	0x00f42400
 8001b64:	017d7840 	.word	0x017d7840

08001b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000

08001b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b84:	f7ff fff0 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	0a9b      	lsrs	r3, r3, #10
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	4903      	ldr	r1, [pc, #12]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	08004ce8 	.word	0x08004ce8

08001ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bac:	f7ff ffdc 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0b5b      	lsrs	r3, r3, #13
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4903      	ldr	r1, [pc, #12]	; (8001bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	08004ce8 	.word	0x08004ce8

08001bd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	220f      	movs	r2, #15
 8001bde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_RCC_GetClockConfig+0x60>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0207 	and.w	r2, r3, #7
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40023c00 	.word	0x40023c00

08001c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e041      	b.n	8001cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f839 	bl	8001cd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f000 f9ca 	bl	800200c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d001      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e044      	b.n	8001d8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d018      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x6c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2a:	d013      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x6c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <HAL_TIM_Base_Start_IT+0xb4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00e      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x6c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x6c>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x6c>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d111      	bne.n	8001d78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d010      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	e007      	b.n	8001d88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40000800 	.word	0x40000800
 8001da4:	40000c00 	.word	0x40000c00
 8001da8:	40014000 	.word	0x40014000

08001dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d122      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d11b      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0202 	mvn.w	r2, #2
 8001dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8ee 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8e0 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f8f1 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d122      	bne.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d11b      	bne.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0204 	mvn.w	r2, #4
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8c4 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001e48:	e005      	b.n	8001e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8b6 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8c7 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d122      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d11b      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0208 	mvn.w	r2, #8
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2204      	movs	r2, #4
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f89a 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f88c 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f89d 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d122      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d11b      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0210 	mvn.w	r2, #16
 8001ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f870 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001ef0:	e005      	b.n	8001efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f862 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f873 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10e      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0201 	mvn.w	r2, #1
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fd3a 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	2b80      	cmp	r3, #128	; 0x80
 8001f3c:	d10e      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f48:	2b80      	cmp	r3, #128	; 0x80
 8001f4a:	d107      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8e2 	bl	8002120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	d10e      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	d107      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f838 	bl	8001ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d107      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0220 	mvn.w	r2, #32
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8ac 	bl	800210c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a34      	ldr	r2, [pc, #208]	; (80020f0 <TIM_Base_SetConfig+0xe4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00f      	beq.n	8002044 <TIM_Base_SetConfig+0x38>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202a:	d00b      	beq.n	8002044 <TIM_Base_SetConfig+0x38>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a31      	ldr	r2, [pc, #196]	; (80020f4 <TIM_Base_SetConfig+0xe8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <TIM_Base_SetConfig+0x38>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a30      	ldr	r2, [pc, #192]	; (80020f8 <TIM_Base_SetConfig+0xec>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d003      	beq.n	8002044 <TIM_Base_SetConfig+0x38>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a2f      	ldr	r2, [pc, #188]	; (80020fc <TIM_Base_SetConfig+0xf0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <TIM_Base_SetConfig+0xe4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01b      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d017      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a22      	ldr	r2, [pc, #136]	; (80020f4 <TIM_Base_SetConfig+0xe8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a21      	ldr	r2, [pc, #132]	; (80020f8 <TIM_Base_SetConfig+0xec>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00f      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a20      	ldr	r2, [pc, #128]	; (80020fc <TIM_Base_SetConfig+0xf0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00b      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <TIM_Base_SetConfig+0xf4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <TIM_Base_SetConfig+0xf8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d003      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <TIM_Base_SetConfig+0xfc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d108      	bne.n	80020a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800209c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a08      	ldr	r2, [pc, #32]	; (80020f0 <TIM_Base_SetConfig+0xe4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d103      	bne.n	80020dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	615a      	str	r2, [r3, #20]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40000400 	.word	0x40000400
 80020f8:	40000800 	.word	0x40000800
 80020fc:	40000c00 	.word	0x40000c00
 8002100:	40014000 	.word	0x40014000
 8002104:	40014400 	.word	0x40014400
 8002108:	40014800 	.word	0x40014800

0800210c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e03f      	b.n	80021c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe fc66 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	; 0x24
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f829 	bl	80021d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800218c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800219c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d4:	b0c0      	sub	sp, #256	; 0x100
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ec:	68d9      	ldr	r1, [r3, #12]
 80021ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	ea40 0301 	orr.w	r3, r0, r1
 80021f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	431a      	orrs	r2, r3
 8002208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	431a      	orrs	r2, r3
 8002210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002228:	f021 010c 	bic.w	r1, r1, #12
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002236:	430b      	orrs	r3, r1
 8002238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800223a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224a:	6999      	ldr	r1, [r3, #24]
 800224c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	ea40 0301 	orr.w	r3, r0, r1
 8002256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b8f      	ldr	r3, [pc, #572]	; (800249c <UART_SetConfig+0x2cc>)
 8002260:	429a      	cmp	r2, r3
 8002262:	d005      	beq.n	8002270 <UART_SetConfig+0xa0>
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b8d      	ldr	r3, [pc, #564]	; (80024a0 <UART_SetConfig+0x2d0>)
 800226c:	429a      	cmp	r2, r3
 800226e:	d104      	bne.n	800227a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002270:	f7ff fc9a 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 8002274:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002278:	e003      	b.n	8002282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800227a:	f7ff fc81 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 800227e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800228c:	f040 810c 	bne.w	80024a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002294:	2200      	movs	r2, #0
 8002296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800229a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800229e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022a2:	4622      	mov	r2, r4
 80022a4:	462b      	mov	r3, r5
 80022a6:	1891      	adds	r1, r2, r2
 80022a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80022aa:	415b      	adcs	r3, r3
 80022ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022b2:	4621      	mov	r1, r4
 80022b4:	eb12 0801 	adds.w	r8, r2, r1
 80022b8:	4629      	mov	r1, r5
 80022ba:	eb43 0901 	adc.w	r9, r3, r1
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022d2:	4690      	mov	r8, r2
 80022d4:	4699      	mov	r9, r3
 80022d6:	4623      	mov	r3, r4
 80022d8:	eb18 0303 	adds.w	r3, r8, r3
 80022dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80022e0:	462b      	mov	r3, r5
 80022e2:	eb49 0303 	adc.w	r3, r9, r3
 80022e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80022f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80022fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80022fe:	460b      	mov	r3, r1
 8002300:	18db      	adds	r3, r3, r3
 8002302:	653b      	str	r3, [r7, #80]	; 0x50
 8002304:	4613      	mov	r3, r2
 8002306:	eb42 0303 	adc.w	r3, r2, r3
 800230a:	657b      	str	r3, [r7, #84]	; 0x54
 800230c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002310:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002314:	f7fd ffb4 	bl	8000280 <__aeabi_uldivmod>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4b61      	ldr	r3, [pc, #388]	; (80024a4 <UART_SetConfig+0x2d4>)
 800231e:	fba3 2302 	umull	r2, r3, r3, r2
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	011c      	lsls	r4, r3, #4
 8002326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800232a:	2200      	movs	r2, #0
 800232c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002330:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002334:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002338:	4642      	mov	r2, r8
 800233a:	464b      	mov	r3, r9
 800233c:	1891      	adds	r1, r2, r2
 800233e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002340:	415b      	adcs	r3, r3
 8002342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002348:	4641      	mov	r1, r8
 800234a:	eb12 0a01 	adds.w	sl, r2, r1
 800234e:	4649      	mov	r1, r9
 8002350:	eb43 0b01 	adc.w	fp, r3, r1
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002360:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002368:	4692      	mov	sl, r2
 800236a:	469b      	mov	fp, r3
 800236c:	4643      	mov	r3, r8
 800236e:	eb1a 0303 	adds.w	r3, sl, r3
 8002372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002376:	464b      	mov	r3, r9
 8002378:	eb4b 0303 	adc.w	r3, fp, r3
 800237c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800238c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002390:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002394:	460b      	mov	r3, r1
 8002396:	18db      	adds	r3, r3, r3
 8002398:	643b      	str	r3, [r7, #64]	; 0x40
 800239a:	4613      	mov	r3, r2
 800239c:	eb42 0303 	adc.w	r3, r2, r3
 80023a0:	647b      	str	r3, [r7, #68]	; 0x44
 80023a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80023aa:	f7fd ff69 	bl	8000280 <__aeabi_uldivmod>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4611      	mov	r1, r2
 80023b4:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <UART_SetConfig+0x2d4>)
 80023b6:	fba3 2301 	umull	r2, r3, r3, r1
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2264      	movs	r2, #100	; 0x64
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	1acb      	subs	r3, r1, r3
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80023ca:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <UART_SetConfig+0x2d4>)
 80023cc:	fba3 2302 	umull	r2, r3, r3, r2
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023d8:	441c      	add	r4, r3
 80023da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023de:	2200      	movs	r2, #0
 80023e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80023e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80023ec:	4642      	mov	r2, r8
 80023ee:	464b      	mov	r3, r9
 80023f0:	1891      	adds	r1, r2, r2
 80023f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80023f4:	415b      	adcs	r3, r3
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023fc:	4641      	mov	r1, r8
 80023fe:	1851      	adds	r1, r2, r1
 8002400:	6339      	str	r1, [r7, #48]	; 0x30
 8002402:	4649      	mov	r1, r9
 8002404:	414b      	adcs	r3, r1
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002414:	4659      	mov	r1, fp
 8002416:	00cb      	lsls	r3, r1, #3
 8002418:	4651      	mov	r1, sl
 800241a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800241e:	4651      	mov	r1, sl
 8002420:	00ca      	lsls	r2, r1, #3
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	4603      	mov	r3, r0
 8002428:	4642      	mov	r2, r8
 800242a:	189b      	adds	r3, r3, r2
 800242c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002430:	464b      	mov	r3, r9
 8002432:	460a      	mov	r2, r1
 8002434:	eb42 0303 	adc.w	r3, r2, r3
 8002438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002448:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800244c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002450:	460b      	mov	r3, r1
 8002452:	18db      	adds	r3, r3, r3
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
 8002456:	4613      	mov	r3, r2
 8002458:	eb42 0303 	adc.w	r3, r2, r3
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800245e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002462:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002466:	f7fd ff0b 	bl	8000280 <__aeabi_uldivmod>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <UART_SetConfig+0x2d4>)
 8002470:	fba3 1302 	umull	r1, r3, r3, r2
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	2164      	movs	r1, #100	; 0x64
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	3332      	adds	r3, #50	; 0x32
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <UART_SetConfig+0x2d4>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	f003 0207 	and.w	r2, r3, #7
 800248e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4422      	add	r2, r4
 8002496:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002498:	e105      	b.n	80026a6 <UART_SetConfig+0x4d6>
 800249a:	bf00      	nop
 800249c:	40011000 	.word	0x40011000
 80024a0:	40011400 	.word	0x40011400
 80024a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ac:	2200      	movs	r2, #0
 80024ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80024ba:	4642      	mov	r2, r8
 80024bc:	464b      	mov	r3, r9
 80024be:	1891      	adds	r1, r2, r2
 80024c0:	6239      	str	r1, [r7, #32]
 80024c2:	415b      	adcs	r3, r3
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
 80024c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024ca:	4641      	mov	r1, r8
 80024cc:	1854      	adds	r4, r2, r1
 80024ce:	4649      	mov	r1, r9
 80024d0:	eb43 0501 	adc.w	r5, r3, r1
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	00eb      	lsls	r3, r5, #3
 80024de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024e2:	00e2      	lsls	r2, r4, #3
 80024e4:	4614      	mov	r4, r2
 80024e6:	461d      	mov	r5, r3
 80024e8:	4643      	mov	r3, r8
 80024ea:	18e3      	adds	r3, r4, r3
 80024ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024f0:	464b      	mov	r3, r9
 80024f2:	eb45 0303 	adc.w	r3, r5, r3
 80024f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80024fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002506:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002516:	4629      	mov	r1, r5
 8002518:	008b      	lsls	r3, r1, #2
 800251a:	4621      	mov	r1, r4
 800251c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002520:	4621      	mov	r1, r4
 8002522:	008a      	lsls	r2, r1, #2
 8002524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002528:	f7fd feaa 	bl	8000280 <__aeabi_uldivmod>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4b60      	ldr	r3, [pc, #384]	; (80026b4 <UART_SetConfig+0x4e4>)
 8002532:	fba3 2302 	umull	r2, r3, r3, r2
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	011c      	lsls	r4, r3, #4
 800253a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800253e:	2200      	movs	r2, #0
 8002540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002544:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002548:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800254c:	4642      	mov	r2, r8
 800254e:	464b      	mov	r3, r9
 8002550:	1891      	adds	r1, r2, r2
 8002552:	61b9      	str	r1, [r7, #24]
 8002554:	415b      	adcs	r3, r3
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800255c:	4641      	mov	r1, r8
 800255e:	1851      	adds	r1, r2, r1
 8002560:	6139      	str	r1, [r7, #16]
 8002562:	4649      	mov	r1, r9
 8002564:	414b      	adcs	r3, r1
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002574:	4659      	mov	r1, fp
 8002576:	00cb      	lsls	r3, r1, #3
 8002578:	4651      	mov	r1, sl
 800257a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800257e:	4651      	mov	r1, sl
 8002580:	00ca      	lsls	r2, r1, #3
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	4603      	mov	r3, r0
 8002588:	4642      	mov	r2, r8
 800258a:	189b      	adds	r3, r3, r2
 800258c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002590:	464b      	mov	r3, r9
 8002592:	460a      	mov	r2, r1
 8002594:	eb42 0303 	adc.w	r3, r2, r3
 8002598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80025a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80025b4:	4649      	mov	r1, r9
 80025b6:	008b      	lsls	r3, r1, #2
 80025b8:	4641      	mov	r1, r8
 80025ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025be:	4641      	mov	r1, r8
 80025c0:	008a      	lsls	r2, r1, #2
 80025c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80025c6:	f7fd fe5b 	bl	8000280 <__aeabi_uldivmod>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <UART_SetConfig+0x4e4>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	2164      	movs	r1, #100	; 0x64
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	3332      	adds	r3, #50	; 0x32
 80025e2:	4a34      	ldr	r2, [pc, #208]	; (80026b4 <UART_SetConfig+0x4e4>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ee:	441c      	add	r4, r3
 80025f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f4:	2200      	movs	r2, #0
 80025f6:	673b      	str	r3, [r7, #112]	; 0x70
 80025f8:	677a      	str	r2, [r7, #116]	; 0x74
 80025fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80025fe:	4642      	mov	r2, r8
 8002600:	464b      	mov	r3, r9
 8002602:	1891      	adds	r1, r2, r2
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	415b      	adcs	r3, r3
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800260e:	4641      	mov	r1, r8
 8002610:	1851      	adds	r1, r2, r1
 8002612:	6039      	str	r1, [r7, #0]
 8002614:	4649      	mov	r1, r9
 8002616:	414b      	adcs	r3, r1
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002626:	4659      	mov	r1, fp
 8002628:	00cb      	lsls	r3, r1, #3
 800262a:	4651      	mov	r1, sl
 800262c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002630:	4651      	mov	r1, sl
 8002632:	00ca      	lsls	r2, r1, #3
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	4603      	mov	r3, r0
 800263a:	4642      	mov	r2, r8
 800263c:	189b      	adds	r3, r3, r2
 800263e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002640:	464b      	mov	r3, r9
 8002642:	460a      	mov	r2, r1
 8002644:	eb42 0303 	adc.w	r3, r2, r3
 8002648:	66fb      	str	r3, [r7, #108]	; 0x6c
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	663b      	str	r3, [r7, #96]	; 0x60
 8002654:	667a      	str	r2, [r7, #100]	; 0x64
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002662:	4649      	mov	r1, r9
 8002664:	008b      	lsls	r3, r1, #2
 8002666:	4641      	mov	r1, r8
 8002668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800266c:	4641      	mov	r1, r8
 800266e:	008a      	lsls	r2, r1, #2
 8002670:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002674:	f7fd fe04 	bl	8000280 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <UART_SetConfig+0x4e4>)
 800267e:	fba3 1302 	umull	r1, r3, r3, r2
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2164      	movs	r1, #100	; 0x64
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	3332      	adds	r3, #50	; 0x32
 8002690:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <UART_SetConfig+0x4e4>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	f003 020f 	and.w	r2, r3, #15
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4422      	add	r2, r4
 80026a4:	609a      	str	r2, [r3, #8]
}
 80026a6:	bf00      	nop
 80026a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026ac:	46bd      	mov	sp, r7
 80026ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026b2:	bf00      	nop
 80026b4:	51eb851f 	.word	0x51eb851f

080026b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ca:	2b84      	cmp	r3, #132	; 0x84
 80026cc:	d005      	beq.n	80026da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4413      	add	r3, r2
 80026d6:	3303      	adds	r3, #3
 80026d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026ec:	f000 faf6 	bl	8002cdc <vTaskStartScheduler>
  
  return osOK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f8:	b089      	sub	sp, #36	; 0x24
 80026fa:	af04      	add	r7, sp, #16
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <osThreadCreate+0x54>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01c      	beq.n	800274a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685c      	ldr	r4, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681d      	ldr	r5, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691e      	ldr	r6, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ffc8 	bl	80026b8 <makeFreeRtosPriority>
 8002728:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002732:	9202      	str	r2, [sp, #8]
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	9100      	str	r1, [sp, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4632      	mov	r2, r6
 800273c:	4629      	mov	r1, r5
 800273e:	4620      	mov	r0, r4
 8002740:	f000 f8ed 	bl	800291e <xTaskCreateStatic>
 8002744:	4603      	mov	r3, r0
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e01c      	b.n	8002784 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685c      	ldr	r4, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002756:	b29e      	uxth	r6, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ffaa 	bl	80026b8 <makeFreeRtosPriority>
 8002764:	4602      	mov	r2, r0
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	9200      	str	r2, [sp, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	4632      	mov	r2, r6
 8002772:	4629      	mov	r1, r5
 8002774:	4620      	mov	r0, r4
 8002776:	f000 f92f 	bl	80029d8 <xTaskCreate>
 800277a:	4603      	mov	r3, r0
 800277c:	2b01      	cmp	r3, #1
 800277e:	d001      	beq.n	8002784 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002780:	2300      	movs	r3, #0
 8002782:	e000      	b.n	8002786 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002784:	68fb      	ldr	r3, [r7, #12]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800278e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <osDelay+0x16>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	e000      	b.n	80027a6 <osDelay+0x18>
 80027a4:	2301      	movs	r3, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fa64 	bl	8002c74 <vTaskDelay>
  
  return osOK;
 80027ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f103 0208 	add.w	r2, r3, #8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f04f 32ff 	mov.w	r2, #4294967295
 80027ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f103 0208 	add.w	r2, r3, #8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f103 0208 	add.w	r2, r3, #8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	601a      	str	r2, [r3, #0]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286e:	d103      	bne.n	8002878 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e00c      	b.n	8002892 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3308      	adds	r3, #8
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	e002      	b.n	8002886 <vListInsert+0x2e>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	429a      	cmp	r2, r3
 8002890:	d2f6      	bcs.n	8002880 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6892      	ldr	r2, [r2, #8]
 80028e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6852      	ldr	r2, [r2, #4]
 80028ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d103      	bne.n	80028fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	1e5a      	subs	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800291e:	b580      	push	{r7, lr}
 8002920:	b08e      	sub	sp, #56	; 0x38
 8002922:	af04      	add	r7, sp, #16
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002944:	bf00      	nop
 8002946:	e7fe      	b.n	8002946 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <xTaskCreateStatic+0x46>
	__asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	61fb      	str	r3, [r7, #28]
}
 8002960:	bf00      	nop
 8002962:	e7fe      	b.n	8002962 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002964:	23b4      	movs	r3, #180	; 0xb4
 8002966:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2bb4      	cmp	r3, #180	; 0xb4
 800296c:	d00a      	beq.n	8002984 <xTaskCreateStatic+0x66>
	__asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	61bb      	str	r3, [r7, #24]
}
 8002980:	bf00      	nop
 8002982:	e7fe      	b.n	8002982 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002984:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01e      	beq.n	80029ca <xTaskCreateStatic+0xac>
 800298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01b      	beq.n	80029ca <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800299a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029a4:	2300      	movs	r3, #0
 80029a6:	9303      	str	r3, [sp, #12]
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	9302      	str	r3, [sp, #8]
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f851 	bl	8002a64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c4:	f000 f8ec 	bl	8002ba0 <prvAddNewTaskToReadyList>
 80029c8:	e001      	b.n	80029ce <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029ce:	697b      	ldr	r3, [r7, #20]
	}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	; 0x30
 80029dc:	af04      	add	r7, sp, #16
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 fef3 	bl	80037d8 <pvPortMalloc>
 80029f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00e      	beq.n	8002a18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029fa:	20b4      	movs	r0, #180	; 0xb4
 80029fc:	f000 feec 	bl	80037d8 <pvPortMalloc>
 8002a00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a0e:	e005      	b.n	8002a1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a10:	6978      	ldr	r0, [r7, #20]
 8002a12:	f000 ffad 	bl	8003970 <vPortFree>
 8002a16:	e001      	b.n	8002a1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d017      	beq.n	8002a52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a2a:	88fa      	ldrh	r2, [r7, #6]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9303      	str	r3, [sp, #12]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	9302      	str	r3, [sp, #8]
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f80f 	bl	8002a64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a46:	69f8      	ldr	r0, [r7, #28]
 8002a48:	f000 f8aa 	bl	8002ba0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	e002      	b.n	8002a58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a58:	69bb      	ldr	r3, [r7, #24]
	}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f023 0307 	bic.w	r3, r3, #7
 8002a8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <prvInitialiseNewTask+0x48>
	__asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	617b      	str	r3, [r7, #20]
}
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01f      	beq.n	8002af2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e012      	b.n	8002ade <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	7819      	ldrb	r1, [r3, #0]
 8002ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3334      	adds	r3, #52	; 0x34
 8002ac8:	460a      	mov	r2, r1
 8002aca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d006      	beq.n	8002ae6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	3301      	adds	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	2b0f      	cmp	r3, #15
 8002ae2:	d9e9      	bls.n	8002ab8 <prvInitialiseNewTask+0x54>
 8002ae4:	e000      	b.n	8002ae8 <prvInitialiseNewTask+0x84>
			{
				break;
 8002ae6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af0:	e003      	b.n	8002afa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	d901      	bls.n	8002b04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b00:	2306      	movs	r3, #6
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	2200      	movs	r2, #0
 8002b14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	3304      	adds	r3, #4
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fe6b 	bl	80027f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	3318      	adds	r3, #24
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fe66 	bl	80027f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	f1c3 0207 	rsb	r2, r3, #7
 8002b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	334c      	adds	r3, #76	; 0x4c
 8002b54:	2260      	movs	r2, #96	; 0x60
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f001 f94a 	bl	8003df2 <memset>
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <prvInitialiseNewTask+0x130>)
 8002b62:	651a      	str	r2, [r3, #80]	; 0x50
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <prvInitialiseNewTask+0x134>)
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <prvInitialiseNewTask+0x138>)
 8002b6e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	69b8      	ldr	r0, [r7, #24]
 8002b76:	f000 fc1f 	bl	80033b8 <pxPortInitialiseStack>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b8c:	bf00      	nop
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	08004d10 	.word	0x08004d10
 8002b98:	08004d30 	.word	0x08004d30
 8002b9c:	08004cf0 	.word	0x08004cf0

08002ba0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ba8:	f000 fd34 	bl	8003614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bac:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <prvAddNewTaskToReadyList+0xb8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	4a29      	ldr	r2, [pc, #164]	; (8002c58 <prvAddNewTaskToReadyList+0xb8>)
 8002bb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <prvAddNewTaskToReadyList+0xbc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bbe:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <prvAddNewTaskToReadyList+0xbc>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bc4:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <prvAddNewTaskToReadyList+0xb8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d110      	bne.n	8002bee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bcc:	f000 facc 	bl	8003168 <prvInitialiseTaskLists>
 8002bd0:	e00d      	b.n	8002bee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <prvAddNewTaskToReadyList+0xc0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bda:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <prvAddNewTaskToReadyList+0xbc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d802      	bhi.n	8002bee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002be8:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <prvAddNewTaskToReadyList+0xbc>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <prvAddNewTaskToReadyList+0xc4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <prvAddNewTaskToReadyList+0xc4>)
 8002bf6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <prvAddNewTaskToReadyList+0xc8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <prvAddNewTaskToReadyList+0xc8>)
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <prvAddNewTaskToReadyList+0xcc>)
 8002c18:	441a      	add	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4610      	mov	r0, r2
 8002c22:	f7ff fdf5 	bl	8002810 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c26:	f000 fd25 	bl	8003674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <prvAddNewTaskToReadyList+0xc0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00e      	beq.n	8002c50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <prvAddNewTaskToReadyList+0xbc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d207      	bcs.n	8002c50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <prvAddNewTaskToReadyList+0xd0>)
 8002c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200004e4 	.word	0x200004e4
 8002c5c:	200003e4 	.word	0x200003e4
 8002c60:	200004f0 	.word	0x200004f0
 8002c64:	20000500 	.word	0x20000500
 8002c68:	200004ec 	.word	0x200004ec
 8002c6c:	200003e8 	.word	0x200003e8
 8002c70:	e000ed04 	.word	0xe000ed04

08002c74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d017      	beq.n	8002cb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <vTaskDelay+0x60>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <vTaskDelay+0x30>
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	60bb      	str	r3, [r7, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	e7fe      	b.n	8002ca2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ca4:	f000 f884 	bl	8002db0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ca8:	2100      	movs	r1, #0
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fb1e 	bl	80032ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002cb0:	f000 f88c 	bl	8002dcc <xTaskResumeAll>
 8002cb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d107      	bne.n	8002ccc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <vTaskDelay+0x64>)
 8002cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	2000050c 	.word	0x2000050c
 8002cd8:	e000ed04 	.word	0xe000ed04

08002cdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cea:	463a      	mov	r2, r7
 8002cec:	1d39      	adds	r1, r7, #4
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc46 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	9202      	str	r2, [sp, #8]
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	460a      	mov	r2, r1
 8002d0a:	4921      	ldr	r1, [pc, #132]	; (8002d90 <vTaskStartScheduler+0xb4>)
 8002d0c:	4821      	ldr	r0, [pc, #132]	; (8002d94 <vTaskStartScheduler+0xb8>)
 8002d0e:	f7ff fe06 	bl	800291e <xTaskCreateStatic>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <vTaskStartScheduler+0xbc>)
 8002d16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d18:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <vTaskStartScheduler+0xbc>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d20:	2301      	movs	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	e001      	b.n	8002d2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d11b      	bne.n	8002d68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	613b      	str	r3, [r7, #16]
}
 8002d42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d44:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <vTaskStartScheduler+0xc0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	334c      	adds	r3, #76	; 0x4c
 8002d4a:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <vTaskStartScheduler+0xc4>)
 8002d4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <vTaskStartScheduler+0xc8>)
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <vTaskStartScheduler+0xcc>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <vTaskStartScheduler+0xd0>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d62:	f000 fbb5 	bl	80034d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d66:	e00e      	b.n	8002d86 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	d10a      	bne.n	8002d86 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	60fb      	str	r3, [r7, #12]
}
 8002d82:	bf00      	nop
 8002d84:	e7fe      	b.n	8002d84 <vTaskStartScheduler+0xa8>
}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	08004cd0 	.word	0x08004cd0
 8002d94:	08003139 	.word	0x08003139
 8002d98:	20000508 	.word	0x20000508
 8002d9c:	200003e4 	.word	0x200003e4
 8002da0:	20000010 	.word	0x20000010
 8002da4:	20000504 	.word	0x20000504
 8002da8:	200004f0 	.word	0x200004f0
 8002dac:	200004e8 	.word	0x200004e8

08002db0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <vTaskSuspendAll+0x18>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	4a03      	ldr	r2, [pc, #12]	; (8002dc8 <vTaskSuspendAll+0x18>)
 8002dbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	2000050c 	.word	0x2000050c

08002dcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <xTaskResumeAll+0x114>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <xTaskResumeAll+0x2c>
	__asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	603b      	str	r3, [r7, #0]
}
 8002df4:	bf00      	nop
 8002df6:	e7fe      	b.n	8002df6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002df8:	f000 fc0c 	bl	8003614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002dfc:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <xTaskResumeAll+0x114>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	4a37      	ldr	r2, [pc, #220]	; (8002ee0 <xTaskResumeAll+0x114>)
 8002e04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e06:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <xTaskResumeAll+0x114>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d161      	bne.n	8002ed2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e0e:	4b35      	ldr	r3, [pc, #212]	; (8002ee4 <xTaskResumeAll+0x118>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d05d      	beq.n	8002ed2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e16:	e02e      	b.n	8002e76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e18:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <xTaskResumeAll+0x11c>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3318      	adds	r3, #24
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fd50 	bl	80028ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fd4b 	bl	80028ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	2201      	movs	r2, #1
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <xTaskResumeAll+0x120>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	4a2a      	ldr	r2, [pc, #168]	; (8002eec <xTaskResumeAll+0x120>)
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <xTaskResumeAll+0x124>)
 8002e54:	441a      	add	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f7ff fcd7 	bl	8002810 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <xTaskResumeAll+0x128>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d302      	bcc.n	8002e76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <xTaskResumeAll+0x12c>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <xTaskResumeAll+0x11c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1cc      	bne.n	8002e18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e84:	f000 fa12 	bl	80032ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e88:	4b1c      	ldr	r3, [pc, #112]	; (8002efc <xTaskResumeAll+0x130>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d010      	beq.n	8002eb6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e94:	f000 f836 	bl	8002f04 <xTaskIncrementTick>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <xTaskResumeAll+0x12c>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f1      	bne.n	8002e94 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <xTaskResumeAll+0x130>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <xTaskResumeAll+0x12c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <xTaskResumeAll+0x134>)
 8002ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ed2:	f000 fbcf 	bl	8003674 <vPortExitCritical>

	return xAlreadyYielded;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	2000050c 	.word	0x2000050c
 8002ee4:	200004e4 	.word	0x200004e4
 8002ee8:	200004a4 	.word	0x200004a4
 8002eec:	200004ec 	.word	0x200004ec
 8002ef0:	200003e8 	.word	0x200003e8
 8002ef4:	200003e4 	.word	0x200003e4
 8002ef8:	200004f8 	.word	0x200004f8
 8002efc:	200004f4 	.word	0x200004f4
 8002f00:	e000ed04 	.word	0xe000ed04

08002f04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f0e:	4b4e      	ldr	r3, [pc, #312]	; (8003048 <xTaskIncrementTick+0x144>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 808e 	bne.w	8003034 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f18:	4b4c      	ldr	r3, [pc, #304]	; (800304c <xTaskIncrementTick+0x148>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f20:	4a4a      	ldr	r2, [pc, #296]	; (800304c <xTaskIncrementTick+0x148>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d120      	bne.n	8002f6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f2c:	4b48      	ldr	r3, [pc, #288]	; (8003050 <xTaskIncrementTick+0x14c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <xTaskIncrementTick+0x48>
	__asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	603b      	str	r3, [r7, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	e7fe      	b.n	8002f4a <xTaskIncrementTick+0x46>
 8002f4c:	4b40      	ldr	r3, [pc, #256]	; (8003050 <xTaskIncrementTick+0x14c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b40      	ldr	r3, [pc, #256]	; (8003054 <xTaskIncrementTick+0x150>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a3e      	ldr	r2, [pc, #248]	; (8003050 <xTaskIncrementTick+0x14c>)
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4a3e      	ldr	r2, [pc, #248]	; (8003054 <xTaskIncrementTick+0x150>)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <xTaskIncrementTick+0x154>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <xTaskIncrementTick+0x154>)
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	f000 f99f 	bl	80032ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <xTaskIncrementTick+0x158>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d348      	bcc.n	800300a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <xTaskIncrementTick+0x14c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f82:	4b36      	ldr	r3, [pc, #216]	; (800305c <xTaskIncrementTick+0x158>)
 8002f84:	f04f 32ff 	mov.w	r2, #4294967295
 8002f88:	601a      	str	r2, [r3, #0]
					break;
 8002f8a:	e03e      	b.n	800300a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <xTaskIncrementTick+0x14c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d203      	bcs.n	8002fac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002fa4:	4a2d      	ldr	r2, [pc, #180]	; (800305c <xTaskIncrementTick+0x158>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002faa:	e02e      	b.n	800300a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fc8a 	bl	80028ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	3318      	adds	r3, #24
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fc81 	bl	80028ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	2201      	movs	r2, #1
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <xTaskIncrementTick+0x15c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	4a22      	ldr	r2, [pc, #136]	; (8003060 <xTaskIncrementTick+0x15c>)
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <xTaskIncrementTick+0x160>)
 8002fe8:	441a      	add	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f7ff fc0d 	bl	8002810 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <xTaskIncrementTick+0x164>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	429a      	cmp	r2, r3
 8003002:	d3b9      	bcc.n	8002f78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003004:	2301      	movs	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003008:	e7b6      	b.n	8002f78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800300a:	4b17      	ldr	r3, [pc, #92]	; (8003068 <xTaskIncrementTick+0x164>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003010:	4914      	ldr	r1, [pc, #80]	; (8003064 <xTaskIncrementTick+0x160>)
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d901      	bls.n	8003026 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003022:	2301      	movs	r3, #1
 8003024:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <xTaskIncrementTick+0x168>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800302e:	2301      	movs	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	e004      	b.n	800303e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <xTaskIncrementTick+0x16c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <xTaskIncrementTick+0x16c>)
 800303c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800303e:	697b      	ldr	r3, [r7, #20]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	2000050c 	.word	0x2000050c
 800304c:	200004e8 	.word	0x200004e8
 8003050:	2000049c 	.word	0x2000049c
 8003054:	200004a0 	.word	0x200004a0
 8003058:	200004fc 	.word	0x200004fc
 800305c:	20000504 	.word	0x20000504
 8003060:	200004ec 	.word	0x200004ec
 8003064:	200003e8 	.word	0x200003e8
 8003068:	200003e4 	.word	0x200003e4
 800306c:	200004f8 	.word	0x200004f8
 8003070:	200004f4 	.word	0x200004f4

08003074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <vTaskSwitchContext+0xac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003082:	4b28      	ldr	r3, [pc, #160]	; (8003124 <vTaskSwitchContext+0xb0>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003088:	e044      	b.n	8003114 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800308a:	4b26      	ldr	r3, [pc, #152]	; (8003124 <vTaskSwitchContext+0xb0>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003090:	4b25      	ldr	r3, [pc, #148]	; (8003128 <vTaskSwitchContext+0xb4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	f1c3 031f 	rsb	r3, r3, #31
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	4921      	ldr	r1, [pc, #132]	; (800312c <vTaskSwitchContext+0xb8>)
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	607b      	str	r3, [r7, #4]
}
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <vTaskSwitchContext+0x5a>
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4a14      	ldr	r2, [pc, #80]	; (800312c <vTaskSwitchContext+0xb8>)
 80030dc:	4413      	add	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	3308      	adds	r3, #8
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d104      	bne.n	8003100 <vTaskSwitchContext+0x8c>
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <vTaskSwitchContext+0xbc>)
 8003108:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <vTaskSwitchContext+0xbc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	334c      	adds	r3, #76	; 0x4c
 8003110:	4a08      	ldr	r2, [pc, #32]	; (8003134 <vTaskSwitchContext+0xc0>)
 8003112:	6013      	str	r3, [r2, #0]
}
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	2000050c 	.word	0x2000050c
 8003124:	200004f8 	.word	0x200004f8
 8003128:	200004ec 	.word	0x200004ec
 800312c:	200003e8 	.word	0x200003e8
 8003130:	200003e4 	.word	0x200003e4
 8003134:	20000010 	.word	0x20000010

08003138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003140:	f000 f852 	bl	80031e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <prvIdleTask+0x28>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d9f9      	bls.n	8003140 <prvIdleTask+0x8>
			{
				taskYIELD();
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <prvIdleTask+0x2c>)
 800314e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800315c:	e7f0      	b.n	8003140 <prvIdleTask+0x8>
 800315e:	bf00      	nop
 8003160:	200003e8 	.word	0x200003e8
 8003164:	e000ed04 	.word	0xe000ed04

08003168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	e00c      	b.n	800318e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <prvInitialiseTaskLists+0x60>)
 8003180:	4413      	add	r3, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fb17 	bl	80027b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3301      	adds	r3, #1
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b06      	cmp	r3, #6
 8003192:	d9ef      	bls.n	8003174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003194:	480d      	ldr	r0, [pc, #52]	; (80031cc <prvInitialiseTaskLists+0x64>)
 8003196:	f7ff fb0e 	bl	80027b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800319a:	480d      	ldr	r0, [pc, #52]	; (80031d0 <prvInitialiseTaskLists+0x68>)
 800319c:	f7ff fb0b 	bl	80027b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031a0:	480c      	ldr	r0, [pc, #48]	; (80031d4 <prvInitialiseTaskLists+0x6c>)
 80031a2:	f7ff fb08 	bl	80027b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031a6:	480c      	ldr	r0, [pc, #48]	; (80031d8 <prvInitialiseTaskLists+0x70>)
 80031a8:	f7ff fb05 	bl	80027b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031ac:	480b      	ldr	r0, [pc, #44]	; (80031dc <prvInitialiseTaskLists+0x74>)
 80031ae:	f7ff fb02 	bl	80027b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <prvInitialiseTaskLists+0x78>)
 80031b4:	4a05      	ldr	r2, [pc, #20]	; (80031cc <prvInitialiseTaskLists+0x64>)
 80031b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <prvInitialiseTaskLists+0x7c>)
 80031ba:	4a05      	ldr	r2, [pc, #20]	; (80031d0 <prvInitialiseTaskLists+0x68>)
 80031bc:	601a      	str	r2, [r3, #0]
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	200003e8 	.word	0x200003e8
 80031cc:	20000474 	.word	0x20000474
 80031d0:	20000488 	.word	0x20000488
 80031d4:	200004a4 	.word	0x200004a4
 80031d8:	200004b8 	.word	0x200004b8
 80031dc:	200004d0 	.word	0x200004d0
 80031e0:	2000049c 	.word	0x2000049c
 80031e4:	200004a0 	.word	0x200004a0

080031e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031ee:	e019      	b.n	8003224 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031f0:	f000 fa10 	bl	8003614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f4:	4b10      	ldr	r3, [pc, #64]	; (8003238 <prvCheckTasksWaitingTermination+0x50>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3304      	adds	r3, #4
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fb62 	bl	80028ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003206:	4b0d      	ldr	r3, [pc, #52]	; (800323c <prvCheckTasksWaitingTermination+0x54>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3b01      	subs	r3, #1
 800320c:	4a0b      	ldr	r2, [pc, #44]	; (800323c <prvCheckTasksWaitingTermination+0x54>)
 800320e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <prvCheckTasksWaitingTermination+0x58>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3b01      	subs	r3, #1
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <prvCheckTasksWaitingTermination+0x58>)
 8003218:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800321a:	f000 fa2b 	bl	8003674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f810 	bl	8003244 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <prvCheckTasksWaitingTermination+0x58>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e1      	bne.n	80031f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200004b8 	.word	0x200004b8
 800323c:	200004e4 	.word	0x200004e4
 8003240:	200004cc 	.word	0x200004cc

08003244 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	334c      	adds	r3, #76	; 0x4c
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fe91 	bl	8003f78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d108      	bne.n	8003272 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fb83 	bl	8003970 <vPortFree>
				vPortFree( pxTCB );
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fb80 	bl	8003970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003270:	e018      	b.n	80032a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d103      	bne.n	8003284 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fb77 	bl	8003970 <vPortFree>
	}
 8003282:	e00f      	b.n	80032a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800328a:	2b02      	cmp	r3, #2
 800328c:	d00a      	beq.n	80032a4 <prvDeleteTCB+0x60>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	60fb      	str	r3, [r7, #12]
}
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <prvDeleteTCB+0x5e>
	}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <prvResetNextTaskUnblockTime+0x38>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d104      	bne.n	80032c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <prvResetNextTaskUnblockTime+0x3c>)
 80032be:	f04f 32ff 	mov.w	r2, #4294967295
 80032c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032c4:	e008      	b.n	80032d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <prvResetNextTaskUnblockTime+0x38>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <prvResetNextTaskUnblockTime+0x3c>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	2000049c 	.word	0x2000049c
 80032e8:	20000504 	.word	0x20000504

080032ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <prvAddCurrentTaskToDelayedList+0xb0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032fc:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3304      	adds	r3, #4
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fae1 	bl	80028ca <uxListRemove>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2201      	movs	r2, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4013      	ands	r3, r2
 8003322:	4a20      	ldr	r2, [pc, #128]	; (80033a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003324:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d10a      	bne.n	8003344 <prvAddCurrentTaskToDelayedList+0x58>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3304      	adds	r3, #4
 800333a:	4619      	mov	r1, r3
 800333c:	481a      	ldr	r0, [pc, #104]	; (80033a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800333e:	f7ff fa67 	bl	8002810 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003342:	e026      	b.n	8003392 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	429a      	cmp	r2, r3
 800335a:	d209      	bcs.n	8003370 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3304      	adds	r3, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f7ff fa75 	bl	8002858 <vListInsert>
}
 800336e:	e010      	b.n	8003392 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3304      	adds	r3, #4
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7ff fa6b 	bl	8002858 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	429a      	cmp	r2, r3
 800338a:	d202      	bcs.n	8003392 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800338c:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6013      	str	r3, [r2, #0]
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200004e8 	.word	0x200004e8
 80033a0:	200003e4 	.word	0x200003e4
 80033a4:	200004ec 	.word	0x200004ec
 80033a8:	200004d0 	.word	0x200004d0
 80033ac:	200004a0 	.word	0x200004a0
 80033b0:	2000049c 	.word	0x2000049c
 80033b4:	20000504 	.word	0x20000504

080033b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3b04      	subs	r3, #4
 80033c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3b04      	subs	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f023 0201 	bic.w	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3b04      	subs	r3, #4
 80033e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033e8:	4a0c      	ldr	r2, [pc, #48]	; (800341c <pxPortInitialiseStack+0x64>)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3b14      	subs	r3, #20
 80033f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3b04      	subs	r3, #4
 80033fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f06f 0202 	mvn.w	r2, #2
 8003406:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3b20      	subs	r3, #32
 800340c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	08003421 	.word	0x08003421

08003420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <prvTaskExitError+0x54>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d00a      	beq.n	800344a <prvTaskExitError+0x2a>
	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	60fb      	str	r3, [r7, #12]
}
 8003446:	bf00      	nop
 8003448:	e7fe      	b.n	8003448 <prvTaskExitError+0x28>
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	60bb      	str	r3, [r7, #8]
}
 800345c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800345e:	bf00      	nop
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0fc      	beq.n	8003460 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003466:	bf00      	nop
 8003468:	bf00      	nop
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	2000000c 	.word	0x2000000c
	...

08003480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <pxCurrentTCBConst2>)
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	6808      	ldr	r0, [r1, #0]
 8003486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348a:	f380 8809 	msr	PSP, r0
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f04f 0000 	mov.w	r0, #0
 8003496:	f380 8811 	msr	BASEPRI, r0
 800349a:	4770      	bx	lr
 800349c:	f3af 8000 	nop.w

080034a0 <pxCurrentTCBConst2>:
 80034a0:	200003e4 	.word	0x200003e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop

080034a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80034a8:	4808      	ldr	r0, [pc, #32]	; (80034cc <prvPortStartFirstTask+0x24>)
 80034aa:	6800      	ldr	r0, [r0, #0]
 80034ac:	6800      	ldr	r0, [r0, #0]
 80034ae:	f380 8808 	msr	MSP, r0
 80034b2:	f04f 0000 	mov.w	r0, #0
 80034b6:	f380 8814 	msr	CONTROL, r0
 80034ba:	b662      	cpsie	i
 80034bc:	b661      	cpsie	f
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	df00      	svc	0
 80034c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80034ca:	bf00      	nop
 80034cc:	e000ed08 	.word	0xe000ed08

080034d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80034d6:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <xPortStartScheduler+0x120>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a46      	ldr	r2, [pc, #280]	; (80035f4 <xPortStartScheduler+0x124>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10a      	bne.n	80034f6 <xPortStartScheduler+0x26>
	__asm volatile
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	613b      	str	r3, [r7, #16]
}
 80034f2:	bf00      	nop
 80034f4:	e7fe      	b.n	80034f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80034f6:	4b3e      	ldr	r3, [pc, #248]	; (80035f0 <xPortStartScheduler+0x120>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a3f      	ldr	r2, [pc, #252]	; (80035f8 <xPortStartScheduler+0x128>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10a      	bne.n	8003516 <xPortStartScheduler+0x46>
	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	60fb      	str	r3, [r7, #12]
}
 8003512:	bf00      	nop
 8003514:	e7fe      	b.n	8003514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003516:	4b39      	ldr	r3, [pc, #228]	; (80035fc <xPortStartScheduler+0x12c>)
 8003518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	22ff      	movs	r2, #255	; 0xff
 8003526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <xPortStartScheduler+0x130>)
 800353c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <xPortStartScheduler+0x134>)
 8003540:	2207      	movs	r2, #7
 8003542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003544:	e009      	b.n	800355a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003546:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <xPortStartScheduler+0x134>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3b01      	subs	r3, #1
 800354c:	4a2d      	ldr	r2, [pc, #180]	; (8003604 <xPortStartScheduler+0x134>)
 800354e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003562:	2b80      	cmp	r3, #128	; 0x80
 8003564:	d0ef      	beq.n	8003546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003566:	4b27      	ldr	r3, [pc, #156]	; (8003604 <xPortStartScheduler+0x134>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1c3 0307 	rsb	r3, r3, #7
 800356e:	2b04      	cmp	r3, #4
 8003570:	d00a      	beq.n	8003588 <xPortStartScheduler+0xb8>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	60bb      	str	r3, [r7, #8]
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003588:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <xPortStartScheduler+0x134>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <xPortStartScheduler+0x134>)
 8003590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <xPortStartScheduler+0x134>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800359a:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <xPortStartScheduler+0x134>)
 800359c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035a6:	4b18      	ldr	r3, [pc, #96]	; (8003608 <xPortStartScheduler+0x138>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a17      	ldr	r2, [pc, #92]	; (8003608 <xPortStartScheduler+0x138>)
 80035ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035b2:	4b15      	ldr	r3, [pc, #84]	; (8003608 <xPortStartScheduler+0x138>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a14      	ldr	r2, [pc, #80]	; (8003608 <xPortStartScheduler+0x138>)
 80035b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80035bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035be:	f000 f8dd 	bl	800377c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <xPortStartScheduler+0x13c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80035c8:	f000 f8fc 	bl	80037c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <xPortStartScheduler+0x140>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <xPortStartScheduler+0x140>)
 80035d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80035d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035d8:	f7ff ff66 	bl	80034a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035dc:	f7ff fd4a 	bl	8003074 <vTaskSwitchContext>
	prvTaskExitError();
 80035e0:	f7ff ff1e 	bl	8003420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	e000ed00 	.word	0xe000ed00
 80035f4:	410fc271 	.word	0x410fc271
 80035f8:	410fc270 	.word	0x410fc270
 80035fc:	e000e400 	.word	0xe000e400
 8003600:	20000510 	.word	0x20000510
 8003604:	20000514 	.word	0x20000514
 8003608:	e000ed20 	.word	0xe000ed20
 800360c:	2000000c 	.word	0x2000000c
 8003610:	e000ef34 	.word	0xe000ef34

08003614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	607b      	str	r3, [r7, #4]
}
 800362c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800362e:	4b0f      	ldr	r3, [pc, #60]	; (800366c <vPortEnterCritical+0x58>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3301      	adds	r3, #1
 8003634:	4a0d      	ldr	r2, [pc, #52]	; (800366c <vPortEnterCritical+0x58>)
 8003636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <vPortEnterCritical+0x58>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d10f      	bne.n	8003660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <vPortEnterCritical+0x5c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <vPortEnterCritical+0x4c>
	__asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	603b      	str	r3, [r7, #0]
}
 800365c:	bf00      	nop
 800365e:	e7fe      	b.n	800365e <vPortEnterCritical+0x4a>
	}
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	2000000c 	.word	0x2000000c
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <vPortExitCritical+0x50>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <vPortExitCritical+0x24>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	607b      	str	r3, [r7, #4]
}
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <vPortExitCritical+0x50>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3b01      	subs	r3, #1
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <vPortExitCritical+0x50>)
 80036a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <vPortExitCritical+0x50>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <vPortExitCritical+0x42>
 80036aa:	2300      	movs	r3, #0
 80036ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	2000000c 	.word	0x2000000c
	...

080036d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036d0:	f3ef 8009 	mrs	r0, PSP
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <pxCurrentTCBConst>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	f01e 0f10 	tst.w	lr, #16
 80036e0:	bf08      	it	eq
 80036e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ea:	6010      	str	r0, [r2, #0]
 80036ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80036f4:	f380 8811 	msr	BASEPRI, r0
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f7ff fcb8 	bl	8003074 <vTaskSwitchContext>
 8003704:	f04f 0000 	mov.w	r0, #0
 8003708:	f380 8811 	msr	BASEPRI, r0
 800370c:	bc09      	pop	{r0, r3}
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	6808      	ldr	r0, [r1, #0]
 8003712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003716:	f01e 0f10 	tst.w	lr, #16
 800371a:	bf08      	it	eq
 800371c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003720:	f380 8809 	msr	PSP, r0
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	f3af 8000 	nop.w

08003730 <pxCurrentTCBConst>:
 8003730:	200003e4 	.word	0x200003e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop

08003738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	607b      	str	r3, [r7, #4]
}
 8003750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003752:	f7ff fbd7 	bl	8002f04 <xTaskIncrementTick>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <SysTick_Handler+0x40>)
 800375e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	2300      	movs	r3, #0
 8003766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f383 8811 	msr	BASEPRI, r3
}
 800376e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	e000ed04 	.word	0xe000ed04

0800377c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <vPortSetupTimerInterrupt+0x34>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <vPortSetupTimerInterrupt+0x38>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <vPortSetupTimerInterrupt+0x3c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <vPortSetupTimerInterrupt+0x40>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <vPortSetupTimerInterrupt+0x44>)
 800379a:	3b01      	subs	r3, #1
 800379c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <vPortSetupTimerInterrupt+0x34>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000e010 	.word	0xe000e010
 80037b4:	e000e018 	.word	0xe000e018
 80037b8:	20000000 	.word	0x20000000
 80037bc:	10624dd3 	.word	0x10624dd3
 80037c0:	e000e014 	.word	0xe000e014

080037c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037d4 <vPortEnableVFP+0x10>
 80037c8:	6801      	ldr	r1, [r0, #0]
 80037ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037ce:	6001      	str	r1, [r0, #0]
 80037d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037d2:	bf00      	nop
 80037d4:	e000ed88 	.word	0xe000ed88

080037d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80037e4:	f7ff fae4 	bl	8002db0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80037e8:	4b5b      	ldr	r3, [pc, #364]	; (8003958 <pvPortMalloc+0x180>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80037f0:	f000 f920 	bl	8003a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037f4:	4b59      	ldr	r3, [pc, #356]	; (800395c <pvPortMalloc+0x184>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f040 8093 	bne.w	8003928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01d      	beq.n	8003844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003808:	2208      	movs	r2, #8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	2b00      	cmp	r3, #0
 8003818:	d014      	beq.n	8003844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f023 0307 	bic.w	r3, r3, #7
 8003820:	3308      	adds	r3, #8
 8003822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <pvPortMalloc+0x6c>
	__asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	617b      	str	r3, [r7, #20]
}
 8003840:	bf00      	nop
 8003842:	e7fe      	b.n	8003842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d06e      	beq.n	8003928 <pvPortMalloc+0x150>
 800384a:	4b45      	ldr	r3, [pc, #276]	; (8003960 <pvPortMalloc+0x188>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d869      	bhi.n	8003928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003854:	4b43      	ldr	r3, [pc, #268]	; (8003964 <pvPortMalloc+0x18c>)
 8003856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003858:	4b42      	ldr	r3, [pc, #264]	; (8003964 <pvPortMalloc+0x18c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800385e:	e004      	b.n	800386a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	429a      	cmp	r2, r3
 8003872:	d903      	bls.n	800387c <pvPortMalloc+0xa4>
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f1      	bne.n	8003860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800387c:	4b36      	ldr	r3, [pc, #216]	; (8003958 <pvPortMalloc+0x180>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	429a      	cmp	r2, r3
 8003884:	d050      	beq.n	8003928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2208      	movs	r2, #8
 800388c:	4413      	add	r3, r2
 800388e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	1ad2      	subs	r2, r2, r3
 80038a0:	2308      	movs	r3, #8
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d91f      	bls.n	80038e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <pvPortMalloc+0xf8>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	613b      	str	r3, [r7, #16]
}
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	1ad2      	subs	r2, r2, r3
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038e2:	69b8      	ldr	r0, [r7, #24]
 80038e4:	f000 f908 	bl	8003af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <pvPortMalloc+0x188>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <pvPortMalloc+0x188>)
 80038f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038f6:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <pvPortMalloc+0x188>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <pvPortMalloc+0x190>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d203      	bcs.n	800390a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003902:	4b17      	ldr	r3, [pc, #92]	; (8003960 <pvPortMalloc+0x188>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <pvPortMalloc+0x190>)
 8003908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <pvPortMalloc+0x184>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	431a      	orrs	r2, r3
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <pvPortMalloc+0x194>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	4a11      	ldr	r2, [pc, #68]	; (800396c <pvPortMalloc+0x194>)
 8003926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003928:	f7ff fa50 	bl	8002dcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <pvPortMalloc+0x174>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	60fb      	str	r3, [r7, #12]
}
 8003948:	bf00      	nop
 800394a:	e7fe      	b.n	800394a <pvPortMalloc+0x172>
	return pvReturn;
 800394c:	69fb      	ldr	r3, [r7, #28]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3728      	adds	r7, #40	; 0x28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20004120 	.word	0x20004120
 800395c:	20004134 	.word	0x20004134
 8003960:	20004124 	.word	0x20004124
 8003964:	20004118 	.word	0x20004118
 8003968:	20004128 	.word	0x20004128
 800396c:	2000412c 	.word	0x2000412c

08003970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d04d      	beq.n	8003a1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003982:	2308      	movs	r3, #8
 8003984:	425b      	negs	r3, r3
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4413      	add	r3, r2
 800398a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <vPortFree+0xb8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <vPortFree+0x44>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	60fb      	str	r3, [r7, #12]
}
 80039b0:	bf00      	nop
 80039b2:	e7fe      	b.n	80039b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <vPortFree+0x62>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	60bb      	str	r3, [r7, #8]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <vPortFree+0xb8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01e      	beq.n	8003a1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d11a      	bne.n	8003a1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <vPortFree+0xb8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80039f8:	f7ff f9da 	bl	8002db0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <vPortFree+0xbc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4413      	add	r3, r2
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <vPortFree+0xbc>)
 8003a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a0a:	6938      	ldr	r0, [r7, #16]
 8003a0c:	f000 f874 	bl	8003af8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <vPortFree+0xc0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3301      	adds	r3, #1
 8003a16:	4a06      	ldr	r2, [pc, #24]	; (8003a30 <vPortFree+0xc0>)
 8003a18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003a1a:	f7ff f9d7 	bl	8002dcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a1e:	bf00      	nop
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20004134 	.word	0x20004134
 8003a2c:	20004124 	.word	0x20004124
 8003a30:	20004130 	.word	0x20004130

08003a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a40:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <prvHeapInit+0xac>)
 8003a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3307      	adds	r3, #7
 8003a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0307 	bic.w	r3, r3, #7
 8003a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	4a1f      	ldr	r2, [pc, #124]	; (8003ae0 <prvHeapInit+0xac>)
 8003a64:	4413      	add	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <prvHeapInit+0xb0>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <prvHeapInit+0xb0>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a80:	2208      	movs	r2, #8
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <prvHeapInit+0xb4>)
 8003a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a96:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <prvHeapInit+0xb4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a9e:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <prvHeapInit+0xb4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	1ad2      	subs	r2, r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <prvHeapInit+0xb4>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <prvHeapInit+0xb8>)
 8003ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <prvHeapInit+0xbc>)
 8003aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003acc:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <prvHeapInit+0xc0>)
 8003ace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ad2:	601a      	str	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	20000518 	.word	0x20000518
 8003ae4:	20004118 	.word	0x20004118
 8003ae8:	20004120 	.word	0x20004120
 8003aec:	20004128 	.word	0x20004128
 8003af0:	20004124 	.word	0x20004124
 8003af4:	20004134 	.word	0x20004134

08003af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b00:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <prvInsertBlockIntoFreeList+0xac>)
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	e002      	b.n	8003b0c <prvInsertBlockIntoFreeList+0x14>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d8f7      	bhi.n	8003b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	4413      	add	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d108      	bne.n	8003b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	441a      	add	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	441a      	add	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d118      	bne.n	8003b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d00d      	beq.n	8003b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	441a      	add	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e008      	b.n	8003b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e003      	b.n	8003b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d002      	beq.n	8003b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20004118 	.word	0x20004118
 8003ba8:	20004120 	.word	0x20004120

08003bac <__errno>:
 8003bac:	4b01      	ldr	r3, [pc, #4]	; (8003bb4 <__errno+0x8>)
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000010 	.word	0x20000010

08003bb8 <std>:
 8003bb8:	2300      	movs	r3, #0
 8003bba:	b510      	push	{r4, lr}
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8003bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bc6:	6083      	str	r3, [r0, #8]
 8003bc8:	8181      	strh	r1, [r0, #12]
 8003bca:	6643      	str	r3, [r0, #100]	; 0x64
 8003bcc:	81c2      	strh	r2, [r0, #14]
 8003bce:	6183      	str	r3, [r0, #24]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	305c      	adds	r0, #92	; 0x5c
 8003bd6:	f000 f90c 	bl	8003df2 <memset>
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <std+0x38>)
 8003bdc:	6263      	str	r3, [r4, #36]	; 0x24
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <std+0x3c>)
 8003be0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <std+0x40>)
 8003be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <std+0x44>)
 8003be8:	6224      	str	r4, [r4, #32]
 8003bea:	6323      	str	r3, [r4, #48]	; 0x30
 8003bec:	bd10      	pop	{r4, pc}
 8003bee:	bf00      	nop
 8003bf0:	08004051 	.word	0x08004051
 8003bf4:	08004073 	.word	0x08004073
 8003bf8:	080040ab 	.word	0x080040ab
 8003bfc:	080040cf 	.word	0x080040cf

08003c00 <_cleanup_r>:
 8003c00:	4901      	ldr	r1, [pc, #4]	; (8003c08 <_cleanup_r+0x8>)
 8003c02:	f000 b8af 	b.w	8003d64 <_fwalk_reent>
 8003c06:	bf00      	nop
 8003c08:	08004229 	.word	0x08004229

08003c0c <__sfmoreglue>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	2268      	movs	r2, #104	; 0x68
 8003c10:	1e4d      	subs	r5, r1, #1
 8003c12:	4355      	muls	r5, r2
 8003c14:	460e      	mov	r6, r1
 8003c16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c1a:	f000 f913 	bl	8003e44 <_malloc_r>
 8003c1e:	4604      	mov	r4, r0
 8003c20:	b140      	cbz	r0, 8003c34 <__sfmoreglue+0x28>
 8003c22:	2100      	movs	r1, #0
 8003c24:	e9c0 1600 	strd	r1, r6, [r0]
 8003c28:	300c      	adds	r0, #12
 8003c2a:	60a0      	str	r0, [r4, #8]
 8003c2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c30:	f000 f8df 	bl	8003df2 <memset>
 8003c34:	4620      	mov	r0, r4
 8003c36:	bd70      	pop	{r4, r5, r6, pc}

08003c38 <__sfp_lock_acquire>:
 8003c38:	4801      	ldr	r0, [pc, #4]	; (8003c40 <__sfp_lock_acquire+0x8>)
 8003c3a:	f000 b8d8 	b.w	8003dee <__retarget_lock_acquire_recursive>
 8003c3e:	bf00      	nop
 8003c40:	20004139 	.word	0x20004139

08003c44 <__sfp_lock_release>:
 8003c44:	4801      	ldr	r0, [pc, #4]	; (8003c4c <__sfp_lock_release+0x8>)
 8003c46:	f000 b8d3 	b.w	8003df0 <__retarget_lock_release_recursive>
 8003c4a:	bf00      	nop
 8003c4c:	20004139 	.word	0x20004139

08003c50 <__sinit_lock_acquire>:
 8003c50:	4801      	ldr	r0, [pc, #4]	; (8003c58 <__sinit_lock_acquire+0x8>)
 8003c52:	f000 b8cc 	b.w	8003dee <__retarget_lock_acquire_recursive>
 8003c56:	bf00      	nop
 8003c58:	2000413a 	.word	0x2000413a

08003c5c <__sinit_lock_release>:
 8003c5c:	4801      	ldr	r0, [pc, #4]	; (8003c64 <__sinit_lock_release+0x8>)
 8003c5e:	f000 b8c7 	b.w	8003df0 <__retarget_lock_release_recursive>
 8003c62:	bf00      	nop
 8003c64:	2000413a 	.word	0x2000413a

08003c68 <__sinit>:
 8003c68:	b510      	push	{r4, lr}
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	f7ff fff0 	bl	8003c50 <__sinit_lock_acquire>
 8003c70:	69a3      	ldr	r3, [r4, #24]
 8003c72:	b11b      	cbz	r3, 8003c7c <__sinit+0x14>
 8003c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c78:	f7ff bff0 	b.w	8003c5c <__sinit_lock_release>
 8003c7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c80:	6523      	str	r3, [r4, #80]	; 0x50
 8003c82:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <__sinit+0x68>)
 8003c84:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <__sinit+0x6c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c8a:	42a3      	cmp	r3, r4
 8003c8c:	bf04      	itt	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	61a3      	streq	r3, [r4, #24]
 8003c92:	4620      	mov	r0, r4
 8003c94:	f000 f820 	bl	8003cd8 <__sfp>
 8003c98:	6060      	str	r0, [r4, #4]
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f000 f81c 	bl	8003cd8 <__sfp>
 8003ca0:	60a0      	str	r0, [r4, #8]
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f000 f818 	bl	8003cd8 <__sfp>
 8003ca8:	2200      	movs	r2, #0
 8003caa:	60e0      	str	r0, [r4, #12]
 8003cac:	2104      	movs	r1, #4
 8003cae:	6860      	ldr	r0, [r4, #4]
 8003cb0:	f7ff ff82 	bl	8003bb8 <std>
 8003cb4:	68a0      	ldr	r0, [r4, #8]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	2109      	movs	r1, #9
 8003cba:	f7ff ff7d 	bl	8003bb8 <std>
 8003cbe:	68e0      	ldr	r0, [r4, #12]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	2112      	movs	r1, #18
 8003cc4:	f7ff ff78 	bl	8003bb8 <std>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	61a3      	str	r3, [r4, #24]
 8003ccc:	e7d2      	b.n	8003c74 <__sinit+0xc>
 8003cce:	bf00      	nop
 8003cd0:	08004d50 	.word	0x08004d50
 8003cd4:	08003c01 	.word	0x08003c01

08003cd8 <__sfp>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	4607      	mov	r7, r0
 8003cdc:	f7ff ffac 	bl	8003c38 <__sfp_lock_acquire>
 8003ce0:	4b1e      	ldr	r3, [pc, #120]	; (8003d5c <__sfp+0x84>)
 8003ce2:	681e      	ldr	r6, [r3, #0]
 8003ce4:	69b3      	ldr	r3, [r6, #24]
 8003ce6:	b913      	cbnz	r3, 8003cee <__sfp+0x16>
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f7ff ffbd 	bl	8003c68 <__sinit>
 8003cee:	3648      	adds	r6, #72	; 0x48
 8003cf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	d503      	bpl.n	8003d00 <__sfp+0x28>
 8003cf8:	6833      	ldr	r3, [r6, #0]
 8003cfa:	b30b      	cbz	r3, 8003d40 <__sfp+0x68>
 8003cfc:	6836      	ldr	r6, [r6, #0]
 8003cfe:	e7f7      	b.n	8003cf0 <__sfp+0x18>
 8003d00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d04:	b9d5      	cbnz	r5, 8003d3c <__sfp+0x64>
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <__sfp+0x88>)
 8003d08:	60e3      	str	r3, [r4, #12]
 8003d0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d0e:	6665      	str	r5, [r4, #100]	; 0x64
 8003d10:	f000 f86c 	bl	8003dec <__retarget_lock_init_recursive>
 8003d14:	f7ff ff96 	bl	8003c44 <__sfp_lock_release>
 8003d18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d20:	6025      	str	r5, [r4, #0]
 8003d22:	61a5      	str	r5, [r4, #24]
 8003d24:	2208      	movs	r2, #8
 8003d26:	4629      	mov	r1, r5
 8003d28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d2c:	f000 f861 	bl	8003df2 <memset>
 8003d30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d38:	4620      	mov	r0, r4
 8003d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d3c:	3468      	adds	r4, #104	; 0x68
 8003d3e:	e7d9      	b.n	8003cf4 <__sfp+0x1c>
 8003d40:	2104      	movs	r1, #4
 8003d42:	4638      	mov	r0, r7
 8003d44:	f7ff ff62 	bl	8003c0c <__sfmoreglue>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	6030      	str	r0, [r6, #0]
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d1d5      	bne.n	8003cfc <__sfp+0x24>
 8003d50:	f7ff ff78 	bl	8003c44 <__sfp_lock_release>
 8003d54:	230c      	movs	r3, #12
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	e7ee      	b.n	8003d38 <__sfp+0x60>
 8003d5a:	bf00      	nop
 8003d5c:	08004d50 	.word	0x08004d50
 8003d60:	ffff0001 	.word	0xffff0001

08003d64 <_fwalk_reent>:
 8003d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d68:	4606      	mov	r6, r0
 8003d6a:	4688      	mov	r8, r1
 8003d6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d70:	2700      	movs	r7, #0
 8003d72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d76:	f1b9 0901 	subs.w	r9, r9, #1
 8003d7a:	d505      	bpl.n	8003d88 <_fwalk_reent+0x24>
 8003d7c:	6824      	ldr	r4, [r4, #0]
 8003d7e:	2c00      	cmp	r4, #0
 8003d80:	d1f7      	bne.n	8003d72 <_fwalk_reent+0xe>
 8003d82:	4638      	mov	r0, r7
 8003d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d88:	89ab      	ldrh	r3, [r5, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d907      	bls.n	8003d9e <_fwalk_reent+0x3a>
 8003d8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d92:	3301      	adds	r3, #1
 8003d94:	d003      	beq.n	8003d9e <_fwalk_reent+0x3a>
 8003d96:	4629      	mov	r1, r5
 8003d98:	4630      	mov	r0, r6
 8003d9a:	47c0      	blx	r8
 8003d9c:	4307      	orrs	r7, r0
 8003d9e:	3568      	adds	r5, #104	; 0x68
 8003da0:	e7e9      	b.n	8003d76 <_fwalk_reent+0x12>
	...

08003da4 <__libc_init_array>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	4d0d      	ldr	r5, [pc, #52]	; (8003ddc <__libc_init_array+0x38>)
 8003da8:	4c0d      	ldr	r4, [pc, #52]	; (8003de0 <__libc_init_array+0x3c>)
 8003daa:	1b64      	subs	r4, r4, r5
 8003dac:	10a4      	asrs	r4, r4, #2
 8003dae:	2600      	movs	r6, #0
 8003db0:	42a6      	cmp	r6, r4
 8003db2:	d109      	bne.n	8003dc8 <__libc_init_array+0x24>
 8003db4:	4d0b      	ldr	r5, [pc, #44]	; (8003de4 <__libc_init_array+0x40>)
 8003db6:	4c0c      	ldr	r4, [pc, #48]	; (8003de8 <__libc_init_array+0x44>)
 8003db8:	f000 ff24 	bl	8004c04 <_init>
 8003dbc:	1b64      	subs	r4, r4, r5
 8003dbe:	10a4      	asrs	r4, r4, #2
 8003dc0:	2600      	movs	r6, #0
 8003dc2:	42a6      	cmp	r6, r4
 8003dc4:	d105      	bne.n	8003dd2 <__libc_init_array+0x2e>
 8003dc6:	bd70      	pop	{r4, r5, r6, pc}
 8003dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dcc:	4798      	blx	r3
 8003dce:	3601      	adds	r6, #1
 8003dd0:	e7ee      	b.n	8003db0 <__libc_init_array+0xc>
 8003dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd6:	4798      	blx	r3
 8003dd8:	3601      	adds	r6, #1
 8003dda:	e7f2      	b.n	8003dc2 <__libc_init_array+0x1e>
 8003ddc:	08004d90 	.word	0x08004d90
 8003de0:	08004d90 	.word	0x08004d90
 8003de4:	08004d90 	.word	0x08004d90
 8003de8:	08004d94 	.word	0x08004d94

08003dec <__retarget_lock_init_recursive>:
 8003dec:	4770      	bx	lr

08003dee <__retarget_lock_acquire_recursive>:
 8003dee:	4770      	bx	lr

08003df0 <__retarget_lock_release_recursive>:
 8003df0:	4770      	bx	lr

08003df2 <memset>:
 8003df2:	4402      	add	r2, r0
 8003df4:	4603      	mov	r3, r0
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d100      	bne.n	8003dfc <memset+0xa>
 8003dfa:	4770      	bx	lr
 8003dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8003e00:	e7f9      	b.n	8003df6 <memset+0x4>
	...

08003e04 <sbrk_aligned>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4e0e      	ldr	r6, [pc, #56]	; (8003e40 <sbrk_aligned+0x3c>)
 8003e08:	460c      	mov	r4, r1
 8003e0a:	6831      	ldr	r1, [r6, #0]
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	b911      	cbnz	r1, 8003e16 <sbrk_aligned+0x12>
 8003e10:	f000 f90e 	bl	8004030 <_sbrk_r>
 8003e14:	6030      	str	r0, [r6, #0]
 8003e16:	4621      	mov	r1, r4
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f000 f909 	bl	8004030 <_sbrk_r>
 8003e1e:	1c43      	adds	r3, r0, #1
 8003e20:	d00a      	beq.n	8003e38 <sbrk_aligned+0x34>
 8003e22:	1cc4      	adds	r4, r0, #3
 8003e24:	f024 0403 	bic.w	r4, r4, #3
 8003e28:	42a0      	cmp	r0, r4
 8003e2a:	d007      	beq.n	8003e3c <sbrk_aligned+0x38>
 8003e2c:	1a21      	subs	r1, r4, r0
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f000 f8fe 	bl	8004030 <_sbrk_r>
 8003e34:	3001      	adds	r0, #1
 8003e36:	d101      	bne.n	8003e3c <sbrk_aligned+0x38>
 8003e38:	f04f 34ff 	mov.w	r4, #4294967295
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
 8003e40:	20004140 	.word	0x20004140

08003e44 <_malloc_r>:
 8003e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e48:	1ccd      	adds	r5, r1, #3
 8003e4a:	f025 0503 	bic.w	r5, r5, #3
 8003e4e:	3508      	adds	r5, #8
 8003e50:	2d0c      	cmp	r5, #12
 8003e52:	bf38      	it	cc
 8003e54:	250c      	movcc	r5, #12
 8003e56:	2d00      	cmp	r5, #0
 8003e58:	4607      	mov	r7, r0
 8003e5a:	db01      	blt.n	8003e60 <_malloc_r+0x1c>
 8003e5c:	42a9      	cmp	r1, r5
 8003e5e:	d905      	bls.n	8003e6c <_malloc_r+0x28>
 8003e60:	230c      	movs	r3, #12
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	2600      	movs	r6, #0
 8003e66:	4630      	mov	r0, r6
 8003e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e6c:	4e2e      	ldr	r6, [pc, #184]	; (8003f28 <_malloc_r+0xe4>)
 8003e6e:	f000 fa29 	bl	80042c4 <__malloc_lock>
 8003e72:	6833      	ldr	r3, [r6, #0]
 8003e74:	461c      	mov	r4, r3
 8003e76:	bb34      	cbnz	r4, 8003ec6 <_malloc_r+0x82>
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	f7ff ffc2 	bl	8003e04 <sbrk_aligned>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	4604      	mov	r4, r0
 8003e84:	d14d      	bne.n	8003f22 <_malloc_r+0xde>
 8003e86:	6834      	ldr	r4, [r6, #0]
 8003e88:	4626      	mov	r6, r4
 8003e8a:	2e00      	cmp	r6, #0
 8003e8c:	d140      	bne.n	8003f10 <_malloc_r+0xcc>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	4631      	mov	r1, r6
 8003e92:	4638      	mov	r0, r7
 8003e94:	eb04 0803 	add.w	r8, r4, r3
 8003e98:	f000 f8ca 	bl	8004030 <_sbrk_r>
 8003e9c:	4580      	cmp	r8, r0
 8003e9e:	d13a      	bne.n	8003f16 <_malloc_r+0xd2>
 8003ea0:	6821      	ldr	r1, [r4, #0]
 8003ea2:	3503      	adds	r5, #3
 8003ea4:	1a6d      	subs	r5, r5, r1
 8003ea6:	f025 0503 	bic.w	r5, r5, #3
 8003eaa:	3508      	adds	r5, #8
 8003eac:	2d0c      	cmp	r5, #12
 8003eae:	bf38      	it	cc
 8003eb0:	250c      	movcc	r5, #12
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f7ff ffa5 	bl	8003e04 <sbrk_aligned>
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d02b      	beq.n	8003f16 <_malloc_r+0xd2>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	442b      	add	r3, r5
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	e00e      	b.n	8003ee4 <_malloc_r+0xa0>
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	1b52      	subs	r2, r2, r5
 8003eca:	d41e      	bmi.n	8003f0a <_malloc_r+0xc6>
 8003ecc:	2a0b      	cmp	r2, #11
 8003ece:	d916      	bls.n	8003efe <_malloc_r+0xba>
 8003ed0:	1961      	adds	r1, r4, r5
 8003ed2:	42a3      	cmp	r3, r4
 8003ed4:	6025      	str	r5, [r4, #0]
 8003ed6:	bf18      	it	ne
 8003ed8:	6059      	strne	r1, [r3, #4]
 8003eda:	6863      	ldr	r3, [r4, #4]
 8003edc:	bf08      	it	eq
 8003ede:	6031      	streq	r1, [r6, #0]
 8003ee0:	5162      	str	r2, [r4, r5]
 8003ee2:	604b      	str	r3, [r1, #4]
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f104 060b 	add.w	r6, r4, #11
 8003eea:	f000 f9f1 	bl	80042d0 <__malloc_unlock>
 8003eee:	f026 0607 	bic.w	r6, r6, #7
 8003ef2:	1d23      	adds	r3, r4, #4
 8003ef4:	1af2      	subs	r2, r6, r3
 8003ef6:	d0b6      	beq.n	8003e66 <_malloc_r+0x22>
 8003ef8:	1b9b      	subs	r3, r3, r6
 8003efa:	50a3      	str	r3, [r4, r2]
 8003efc:	e7b3      	b.n	8003e66 <_malloc_r+0x22>
 8003efe:	6862      	ldr	r2, [r4, #4]
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	bf0c      	ite	eq
 8003f04:	6032      	streq	r2, [r6, #0]
 8003f06:	605a      	strne	r2, [r3, #4]
 8003f08:	e7ec      	b.n	8003ee4 <_malloc_r+0xa0>
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	6864      	ldr	r4, [r4, #4]
 8003f0e:	e7b2      	b.n	8003e76 <_malloc_r+0x32>
 8003f10:	4634      	mov	r4, r6
 8003f12:	6876      	ldr	r6, [r6, #4]
 8003f14:	e7b9      	b.n	8003e8a <_malloc_r+0x46>
 8003f16:	230c      	movs	r3, #12
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	f000 f9d8 	bl	80042d0 <__malloc_unlock>
 8003f20:	e7a1      	b.n	8003e66 <_malloc_r+0x22>
 8003f22:	6025      	str	r5, [r4, #0]
 8003f24:	e7de      	b.n	8003ee4 <_malloc_r+0xa0>
 8003f26:	bf00      	nop
 8003f28:	2000413c 	.word	0x2000413c

08003f2c <iprintf>:
 8003f2c:	b40f      	push	{r0, r1, r2, r3}
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <iprintf+0x2c>)
 8003f30:	b513      	push	{r0, r1, r4, lr}
 8003f32:	681c      	ldr	r4, [r3, #0]
 8003f34:	b124      	cbz	r4, 8003f40 <iprintf+0x14>
 8003f36:	69a3      	ldr	r3, [r4, #24]
 8003f38:	b913      	cbnz	r3, 8003f40 <iprintf+0x14>
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f7ff fe94 	bl	8003c68 <__sinit>
 8003f40:	ab05      	add	r3, sp, #20
 8003f42:	9a04      	ldr	r2, [sp, #16]
 8003f44:	68a1      	ldr	r1, [r4, #8]
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f000 fa3d 	bl	80043c8 <_vfiprintf_r>
 8003f4e:	b002      	add	sp, #8
 8003f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f54:	b004      	add	sp, #16
 8003f56:	4770      	bx	lr
 8003f58:	20000010 	.word	0x20000010

08003f5c <cleanup_glue>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	460c      	mov	r4, r1
 8003f60:	6809      	ldr	r1, [r1, #0]
 8003f62:	4605      	mov	r5, r0
 8003f64:	b109      	cbz	r1, 8003f6a <cleanup_glue+0xe>
 8003f66:	f7ff fff9 	bl	8003f5c <cleanup_glue>
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f72:	f000 b9b3 	b.w	80042dc <_free_r>
	...

08003f78 <_reclaim_reent>:
 8003f78:	4b2c      	ldr	r3, [pc, #176]	; (800402c <_reclaim_reent+0xb4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4283      	cmp	r3, r0
 8003f7e:	b570      	push	{r4, r5, r6, lr}
 8003f80:	4604      	mov	r4, r0
 8003f82:	d051      	beq.n	8004028 <_reclaim_reent+0xb0>
 8003f84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f86:	b143      	cbz	r3, 8003f9a <_reclaim_reent+0x22>
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d14a      	bne.n	8004024 <_reclaim_reent+0xac>
 8003f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f90:	6819      	ldr	r1, [r3, #0]
 8003f92:	b111      	cbz	r1, 8003f9a <_reclaim_reent+0x22>
 8003f94:	4620      	mov	r0, r4
 8003f96:	f000 f9a1 	bl	80042dc <_free_r>
 8003f9a:	6961      	ldr	r1, [r4, #20]
 8003f9c:	b111      	cbz	r1, 8003fa4 <_reclaim_reent+0x2c>
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f000 f99c 	bl	80042dc <_free_r>
 8003fa4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003fa6:	b111      	cbz	r1, 8003fae <_reclaim_reent+0x36>
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f000 f997 	bl	80042dc <_free_r>
 8003fae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003fb0:	b111      	cbz	r1, 8003fb8 <_reclaim_reent+0x40>
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f000 f992 	bl	80042dc <_free_r>
 8003fb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003fba:	b111      	cbz	r1, 8003fc2 <_reclaim_reent+0x4a>
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f000 f98d 	bl	80042dc <_free_r>
 8003fc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003fc4:	b111      	cbz	r1, 8003fcc <_reclaim_reent+0x54>
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f000 f988 	bl	80042dc <_free_r>
 8003fcc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003fce:	b111      	cbz	r1, 8003fd6 <_reclaim_reent+0x5e>
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f000 f983 	bl	80042dc <_free_r>
 8003fd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003fd8:	b111      	cbz	r1, 8003fe0 <_reclaim_reent+0x68>
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f000 f97e 	bl	80042dc <_free_r>
 8003fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fe2:	b111      	cbz	r1, 8003fea <_reclaim_reent+0x72>
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f000 f979 	bl	80042dc <_free_r>
 8003fea:	69a3      	ldr	r3, [r4, #24]
 8003fec:	b1e3      	cbz	r3, 8004028 <_reclaim_reent+0xb0>
 8003fee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	4798      	blx	r3
 8003ff4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003ff6:	b1b9      	cbz	r1, 8004028 <_reclaim_reent+0xb0>
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ffe:	f7ff bfad 	b.w	8003f5c <cleanup_glue>
 8004002:	5949      	ldr	r1, [r1, r5]
 8004004:	b941      	cbnz	r1, 8004018 <_reclaim_reent+0xa0>
 8004006:	3504      	adds	r5, #4
 8004008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800400a:	2d80      	cmp	r5, #128	; 0x80
 800400c:	68d9      	ldr	r1, [r3, #12]
 800400e:	d1f8      	bne.n	8004002 <_reclaim_reent+0x8a>
 8004010:	4620      	mov	r0, r4
 8004012:	f000 f963 	bl	80042dc <_free_r>
 8004016:	e7ba      	b.n	8003f8e <_reclaim_reent+0x16>
 8004018:	680e      	ldr	r6, [r1, #0]
 800401a:	4620      	mov	r0, r4
 800401c:	f000 f95e 	bl	80042dc <_free_r>
 8004020:	4631      	mov	r1, r6
 8004022:	e7ef      	b.n	8004004 <_reclaim_reent+0x8c>
 8004024:	2500      	movs	r5, #0
 8004026:	e7ef      	b.n	8004008 <_reclaim_reent+0x90>
 8004028:	bd70      	pop	{r4, r5, r6, pc}
 800402a:	bf00      	nop
 800402c:	20000010 	.word	0x20000010

08004030 <_sbrk_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4d06      	ldr	r5, [pc, #24]	; (800404c <_sbrk_r+0x1c>)
 8004034:	2300      	movs	r3, #0
 8004036:	4604      	mov	r4, r0
 8004038:	4608      	mov	r0, r1
 800403a:	602b      	str	r3, [r5, #0]
 800403c:	f7fc fe22 	bl	8000c84 <_sbrk>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_sbrk_r+0x1a>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_sbrk_r+0x1a>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	20004144 	.word	0x20004144

08004050 <__sread>:
 8004050:	b510      	push	{r4, lr}
 8004052:	460c      	mov	r4, r1
 8004054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004058:	f000 fc7a 	bl	8004950 <_read_r>
 800405c:	2800      	cmp	r0, #0
 800405e:	bfab      	itete	ge
 8004060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004062:	89a3      	ldrhlt	r3, [r4, #12]
 8004064:	181b      	addge	r3, r3, r0
 8004066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800406a:	bfac      	ite	ge
 800406c:	6563      	strge	r3, [r4, #84]	; 0x54
 800406e:	81a3      	strhlt	r3, [r4, #12]
 8004070:	bd10      	pop	{r4, pc}

08004072 <__swrite>:
 8004072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004076:	461f      	mov	r7, r3
 8004078:	898b      	ldrh	r3, [r1, #12]
 800407a:	05db      	lsls	r3, r3, #23
 800407c:	4605      	mov	r5, r0
 800407e:	460c      	mov	r4, r1
 8004080:	4616      	mov	r6, r2
 8004082:	d505      	bpl.n	8004090 <__swrite+0x1e>
 8004084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004088:	2302      	movs	r3, #2
 800408a:	2200      	movs	r2, #0
 800408c:	f000 f908 	bl	80042a0 <_lseek_r>
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800409a:	81a3      	strh	r3, [r4, #12]
 800409c:	4632      	mov	r2, r6
 800409e:	463b      	mov	r3, r7
 80040a0:	4628      	mov	r0, r5
 80040a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040a6:	f000 b817 	b.w	80040d8 <_write_r>

080040aa <__sseek>:
 80040aa:	b510      	push	{r4, lr}
 80040ac:	460c      	mov	r4, r1
 80040ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b2:	f000 f8f5 	bl	80042a0 <_lseek_r>
 80040b6:	1c43      	adds	r3, r0, #1
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	bf15      	itete	ne
 80040bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80040be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040c6:	81a3      	strheq	r3, [r4, #12]
 80040c8:	bf18      	it	ne
 80040ca:	81a3      	strhne	r3, [r4, #12]
 80040cc:	bd10      	pop	{r4, pc}

080040ce <__sclose>:
 80040ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d2:	f000 b813 	b.w	80040fc <_close_r>
	...

080040d8 <_write_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4d07      	ldr	r5, [pc, #28]	; (80040f8 <_write_r+0x20>)
 80040dc:	4604      	mov	r4, r0
 80040de:	4608      	mov	r0, r1
 80040e0:	4611      	mov	r1, r2
 80040e2:	2200      	movs	r2, #0
 80040e4:	602a      	str	r2, [r5, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f7fc fa8d 	bl	8000606 <_write>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_write_r+0x1e>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_write_r+0x1e>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	20004144 	.word	0x20004144

080040fc <_close_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4d06      	ldr	r5, [pc, #24]	; (8004118 <_close_r+0x1c>)
 8004100:	2300      	movs	r3, #0
 8004102:	4604      	mov	r4, r0
 8004104:	4608      	mov	r0, r1
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	f7fc fd87 	bl	8000c1a <_close>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_close_r+0x1a>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_close_r+0x1a>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	20004144 	.word	0x20004144

0800411c <__sflush_r>:
 800411c:	898a      	ldrh	r2, [r1, #12]
 800411e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004122:	4605      	mov	r5, r0
 8004124:	0710      	lsls	r0, r2, #28
 8004126:	460c      	mov	r4, r1
 8004128:	d458      	bmi.n	80041dc <__sflush_r+0xc0>
 800412a:	684b      	ldr	r3, [r1, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	dc05      	bgt.n	800413c <__sflush_r+0x20>
 8004130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	dc02      	bgt.n	800413c <__sflush_r+0x20>
 8004136:	2000      	movs	r0, #0
 8004138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800413c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800413e:	2e00      	cmp	r6, #0
 8004140:	d0f9      	beq.n	8004136 <__sflush_r+0x1a>
 8004142:	2300      	movs	r3, #0
 8004144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004148:	682f      	ldr	r7, [r5, #0]
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	d032      	beq.n	80041b4 <__sflush_r+0x98>
 800414e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	075a      	lsls	r2, r3, #29
 8004154:	d505      	bpl.n	8004162 <__sflush_r+0x46>
 8004156:	6863      	ldr	r3, [r4, #4]
 8004158:	1ac0      	subs	r0, r0, r3
 800415a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800415c:	b10b      	cbz	r3, 8004162 <__sflush_r+0x46>
 800415e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004160:	1ac0      	subs	r0, r0, r3
 8004162:	2300      	movs	r3, #0
 8004164:	4602      	mov	r2, r0
 8004166:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004168:	6a21      	ldr	r1, [r4, #32]
 800416a:	4628      	mov	r0, r5
 800416c:	47b0      	blx	r6
 800416e:	1c43      	adds	r3, r0, #1
 8004170:	89a3      	ldrh	r3, [r4, #12]
 8004172:	d106      	bne.n	8004182 <__sflush_r+0x66>
 8004174:	6829      	ldr	r1, [r5, #0]
 8004176:	291d      	cmp	r1, #29
 8004178:	d82c      	bhi.n	80041d4 <__sflush_r+0xb8>
 800417a:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <__sflush_r+0x108>)
 800417c:	40ca      	lsrs	r2, r1
 800417e:	07d6      	lsls	r6, r2, #31
 8004180:	d528      	bpl.n	80041d4 <__sflush_r+0xb8>
 8004182:	2200      	movs	r2, #0
 8004184:	6062      	str	r2, [r4, #4]
 8004186:	04d9      	lsls	r1, r3, #19
 8004188:	6922      	ldr	r2, [r4, #16]
 800418a:	6022      	str	r2, [r4, #0]
 800418c:	d504      	bpl.n	8004198 <__sflush_r+0x7c>
 800418e:	1c42      	adds	r2, r0, #1
 8004190:	d101      	bne.n	8004196 <__sflush_r+0x7a>
 8004192:	682b      	ldr	r3, [r5, #0]
 8004194:	b903      	cbnz	r3, 8004198 <__sflush_r+0x7c>
 8004196:	6560      	str	r0, [r4, #84]	; 0x54
 8004198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800419a:	602f      	str	r7, [r5, #0]
 800419c:	2900      	cmp	r1, #0
 800419e:	d0ca      	beq.n	8004136 <__sflush_r+0x1a>
 80041a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041a4:	4299      	cmp	r1, r3
 80041a6:	d002      	beq.n	80041ae <__sflush_r+0x92>
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 f897 	bl	80042dc <_free_r>
 80041ae:	2000      	movs	r0, #0
 80041b0:	6360      	str	r0, [r4, #52]	; 0x34
 80041b2:	e7c1      	b.n	8004138 <__sflush_r+0x1c>
 80041b4:	6a21      	ldr	r1, [r4, #32]
 80041b6:	2301      	movs	r3, #1
 80041b8:	4628      	mov	r0, r5
 80041ba:	47b0      	blx	r6
 80041bc:	1c41      	adds	r1, r0, #1
 80041be:	d1c7      	bne.n	8004150 <__sflush_r+0x34>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0c4      	beq.n	8004150 <__sflush_r+0x34>
 80041c6:	2b1d      	cmp	r3, #29
 80041c8:	d001      	beq.n	80041ce <__sflush_r+0xb2>
 80041ca:	2b16      	cmp	r3, #22
 80041cc:	d101      	bne.n	80041d2 <__sflush_r+0xb6>
 80041ce:	602f      	str	r7, [r5, #0]
 80041d0:	e7b1      	b.n	8004136 <__sflush_r+0x1a>
 80041d2:	89a3      	ldrh	r3, [r4, #12]
 80041d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d8:	81a3      	strh	r3, [r4, #12]
 80041da:	e7ad      	b.n	8004138 <__sflush_r+0x1c>
 80041dc:	690f      	ldr	r7, [r1, #16]
 80041de:	2f00      	cmp	r7, #0
 80041e0:	d0a9      	beq.n	8004136 <__sflush_r+0x1a>
 80041e2:	0793      	lsls	r3, r2, #30
 80041e4:	680e      	ldr	r6, [r1, #0]
 80041e6:	bf08      	it	eq
 80041e8:	694b      	ldreq	r3, [r1, #20]
 80041ea:	600f      	str	r7, [r1, #0]
 80041ec:	bf18      	it	ne
 80041ee:	2300      	movne	r3, #0
 80041f0:	eba6 0807 	sub.w	r8, r6, r7
 80041f4:	608b      	str	r3, [r1, #8]
 80041f6:	f1b8 0f00 	cmp.w	r8, #0
 80041fa:	dd9c      	ble.n	8004136 <__sflush_r+0x1a>
 80041fc:	6a21      	ldr	r1, [r4, #32]
 80041fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004200:	4643      	mov	r3, r8
 8004202:	463a      	mov	r2, r7
 8004204:	4628      	mov	r0, r5
 8004206:	47b0      	blx	r6
 8004208:	2800      	cmp	r0, #0
 800420a:	dc06      	bgt.n	800421a <__sflush_r+0xfe>
 800420c:	89a3      	ldrh	r3, [r4, #12]
 800420e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004212:	81a3      	strh	r3, [r4, #12]
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	e78e      	b.n	8004138 <__sflush_r+0x1c>
 800421a:	4407      	add	r7, r0
 800421c:	eba8 0800 	sub.w	r8, r8, r0
 8004220:	e7e9      	b.n	80041f6 <__sflush_r+0xda>
 8004222:	bf00      	nop
 8004224:	20400001 	.word	0x20400001

08004228 <_fflush_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	690b      	ldr	r3, [r1, #16]
 800422c:	4605      	mov	r5, r0
 800422e:	460c      	mov	r4, r1
 8004230:	b913      	cbnz	r3, 8004238 <_fflush_r+0x10>
 8004232:	2500      	movs	r5, #0
 8004234:	4628      	mov	r0, r5
 8004236:	bd38      	pop	{r3, r4, r5, pc}
 8004238:	b118      	cbz	r0, 8004242 <_fflush_r+0x1a>
 800423a:	6983      	ldr	r3, [r0, #24]
 800423c:	b90b      	cbnz	r3, 8004242 <_fflush_r+0x1a>
 800423e:	f7ff fd13 	bl	8003c68 <__sinit>
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <_fflush_r+0x6c>)
 8004244:	429c      	cmp	r4, r3
 8004246:	d11b      	bne.n	8004280 <_fflush_r+0x58>
 8004248:	686c      	ldr	r4, [r5, #4]
 800424a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0ef      	beq.n	8004232 <_fflush_r+0xa>
 8004252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004254:	07d0      	lsls	r0, r2, #31
 8004256:	d404      	bmi.n	8004262 <_fflush_r+0x3a>
 8004258:	0599      	lsls	r1, r3, #22
 800425a:	d402      	bmi.n	8004262 <_fflush_r+0x3a>
 800425c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800425e:	f7ff fdc6 	bl	8003dee <__retarget_lock_acquire_recursive>
 8004262:	4628      	mov	r0, r5
 8004264:	4621      	mov	r1, r4
 8004266:	f7ff ff59 	bl	800411c <__sflush_r>
 800426a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800426c:	07da      	lsls	r2, r3, #31
 800426e:	4605      	mov	r5, r0
 8004270:	d4e0      	bmi.n	8004234 <_fflush_r+0xc>
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	059b      	lsls	r3, r3, #22
 8004276:	d4dd      	bmi.n	8004234 <_fflush_r+0xc>
 8004278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800427a:	f7ff fdb9 	bl	8003df0 <__retarget_lock_release_recursive>
 800427e:	e7d9      	b.n	8004234 <_fflush_r+0xc>
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <_fflush_r+0x70>)
 8004282:	429c      	cmp	r4, r3
 8004284:	d101      	bne.n	800428a <_fflush_r+0x62>
 8004286:	68ac      	ldr	r4, [r5, #8]
 8004288:	e7df      	b.n	800424a <_fflush_r+0x22>
 800428a:	4b04      	ldr	r3, [pc, #16]	; (800429c <_fflush_r+0x74>)
 800428c:	429c      	cmp	r4, r3
 800428e:	bf08      	it	eq
 8004290:	68ec      	ldreq	r4, [r5, #12]
 8004292:	e7da      	b.n	800424a <_fflush_r+0x22>
 8004294:	08004d10 	.word	0x08004d10
 8004298:	08004d30 	.word	0x08004d30
 800429c:	08004cf0 	.word	0x08004cf0

080042a0 <_lseek_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	4d07      	ldr	r5, [pc, #28]	; (80042c0 <_lseek_r+0x20>)
 80042a4:	4604      	mov	r4, r0
 80042a6:	4608      	mov	r0, r1
 80042a8:	4611      	mov	r1, r2
 80042aa:	2200      	movs	r2, #0
 80042ac:	602a      	str	r2, [r5, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f7fc fcda 	bl	8000c68 <_lseek>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d102      	bne.n	80042be <_lseek_r+0x1e>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	b103      	cbz	r3, 80042be <_lseek_r+0x1e>
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	20004144 	.word	0x20004144

080042c4 <__malloc_lock>:
 80042c4:	4801      	ldr	r0, [pc, #4]	; (80042cc <__malloc_lock+0x8>)
 80042c6:	f7ff bd92 	b.w	8003dee <__retarget_lock_acquire_recursive>
 80042ca:	bf00      	nop
 80042cc:	20004138 	.word	0x20004138

080042d0 <__malloc_unlock>:
 80042d0:	4801      	ldr	r0, [pc, #4]	; (80042d8 <__malloc_unlock+0x8>)
 80042d2:	f7ff bd8d 	b.w	8003df0 <__retarget_lock_release_recursive>
 80042d6:	bf00      	nop
 80042d8:	20004138 	.word	0x20004138

080042dc <_free_r>:
 80042dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042de:	2900      	cmp	r1, #0
 80042e0:	d044      	beq.n	800436c <_free_r+0x90>
 80042e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e6:	9001      	str	r0, [sp, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f1a1 0404 	sub.w	r4, r1, #4
 80042ee:	bfb8      	it	lt
 80042f0:	18e4      	addlt	r4, r4, r3
 80042f2:	f7ff ffe7 	bl	80042c4 <__malloc_lock>
 80042f6:	4a1e      	ldr	r2, [pc, #120]	; (8004370 <_free_r+0x94>)
 80042f8:	9801      	ldr	r0, [sp, #4]
 80042fa:	6813      	ldr	r3, [r2, #0]
 80042fc:	b933      	cbnz	r3, 800430c <_free_r+0x30>
 80042fe:	6063      	str	r3, [r4, #4]
 8004300:	6014      	str	r4, [r2, #0]
 8004302:	b003      	add	sp, #12
 8004304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004308:	f7ff bfe2 	b.w	80042d0 <__malloc_unlock>
 800430c:	42a3      	cmp	r3, r4
 800430e:	d908      	bls.n	8004322 <_free_r+0x46>
 8004310:	6825      	ldr	r5, [r4, #0]
 8004312:	1961      	adds	r1, r4, r5
 8004314:	428b      	cmp	r3, r1
 8004316:	bf01      	itttt	eq
 8004318:	6819      	ldreq	r1, [r3, #0]
 800431a:	685b      	ldreq	r3, [r3, #4]
 800431c:	1949      	addeq	r1, r1, r5
 800431e:	6021      	streq	r1, [r4, #0]
 8004320:	e7ed      	b.n	80042fe <_free_r+0x22>
 8004322:	461a      	mov	r2, r3
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	b10b      	cbz	r3, 800432c <_free_r+0x50>
 8004328:	42a3      	cmp	r3, r4
 800432a:	d9fa      	bls.n	8004322 <_free_r+0x46>
 800432c:	6811      	ldr	r1, [r2, #0]
 800432e:	1855      	adds	r5, r2, r1
 8004330:	42a5      	cmp	r5, r4
 8004332:	d10b      	bne.n	800434c <_free_r+0x70>
 8004334:	6824      	ldr	r4, [r4, #0]
 8004336:	4421      	add	r1, r4
 8004338:	1854      	adds	r4, r2, r1
 800433a:	42a3      	cmp	r3, r4
 800433c:	6011      	str	r1, [r2, #0]
 800433e:	d1e0      	bne.n	8004302 <_free_r+0x26>
 8004340:	681c      	ldr	r4, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	6053      	str	r3, [r2, #4]
 8004346:	4421      	add	r1, r4
 8004348:	6011      	str	r1, [r2, #0]
 800434a:	e7da      	b.n	8004302 <_free_r+0x26>
 800434c:	d902      	bls.n	8004354 <_free_r+0x78>
 800434e:	230c      	movs	r3, #12
 8004350:	6003      	str	r3, [r0, #0]
 8004352:	e7d6      	b.n	8004302 <_free_r+0x26>
 8004354:	6825      	ldr	r5, [r4, #0]
 8004356:	1961      	adds	r1, r4, r5
 8004358:	428b      	cmp	r3, r1
 800435a:	bf04      	itt	eq
 800435c:	6819      	ldreq	r1, [r3, #0]
 800435e:	685b      	ldreq	r3, [r3, #4]
 8004360:	6063      	str	r3, [r4, #4]
 8004362:	bf04      	itt	eq
 8004364:	1949      	addeq	r1, r1, r5
 8004366:	6021      	streq	r1, [r4, #0]
 8004368:	6054      	str	r4, [r2, #4]
 800436a:	e7ca      	b.n	8004302 <_free_r+0x26>
 800436c:	b003      	add	sp, #12
 800436e:	bd30      	pop	{r4, r5, pc}
 8004370:	2000413c 	.word	0x2000413c

08004374 <__sfputc_r>:
 8004374:	6893      	ldr	r3, [r2, #8]
 8004376:	3b01      	subs	r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	b410      	push	{r4}
 800437c:	6093      	str	r3, [r2, #8]
 800437e:	da08      	bge.n	8004392 <__sfputc_r+0x1e>
 8004380:	6994      	ldr	r4, [r2, #24]
 8004382:	42a3      	cmp	r3, r4
 8004384:	db01      	blt.n	800438a <__sfputc_r+0x16>
 8004386:	290a      	cmp	r1, #10
 8004388:	d103      	bne.n	8004392 <__sfputc_r+0x1e>
 800438a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800438e:	f000 baf1 	b.w	8004974 <__swbuf_r>
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	1c58      	adds	r0, r3, #1
 8004396:	6010      	str	r0, [r2, #0]
 8004398:	7019      	strb	r1, [r3, #0]
 800439a:	4608      	mov	r0, r1
 800439c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <__sfputs_r>:
 80043a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a4:	4606      	mov	r6, r0
 80043a6:	460f      	mov	r7, r1
 80043a8:	4614      	mov	r4, r2
 80043aa:	18d5      	adds	r5, r2, r3
 80043ac:	42ac      	cmp	r4, r5
 80043ae:	d101      	bne.n	80043b4 <__sfputs_r+0x12>
 80043b0:	2000      	movs	r0, #0
 80043b2:	e007      	b.n	80043c4 <__sfputs_r+0x22>
 80043b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b8:	463a      	mov	r2, r7
 80043ba:	4630      	mov	r0, r6
 80043bc:	f7ff ffda 	bl	8004374 <__sfputc_r>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d1f3      	bne.n	80043ac <__sfputs_r+0xa>
 80043c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043c8 <_vfiprintf_r>:
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	460d      	mov	r5, r1
 80043ce:	b09d      	sub	sp, #116	; 0x74
 80043d0:	4614      	mov	r4, r2
 80043d2:	4698      	mov	r8, r3
 80043d4:	4606      	mov	r6, r0
 80043d6:	b118      	cbz	r0, 80043e0 <_vfiprintf_r+0x18>
 80043d8:	6983      	ldr	r3, [r0, #24]
 80043da:	b90b      	cbnz	r3, 80043e0 <_vfiprintf_r+0x18>
 80043dc:	f7ff fc44 	bl	8003c68 <__sinit>
 80043e0:	4b89      	ldr	r3, [pc, #548]	; (8004608 <_vfiprintf_r+0x240>)
 80043e2:	429d      	cmp	r5, r3
 80043e4:	d11b      	bne.n	800441e <_vfiprintf_r+0x56>
 80043e6:	6875      	ldr	r5, [r6, #4]
 80043e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043ea:	07d9      	lsls	r1, r3, #31
 80043ec:	d405      	bmi.n	80043fa <_vfiprintf_r+0x32>
 80043ee:	89ab      	ldrh	r3, [r5, #12]
 80043f0:	059a      	lsls	r2, r3, #22
 80043f2:	d402      	bmi.n	80043fa <_vfiprintf_r+0x32>
 80043f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043f6:	f7ff fcfa 	bl	8003dee <__retarget_lock_acquire_recursive>
 80043fa:	89ab      	ldrh	r3, [r5, #12]
 80043fc:	071b      	lsls	r3, r3, #28
 80043fe:	d501      	bpl.n	8004404 <_vfiprintf_r+0x3c>
 8004400:	692b      	ldr	r3, [r5, #16]
 8004402:	b9eb      	cbnz	r3, 8004440 <_vfiprintf_r+0x78>
 8004404:	4629      	mov	r1, r5
 8004406:	4630      	mov	r0, r6
 8004408:	f000 fb06 	bl	8004a18 <__swsetup_r>
 800440c:	b1c0      	cbz	r0, 8004440 <_vfiprintf_r+0x78>
 800440e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004410:	07dc      	lsls	r4, r3, #31
 8004412:	d50e      	bpl.n	8004432 <_vfiprintf_r+0x6a>
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	b01d      	add	sp, #116	; 0x74
 800441a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441e:	4b7b      	ldr	r3, [pc, #492]	; (800460c <_vfiprintf_r+0x244>)
 8004420:	429d      	cmp	r5, r3
 8004422:	d101      	bne.n	8004428 <_vfiprintf_r+0x60>
 8004424:	68b5      	ldr	r5, [r6, #8]
 8004426:	e7df      	b.n	80043e8 <_vfiprintf_r+0x20>
 8004428:	4b79      	ldr	r3, [pc, #484]	; (8004610 <_vfiprintf_r+0x248>)
 800442a:	429d      	cmp	r5, r3
 800442c:	bf08      	it	eq
 800442e:	68f5      	ldreq	r5, [r6, #12]
 8004430:	e7da      	b.n	80043e8 <_vfiprintf_r+0x20>
 8004432:	89ab      	ldrh	r3, [r5, #12]
 8004434:	0598      	lsls	r0, r3, #22
 8004436:	d4ed      	bmi.n	8004414 <_vfiprintf_r+0x4c>
 8004438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800443a:	f7ff fcd9 	bl	8003df0 <__retarget_lock_release_recursive>
 800443e:	e7e9      	b.n	8004414 <_vfiprintf_r+0x4c>
 8004440:	2300      	movs	r3, #0
 8004442:	9309      	str	r3, [sp, #36]	; 0x24
 8004444:	2320      	movs	r3, #32
 8004446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800444a:	f8cd 800c 	str.w	r8, [sp, #12]
 800444e:	2330      	movs	r3, #48	; 0x30
 8004450:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004614 <_vfiprintf_r+0x24c>
 8004454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004458:	f04f 0901 	mov.w	r9, #1
 800445c:	4623      	mov	r3, r4
 800445e:	469a      	mov	sl, r3
 8004460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004464:	b10a      	cbz	r2, 800446a <_vfiprintf_r+0xa2>
 8004466:	2a25      	cmp	r2, #37	; 0x25
 8004468:	d1f9      	bne.n	800445e <_vfiprintf_r+0x96>
 800446a:	ebba 0b04 	subs.w	fp, sl, r4
 800446e:	d00b      	beq.n	8004488 <_vfiprintf_r+0xc0>
 8004470:	465b      	mov	r3, fp
 8004472:	4622      	mov	r2, r4
 8004474:	4629      	mov	r1, r5
 8004476:	4630      	mov	r0, r6
 8004478:	f7ff ff93 	bl	80043a2 <__sfputs_r>
 800447c:	3001      	adds	r0, #1
 800447e:	f000 80aa 	beq.w	80045d6 <_vfiprintf_r+0x20e>
 8004482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004484:	445a      	add	r2, fp
 8004486:	9209      	str	r2, [sp, #36]	; 0x24
 8004488:	f89a 3000 	ldrb.w	r3, [sl]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80a2 	beq.w	80045d6 <_vfiprintf_r+0x20e>
 8004492:	2300      	movs	r3, #0
 8004494:	f04f 32ff 	mov.w	r2, #4294967295
 8004498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800449c:	f10a 0a01 	add.w	sl, sl, #1
 80044a0:	9304      	str	r3, [sp, #16]
 80044a2:	9307      	str	r3, [sp, #28]
 80044a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044a8:	931a      	str	r3, [sp, #104]	; 0x68
 80044aa:	4654      	mov	r4, sl
 80044ac:	2205      	movs	r2, #5
 80044ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b2:	4858      	ldr	r0, [pc, #352]	; (8004614 <_vfiprintf_r+0x24c>)
 80044b4:	f7fb fe94 	bl	80001e0 <memchr>
 80044b8:	9a04      	ldr	r2, [sp, #16]
 80044ba:	b9d8      	cbnz	r0, 80044f4 <_vfiprintf_r+0x12c>
 80044bc:	06d1      	lsls	r1, r2, #27
 80044be:	bf44      	itt	mi
 80044c0:	2320      	movmi	r3, #32
 80044c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044c6:	0713      	lsls	r3, r2, #28
 80044c8:	bf44      	itt	mi
 80044ca:	232b      	movmi	r3, #43	; 0x2b
 80044cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044d0:	f89a 3000 	ldrb.w	r3, [sl]
 80044d4:	2b2a      	cmp	r3, #42	; 0x2a
 80044d6:	d015      	beq.n	8004504 <_vfiprintf_r+0x13c>
 80044d8:	9a07      	ldr	r2, [sp, #28]
 80044da:	4654      	mov	r4, sl
 80044dc:	2000      	movs	r0, #0
 80044de:	f04f 0c0a 	mov.w	ip, #10
 80044e2:	4621      	mov	r1, r4
 80044e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044e8:	3b30      	subs	r3, #48	; 0x30
 80044ea:	2b09      	cmp	r3, #9
 80044ec:	d94e      	bls.n	800458c <_vfiprintf_r+0x1c4>
 80044ee:	b1b0      	cbz	r0, 800451e <_vfiprintf_r+0x156>
 80044f0:	9207      	str	r2, [sp, #28]
 80044f2:	e014      	b.n	800451e <_vfiprintf_r+0x156>
 80044f4:	eba0 0308 	sub.w	r3, r0, r8
 80044f8:	fa09 f303 	lsl.w	r3, r9, r3
 80044fc:	4313      	orrs	r3, r2
 80044fe:	9304      	str	r3, [sp, #16]
 8004500:	46a2      	mov	sl, r4
 8004502:	e7d2      	b.n	80044aa <_vfiprintf_r+0xe2>
 8004504:	9b03      	ldr	r3, [sp, #12]
 8004506:	1d19      	adds	r1, r3, #4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	9103      	str	r1, [sp, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	bfbb      	ittet	lt
 8004510:	425b      	neglt	r3, r3
 8004512:	f042 0202 	orrlt.w	r2, r2, #2
 8004516:	9307      	strge	r3, [sp, #28]
 8004518:	9307      	strlt	r3, [sp, #28]
 800451a:	bfb8      	it	lt
 800451c:	9204      	strlt	r2, [sp, #16]
 800451e:	7823      	ldrb	r3, [r4, #0]
 8004520:	2b2e      	cmp	r3, #46	; 0x2e
 8004522:	d10c      	bne.n	800453e <_vfiprintf_r+0x176>
 8004524:	7863      	ldrb	r3, [r4, #1]
 8004526:	2b2a      	cmp	r3, #42	; 0x2a
 8004528:	d135      	bne.n	8004596 <_vfiprintf_r+0x1ce>
 800452a:	9b03      	ldr	r3, [sp, #12]
 800452c:	1d1a      	adds	r2, r3, #4
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	9203      	str	r2, [sp, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	bfb8      	it	lt
 8004536:	f04f 33ff 	movlt.w	r3, #4294967295
 800453a:	3402      	adds	r4, #2
 800453c:	9305      	str	r3, [sp, #20]
 800453e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004624 <_vfiprintf_r+0x25c>
 8004542:	7821      	ldrb	r1, [r4, #0]
 8004544:	2203      	movs	r2, #3
 8004546:	4650      	mov	r0, sl
 8004548:	f7fb fe4a 	bl	80001e0 <memchr>
 800454c:	b140      	cbz	r0, 8004560 <_vfiprintf_r+0x198>
 800454e:	2340      	movs	r3, #64	; 0x40
 8004550:	eba0 000a 	sub.w	r0, r0, sl
 8004554:	fa03 f000 	lsl.w	r0, r3, r0
 8004558:	9b04      	ldr	r3, [sp, #16]
 800455a:	4303      	orrs	r3, r0
 800455c:	3401      	adds	r4, #1
 800455e:	9304      	str	r3, [sp, #16]
 8004560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004564:	482c      	ldr	r0, [pc, #176]	; (8004618 <_vfiprintf_r+0x250>)
 8004566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800456a:	2206      	movs	r2, #6
 800456c:	f7fb fe38 	bl	80001e0 <memchr>
 8004570:	2800      	cmp	r0, #0
 8004572:	d03f      	beq.n	80045f4 <_vfiprintf_r+0x22c>
 8004574:	4b29      	ldr	r3, [pc, #164]	; (800461c <_vfiprintf_r+0x254>)
 8004576:	bb1b      	cbnz	r3, 80045c0 <_vfiprintf_r+0x1f8>
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	3307      	adds	r3, #7
 800457c:	f023 0307 	bic.w	r3, r3, #7
 8004580:	3308      	adds	r3, #8
 8004582:	9303      	str	r3, [sp, #12]
 8004584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004586:	443b      	add	r3, r7
 8004588:	9309      	str	r3, [sp, #36]	; 0x24
 800458a:	e767      	b.n	800445c <_vfiprintf_r+0x94>
 800458c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004590:	460c      	mov	r4, r1
 8004592:	2001      	movs	r0, #1
 8004594:	e7a5      	b.n	80044e2 <_vfiprintf_r+0x11a>
 8004596:	2300      	movs	r3, #0
 8004598:	3401      	adds	r4, #1
 800459a:	9305      	str	r3, [sp, #20]
 800459c:	4619      	mov	r1, r3
 800459e:	f04f 0c0a 	mov.w	ip, #10
 80045a2:	4620      	mov	r0, r4
 80045a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a8:	3a30      	subs	r2, #48	; 0x30
 80045aa:	2a09      	cmp	r2, #9
 80045ac:	d903      	bls.n	80045b6 <_vfiprintf_r+0x1ee>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0c5      	beq.n	800453e <_vfiprintf_r+0x176>
 80045b2:	9105      	str	r1, [sp, #20]
 80045b4:	e7c3      	b.n	800453e <_vfiprintf_r+0x176>
 80045b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ba:	4604      	mov	r4, r0
 80045bc:	2301      	movs	r3, #1
 80045be:	e7f0      	b.n	80045a2 <_vfiprintf_r+0x1da>
 80045c0:	ab03      	add	r3, sp, #12
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	462a      	mov	r2, r5
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <_vfiprintf_r+0x258>)
 80045c8:	a904      	add	r1, sp, #16
 80045ca:	4630      	mov	r0, r6
 80045cc:	f3af 8000 	nop.w
 80045d0:	4607      	mov	r7, r0
 80045d2:	1c78      	adds	r0, r7, #1
 80045d4:	d1d6      	bne.n	8004584 <_vfiprintf_r+0x1bc>
 80045d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045d8:	07d9      	lsls	r1, r3, #31
 80045da:	d405      	bmi.n	80045e8 <_vfiprintf_r+0x220>
 80045dc:	89ab      	ldrh	r3, [r5, #12]
 80045de:	059a      	lsls	r2, r3, #22
 80045e0:	d402      	bmi.n	80045e8 <_vfiprintf_r+0x220>
 80045e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045e4:	f7ff fc04 	bl	8003df0 <__retarget_lock_release_recursive>
 80045e8:	89ab      	ldrh	r3, [r5, #12]
 80045ea:	065b      	lsls	r3, r3, #25
 80045ec:	f53f af12 	bmi.w	8004414 <_vfiprintf_r+0x4c>
 80045f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045f2:	e711      	b.n	8004418 <_vfiprintf_r+0x50>
 80045f4:	ab03      	add	r3, sp, #12
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	462a      	mov	r2, r5
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <_vfiprintf_r+0x258>)
 80045fc:	a904      	add	r1, sp, #16
 80045fe:	4630      	mov	r0, r6
 8004600:	f000 f880 	bl	8004704 <_printf_i>
 8004604:	e7e4      	b.n	80045d0 <_vfiprintf_r+0x208>
 8004606:	bf00      	nop
 8004608:	08004d10 	.word	0x08004d10
 800460c:	08004d30 	.word	0x08004d30
 8004610:	08004cf0 	.word	0x08004cf0
 8004614:	08004d54 	.word	0x08004d54
 8004618:	08004d5e 	.word	0x08004d5e
 800461c:	00000000 	.word	0x00000000
 8004620:	080043a3 	.word	0x080043a3
 8004624:	08004d5a 	.word	0x08004d5a

08004628 <_printf_common>:
 8004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	4616      	mov	r6, r2
 800462e:	4699      	mov	r9, r3
 8004630:	688a      	ldr	r2, [r1, #8]
 8004632:	690b      	ldr	r3, [r1, #16]
 8004634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004638:	4293      	cmp	r3, r2
 800463a:	bfb8      	it	lt
 800463c:	4613      	movlt	r3, r2
 800463e:	6033      	str	r3, [r6, #0]
 8004640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004644:	4607      	mov	r7, r0
 8004646:	460c      	mov	r4, r1
 8004648:	b10a      	cbz	r2, 800464e <_printf_common+0x26>
 800464a:	3301      	adds	r3, #1
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	0699      	lsls	r1, r3, #26
 8004652:	bf42      	ittt	mi
 8004654:	6833      	ldrmi	r3, [r6, #0]
 8004656:	3302      	addmi	r3, #2
 8004658:	6033      	strmi	r3, [r6, #0]
 800465a:	6825      	ldr	r5, [r4, #0]
 800465c:	f015 0506 	ands.w	r5, r5, #6
 8004660:	d106      	bne.n	8004670 <_printf_common+0x48>
 8004662:	f104 0a19 	add.w	sl, r4, #25
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	6832      	ldr	r2, [r6, #0]
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	42ab      	cmp	r3, r5
 800466e:	dc26      	bgt.n	80046be <_printf_common+0x96>
 8004670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004674:	1e13      	subs	r3, r2, #0
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	bf18      	it	ne
 800467a:	2301      	movne	r3, #1
 800467c:	0692      	lsls	r2, r2, #26
 800467e:	d42b      	bmi.n	80046d8 <_printf_common+0xb0>
 8004680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004684:	4649      	mov	r1, r9
 8004686:	4638      	mov	r0, r7
 8004688:	47c0      	blx	r8
 800468a:	3001      	adds	r0, #1
 800468c:	d01e      	beq.n	80046cc <_printf_common+0xa4>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	68e5      	ldr	r5, [r4, #12]
 8004692:	6832      	ldr	r2, [r6, #0]
 8004694:	f003 0306 	and.w	r3, r3, #6
 8004698:	2b04      	cmp	r3, #4
 800469a:	bf08      	it	eq
 800469c:	1aad      	subeq	r5, r5, r2
 800469e:	68a3      	ldr	r3, [r4, #8]
 80046a0:	6922      	ldr	r2, [r4, #16]
 80046a2:	bf0c      	ite	eq
 80046a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046a8:	2500      	movne	r5, #0
 80046aa:	4293      	cmp	r3, r2
 80046ac:	bfc4      	itt	gt
 80046ae:	1a9b      	subgt	r3, r3, r2
 80046b0:	18ed      	addgt	r5, r5, r3
 80046b2:	2600      	movs	r6, #0
 80046b4:	341a      	adds	r4, #26
 80046b6:	42b5      	cmp	r5, r6
 80046b8:	d11a      	bne.n	80046f0 <_printf_common+0xc8>
 80046ba:	2000      	movs	r0, #0
 80046bc:	e008      	b.n	80046d0 <_printf_common+0xa8>
 80046be:	2301      	movs	r3, #1
 80046c0:	4652      	mov	r2, sl
 80046c2:	4649      	mov	r1, r9
 80046c4:	4638      	mov	r0, r7
 80046c6:	47c0      	blx	r8
 80046c8:	3001      	adds	r0, #1
 80046ca:	d103      	bne.n	80046d4 <_printf_common+0xac>
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d4:	3501      	adds	r5, #1
 80046d6:	e7c6      	b.n	8004666 <_printf_common+0x3e>
 80046d8:	18e1      	adds	r1, r4, r3
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	2030      	movs	r0, #48	; 0x30
 80046de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046e2:	4422      	add	r2, r4
 80046e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046ec:	3302      	adds	r3, #2
 80046ee:	e7c7      	b.n	8004680 <_printf_common+0x58>
 80046f0:	2301      	movs	r3, #1
 80046f2:	4622      	mov	r2, r4
 80046f4:	4649      	mov	r1, r9
 80046f6:	4638      	mov	r0, r7
 80046f8:	47c0      	blx	r8
 80046fa:	3001      	adds	r0, #1
 80046fc:	d0e6      	beq.n	80046cc <_printf_common+0xa4>
 80046fe:	3601      	adds	r6, #1
 8004700:	e7d9      	b.n	80046b6 <_printf_common+0x8e>
	...

08004704 <_printf_i>:
 8004704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	7e0f      	ldrb	r7, [r1, #24]
 800470a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800470c:	2f78      	cmp	r7, #120	; 0x78
 800470e:	4691      	mov	r9, r2
 8004710:	4680      	mov	r8, r0
 8004712:	460c      	mov	r4, r1
 8004714:	469a      	mov	sl, r3
 8004716:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800471a:	d807      	bhi.n	800472c <_printf_i+0x28>
 800471c:	2f62      	cmp	r7, #98	; 0x62
 800471e:	d80a      	bhi.n	8004736 <_printf_i+0x32>
 8004720:	2f00      	cmp	r7, #0
 8004722:	f000 80d8 	beq.w	80048d6 <_printf_i+0x1d2>
 8004726:	2f58      	cmp	r7, #88	; 0x58
 8004728:	f000 80a3 	beq.w	8004872 <_printf_i+0x16e>
 800472c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004734:	e03a      	b.n	80047ac <_printf_i+0xa8>
 8004736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800473a:	2b15      	cmp	r3, #21
 800473c:	d8f6      	bhi.n	800472c <_printf_i+0x28>
 800473e:	a101      	add	r1, pc, #4	; (adr r1, 8004744 <_printf_i+0x40>)
 8004740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004744:	0800479d 	.word	0x0800479d
 8004748:	080047b1 	.word	0x080047b1
 800474c:	0800472d 	.word	0x0800472d
 8004750:	0800472d 	.word	0x0800472d
 8004754:	0800472d 	.word	0x0800472d
 8004758:	0800472d 	.word	0x0800472d
 800475c:	080047b1 	.word	0x080047b1
 8004760:	0800472d 	.word	0x0800472d
 8004764:	0800472d 	.word	0x0800472d
 8004768:	0800472d 	.word	0x0800472d
 800476c:	0800472d 	.word	0x0800472d
 8004770:	080048bd 	.word	0x080048bd
 8004774:	080047e1 	.word	0x080047e1
 8004778:	0800489f 	.word	0x0800489f
 800477c:	0800472d 	.word	0x0800472d
 8004780:	0800472d 	.word	0x0800472d
 8004784:	080048df 	.word	0x080048df
 8004788:	0800472d 	.word	0x0800472d
 800478c:	080047e1 	.word	0x080047e1
 8004790:	0800472d 	.word	0x0800472d
 8004794:	0800472d 	.word	0x0800472d
 8004798:	080048a7 	.word	0x080048a7
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	1d1a      	adds	r2, r3, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	602a      	str	r2, [r5, #0]
 80047a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0a3      	b.n	80048f8 <_printf_i+0x1f4>
 80047b0:	6820      	ldr	r0, [r4, #0]
 80047b2:	6829      	ldr	r1, [r5, #0]
 80047b4:	0606      	lsls	r6, r0, #24
 80047b6:	f101 0304 	add.w	r3, r1, #4
 80047ba:	d50a      	bpl.n	80047d2 <_printf_i+0xce>
 80047bc:	680e      	ldr	r6, [r1, #0]
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	2e00      	cmp	r6, #0
 80047c2:	da03      	bge.n	80047cc <_printf_i+0xc8>
 80047c4:	232d      	movs	r3, #45	; 0x2d
 80047c6:	4276      	negs	r6, r6
 80047c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047cc:	485e      	ldr	r0, [pc, #376]	; (8004948 <_printf_i+0x244>)
 80047ce:	230a      	movs	r3, #10
 80047d0:	e019      	b.n	8004806 <_printf_i+0x102>
 80047d2:	680e      	ldr	r6, [r1, #0]
 80047d4:	602b      	str	r3, [r5, #0]
 80047d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047da:	bf18      	it	ne
 80047dc:	b236      	sxthne	r6, r6
 80047de:	e7ef      	b.n	80047c0 <_printf_i+0xbc>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	6820      	ldr	r0, [r4, #0]
 80047e4:	1d19      	adds	r1, r3, #4
 80047e6:	6029      	str	r1, [r5, #0]
 80047e8:	0601      	lsls	r1, r0, #24
 80047ea:	d501      	bpl.n	80047f0 <_printf_i+0xec>
 80047ec:	681e      	ldr	r6, [r3, #0]
 80047ee:	e002      	b.n	80047f6 <_printf_i+0xf2>
 80047f0:	0646      	lsls	r6, r0, #25
 80047f2:	d5fb      	bpl.n	80047ec <_printf_i+0xe8>
 80047f4:	881e      	ldrh	r6, [r3, #0]
 80047f6:	4854      	ldr	r0, [pc, #336]	; (8004948 <_printf_i+0x244>)
 80047f8:	2f6f      	cmp	r7, #111	; 0x6f
 80047fa:	bf0c      	ite	eq
 80047fc:	2308      	moveq	r3, #8
 80047fe:	230a      	movne	r3, #10
 8004800:	2100      	movs	r1, #0
 8004802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004806:	6865      	ldr	r5, [r4, #4]
 8004808:	60a5      	str	r5, [r4, #8]
 800480a:	2d00      	cmp	r5, #0
 800480c:	bfa2      	ittt	ge
 800480e:	6821      	ldrge	r1, [r4, #0]
 8004810:	f021 0104 	bicge.w	r1, r1, #4
 8004814:	6021      	strge	r1, [r4, #0]
 8004816:	b90e      	cbnz	r6, 800481c <_printf_i+0x118>
 8004818:	2d00      	cmp	r5, #0
 800481a:	d04d      	beq.n	80048b8 <_printf_i+0x1b4>
 800481c:	4615      	mov	r5, r2
 800481e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004822:	fb03 6711 	mls	r7, r3, r1, r6
 8004826:	5dc7      	ldrb	r7, [r0, r7]
 8004828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800482c:	4637      	mov	r7, r6
 800482e:	42bb      	cmp	r3, r7
 8004830:	460e      	mov	r6, r1
 8004832:	d9f4      	bls.n	800481e <_printf_i+0x11a>
 8004834:	2b08      	cmp	r3, #8
 8004836:	d10b      	bne.n	8004850 <_printf_i+0x14c>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	07de      	lsls	r6, r3, #31
 800483c:	d508      	bpl.n	8004850 <_printf_i+0x14c>
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	6861      	ldr	r1, [r4, #4]
 8004842:	4299      	cmp	r1, r3
 8004844:	bfde      	ittt	le
 8004846:	2330      	movle	r3, #48	; 0x30
 8004848:	f805 3c01 	strble.w	r3, [r5, #-1]
 800484c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004850:	1b52      	subs	r2, r2, r5
 8004852:	6122      	str	r2, [r4, #16]
 8004854:	f8cd a000 	str.w	sl, [sp]
 8004858:	464b      	mov	r3, r9
 800485a:	aa03      	add	r2, sp, #12
 800485c:	4621      	mov	r1, r4
 800485e:	4640      	mov	r0, r8
 8004860:	f7ff fee2 	bl	8004628 <_printf_common>
 8004864:	3001      	adds	r0, #1
 8004866:	d14c      	bne.n	8004902 <_printf_i+0x1fe>
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	b004      	add	sp, #16
 800486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004872:	4835      	ldr	r0, [pc, #212]	; (8004948 <_printf_i+0x244>)
 8004874:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004878:	6829      	ldr	r1, [r5, #0]
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004880:	6029      	str	r1, [r5, #0]
 8004882:	061d      	lsls	r5, r3, #24
 8004884:	d514      	bpl.n	80048b0 <_printf_i+0x1ac>
 8004886:	07df      	lsls	r7, r3, #31
 8004888:	bf44      	itt	mi
 800488a:	f043 0320 	orrmi.w	r3, r3, #32
 800488e:	6023      	strmi	r3, [r4, #0]
 8004890:	b91e      	cbnz	r6, 800489a <_printf_i+0x196>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	f023 0320 	bic.w	r3, r3, #32
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	2310      	movs	r3, #16
 800489c:	e7b0      	b.n	8004800 <_printf_i+0xfc>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	f043 0320 	orr.w	r3, r3, #32
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	2378      	movs	r3, #120	; 0x78
 80048a8:	4828      	ldr	r0, [pc, #160]	; (800494c <_printf_i+0x248>)
 80048aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048ae:	e7e3      	b.n	8004878 <_printf_i+0x174>
 80048b0:	0659      	lsls	r1, r3, #25
 80048b2:	bf48      	it	mi
 80048b4:	b2b6      	uxthmi	r6, r6
 80048b6:	e7e6      	b.n	8004886 <_printf_i+0x182>
 80048b8:	4615      	mov	r5, r2
 80048ba:	e7bb      	b.n	8004834 <_printf_i+0x130>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	6826      	ldr	r6, [r4, #0]
 80048c0:	6961      	ldr	r1, [r4, #20]
 80048c2:	1d18      	adds	r0, r3, #4
 80048c4:	6028      	str	r0, [r5, #0]
 80048c6:	0635      	lsls	r5, r6, #24
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	d501      	bpl.n	80048d0 <_printf_i+0x1cc>
 80048cc:	6019      	str	r1, [r3, #0]
 80048ce:	e002      	b.n	80048d6 <_printf_i+0x1d2>
 80048d0:	0670      	lsls	r0, r6, #25
 80048d2:	d5fb      	bpl.n	80048cc <_printf_i+0x1c8>
 80048d4:	8019      	strh	r1, [r3, #0]
 80048d6:	2300      	movs	r3, #0
 80048d8:	6123      	str	r3, [r4, #16]
 80048da:	4615      	mov	r5, r2
 80048dc:	e7ba      	b.n	8004854 <_printf_i+0x150>
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	1d1a      	adds	r2, r3, #4
 80048e2:	602a      	str	r2, [r5, #0]
 80048e4:	681d      	ldr	r5, [r3, #0]
 80048e6:	6862      	ldr	r2, [r4, #4]
 80048e8:	2100      	movs	r1, #0
 80048ea:	4628      	mov	r0, r5
 80048ec:	f7fb fc78 	bl	80001e0 <memchr>
 80048f0:	b108      	cbz	r0, 80048f6 <_printf_i+0x1f2>
 80048f2:	1b40      	subs	r0, r0, r5
 80048f4:	6060      	str	r0, [r4, #4]
 80048f6:	6863      	ldr	r3, [r4, #4]
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	2300      	movs	r3, #0
 80048fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004900:	e7a8      	b.n	8004854 <_printf_i+0x150>
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	462a      	mov	r2, r5
 8004906:	4649      	mov	r1, r9
 8004908:	4640      	mov	r0, r8
 800490a:	47d0      	blx	sl
 800490c:	3001      	adds	r0, #1
 800490e:	d0ab      	beq.n	8004868 <_printf_i+0x164>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	079b      	lsls	r3, r3, #30
 8004914:	d413      	bmi.n	800493e <_printf_i+0x23a>
 8004916:	68e0      	ldr	r0, [r4, #12]
 8004918:	9b03      	ldr	r3, [sp, #12]
 800491a:	4298      	cmp	r0, r3
 800491c:	bfb8      	it	lt
 800491e:	4618      	movlt	r0, r3
 8004920:	e7a4      	b.n	800486c <_printf_i+0x168>
 8004922:	2301      	movs	r3, #1
 8004924:	4632      	mov	r2, r6
 8004926:	4649      	mov	r1, r9
 8004928:	4640      	mov	r0, r8
 800492a:	47d0      	blx	sl
 800492c:	3001      	adds	r0, #1
 800492e:	d09b      	beq.n	8004868 <_printf_i+0x164>
 8004930:	3501      	adds	r5, #1
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	9903      	ldr	r1, [sp, #12]
 8004936:	1a5b      	subs	r3, r3, r1
 8004938:	42ab      	cmp	r3, r5
 800493a:	dcf2      	bgt.n	8004922 <_printf_i+0x21e>
 800493c:	e7eb      	b.n	8004916 <_printf_i+0x212>
 800493e:	2500      	movs	r5, #0
 8004940:	f104 0619 	add.w	r6, r4, #25
 8004944:	e7f5      	b.n	8004932 <_printf_i+0x22e>
 8004946:	bf00      	nop
 8004948:	08004d65 	.word	0x08004d65
 800494c:	08004d76 	.word	0x08004d76

08004950 <_read_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4d07      	ldr	r5, [pc, #28]	; (8004970 <_read_r+0x20>)
 8004954:	4604      	mov	r4, r0
 8004956:	4608      	mov	r0, r1
 8004958:	4611      	mov	r1, r2
 800495a:	2200      	movs	r2, #0
 800495c:	602a      	str	r2, [r5, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	f7fc f93e 	bl	8000be0 <_read>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_read_r+0x1e>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_read_r+0x1e>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	20004144 	.word	0x20004144

08004974 <__swbuf_r>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	460e      	mov	r6, r1
 8004978:	4614      	mov	r4, r2
 800497a:	4605      	mov	r5, r0
 800497c:	b118      	cbz	r0, 8004986 <__swbuf_r+0x12>
 800497e:	6983      	ldr	r3, [r0, #24]
 8004980:	b90b      	cbnz	r3, 8004986 <__swbuf_r+0x12>
 8004982:	f7ff f971 	bl	8003c68 <__sinit>
 8004986:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <__swbuf_r+0x98>)
 8004988:	429c      	cmp	r4, r3
 800498a:	d12b      	bne.n	80049e4 <__swbuf_r+0x70>
 800498c:	686c      	ldr	r4, [r5, #4]
 800498e:	69a3      	ldr	r3, [r4, #24]
 8004990:	60a3      	str	r3, [r4, #8]
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	071a      	lsls	r2, r3, #28
 8004996:	d52f      	bpl.n	80049f8 <__swbuf_r+0x84>
 8004998:	6923      	ldr	r3, [r4, #16]
 800499a:	b36b      	cbz	r3, 80049f8 <__swbuf_r+0x84>
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	6820      	ldr	r0, [r4, #0]
 80049a0:	1ac0      	subs	r0, r0, r3
 80049a2:	6963      	ldr	r3, [r4, #20]
 80049a4:	b2f6      	uxtb	r6, r6
 80049a6:	4283      	cmp	r3, r0
 80049a8:	4637      	mov	r7, r6
 80049aa:	dc04      	bgt.n	80049b6 <__swbuf_r+0x42>
 80049ac:	4621      	mov	r1, r4
 80049ae:	4628      	mov	r0, r5
 80049b0:	f7ff fc3a 	bl	8004228 <_fflush_r>
 80049b4:	bb30      	cbnz	r0, 8004a04 <__swbuf_r+0x90>
 80049b6:	68a3      	ldr	r3, [r4, #8]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	60a3      	str	r3, [r4, #8]
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	6022      	str	r2, [r4, #0]
 80049c2:	701e      	strb	r6, [r3, #0]
 80049c4:	6963      	ldr	r3, [r4, #20]
 80049c6:	3001      	adds	r0, #1
 80049c8:	4283      	cmp	r3, r0
 80049ca:	d004      	beq.n	80049d6 <__swbuf_r+0x62>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	07db      	lsls	r3, r3, #31
 80049d0:	d506      	bpl.n	80049e0 <__swbuf_r+0x6c>
 80049d2:	2e0a      	cmp	r6, #10
 80049d4:	d104      	bne.n	80049e0 <__swbuf_r+0x6c>
 80049d6:	4621      	mov	r1, r4
 80049d8:	4628      	mov	r0, r5
 80049da:	f7ff fc25 	bl	8004228 <_fflush_r>
 80049de:	b988      	cbnz	r0, 8004a04 <__swbuf_r+0x90>
 80049e0:	4638      	mov	r0, r7
 80049e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e4:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <__swbuf_r+0x9c>)
 80049e6:	429c      	cmp	r4, r3
 80049e8:	d101      	bne.n	80049ee <__swbuf_r+0x7a>
 80049ea:	68ac      	ldr	r4, [r5, #8]
 80049ec:	e7cf      	b.n	800498e <__swbuf_r+0x1a>
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <__swbuf_r+0xa0>)
 80049f0:	429c      	cmp	r4, r3
 80049f2:	bf08      	it	eq
 80049f4:	68ec      	ldreq	r4, [r5, #12]
 80049f6:	e7ca      	b.n	800498e <__swbuf_r+0x1a>
 80049f8:	4621      	mov	r1, r4
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 f80c 	bl	8004a18 <__swsetup_r>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d0cb      	beq.n	800499c <__swbuf_r+0x28>
 8004a04:	f04f 37ff 	mov.w	r7, #4294967295
 8004a08:	e7ea      	b.n	80049e0 <__swbuf_r+0x6c>
 8004a0a:	bf00      	nop
 8004a0c:	08004d10 	.word	0x08004d10
 8004a10:	08004d30 	.word	0x08004d30
 8004a14:	08004cf0 	.word	0x08004cf0

08004a18 <__swsetup_r>:
 8004a18:	4b32      	ldr	r3, [pc, #200]	; (8004ae4 <__swsetup_r+0xcc>)
 8004a1a:	b570      	push	{r4, r5, r6, lr}
 8004a1c:	681d      	ldr	r5, [r3, #0]
 8004a1e:	4606      	mov	r6, r0
 8004a20:	460c      	mov	r4, r1
 8004a22:	b125      	cbz	r5, 8004a2e <__swsetup_r+0x16>
 8004a24:	69ab      	ldr	r3, [r5, #24]
 8004a26:	b913      	cbnz	r3, 8004a2e <__swsetup_r+0x16>
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f7ff f91d 	bl	8003c68 <__sinit>
 8004a2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ae8 <__swsetup_r+0xd0>)
 8004a30:	429c      	cmp	r4, r3
 8004a32:	d10f      	bne.n	8004a54 <__swsetup_r+0x3c>
 8004a34:	686c      	ldr	r4, [r5, #4]
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a3c:	0719      	lsls	r1, r3, #28
 8004a3e:	d42c      	bmi.n	8004a9a <__swsetup_r+0x82>
 8004a40:	06dd      	lsls	r5, r3, #27
 8004a42:	d411      	bmi.n	8004a68 <__swsetup_r+0x50>
 8004a44:	2309      	movs	r3, #9
 8004a46:	6033      	str	r3, [r6, #0]
 8004a48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a4c:	81a3      	strh	r3, [r4, #12]
 8004a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a52:	e03e      	b.n	8004ad2 <__swsetup_r+0xba>
 8004a54:	4b25      	ldr	r3, [pc, #148]	; (8004aec <__swsetup_r+0xd4>)
 8004a56:	429c      	cmp	r4, r3
 8004a58:	d101      	bne.n	8004a5e <__swsetup_r+0x46>
 8004a5a:	68ac      	ldr	r4, [r5, #8]
 8004a5c:	e7eb      	b.n	8004a36 <__swsetup_r+0x1e>
 8004a5e:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <__swsetup_r+0xd8>)
 8004a60:	429c      	cmp	r4, r3
 8004a62:	bf08      	it	eq
 8004a64:	68ec      	ldreq	r4, [r5, #12]
 8004a66:	e7e6      	b.n	8004a36 <__swsetup_r+0x1e>
 8004a68:	0758      	lsls	r0, r3, #29
 8004a6a:	d512      	bpl.n	8004a92 <__swsetup_r+0x7a>
 8004a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a6e:	b141      	cbz	r1, 8004a82 <__swsetup_r+0x6a>
 8004a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a74:	4299      	cmp	r1, r3
 8004a76:	d002      	beq.n	8004a7e <__swsetup_r+0x66>
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f7ff fc2f 	bl	80042dc <_free_r>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	6363      	str	r3, [r4, #52]	; 0x34
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a88:	81a3      	strh	r3, [r4, #12]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	6923      	ldr	r3, [r4, #16]
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	f043 0308 	orr.w	r3, r3, #8
 8004a98:	81a3      	strh	r3, [r4, #12]
 8004a9a:	6923      	ldr	r3, [r4, #16]
 8004a9c:	b94b      	cbnz	r3, 8004ab2 <__swsetup_r+0x9a>
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa8:	d003      	beq.n	8004ab2 <__swsetup_r+0x9a>
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4630      	mov	r0, r6
 8004aae:	f000 f847 	bl	8004b40 <__smakebuf_r>
 8004ab2:	89a0      	ldrh	r0, [r4, #12]
 8004ab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ab8:	f010 0301 	ands.w	r3, r0, #1
 8004abc:	d00a      	beq.n	8004ad4 <__swsetup_r+0xbc>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60a3      	str	r3, [r4, #8]
 8004ac2:	6963      	ldr	r3, [r4, #20]
 8004ac4:	425b      	negs	r3, r3
 8004ac6:	61a3      	str	r3, [r4, #24]
 8004ac8:	6923      	ldr	r3, [r4, #16]
 8004aca:	b943      	cbnz	r3, 8004ade <__swsetup_r+0xc6>
 8004acc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ad0:	d1ba      	bne.n	8004a48 <__swsetup_r+0x30>
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	0781      	lsls	r1, r0, #30
 8004ad6:	bf58      	it	pl
 8004ad8:	6963      	ldrpl	r3, [r4, #20]
 8004ada:	60a3      	str	r3, [r4, #8]
 8004adc:	e7f4      	b.n	8004ac8 <__swsetup_r+0xb0>
 8004ade:	2000      	movs	r0, #0
 8004ae0:	e7f7      	b.n	8004ad2 <__swsetup_r+0xba>
 8004ae2:	bf00      	nop
 8004ae4:	20000010 	.word	0x20000010
 8004ae8:	08004d10 	.word	0x08004d10
 8004aec:	08004d30 	.word	0x08004d30
 8004af0:	08004cf0 	.word	0x08004cf0

08004af4 <__swhatbuf_r>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	460e      	mov	r6, r1
 8004af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004afc:	2900      	cmp	r1, #0
 8004afe:	b096      	sub	sp, #88	; 0x58
 8004b00:	4614      	mov	r4, r2
 8004b02:	461d      	mov	r5, r3
 8004b04:	da08      	bge.n	8004b18 <__swhatbuf_r+0x24>
 8004b06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	602a      	str	r2, [r5, #0]
 8004b0e:	061a      	lsls	r2, r3, #24
 8004b10:	d410      	bmi.n	8004b34 <__swhatbuf_r+0x40>
 8004b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b16:	e00e      	b.n	8004b36 <__swhatbuf_r+0x42>
 8004b18:	466a      	mov	r2, sp
 8004b1a:	f000 f851 	bl	8004bc0 <_fstat_r>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	dbf1      	blt.n	8004b06 <__swhatbuf_r+0x12>
 8004b22:	9a01      	ldr	r2, [sp, #4]
 8004b24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b2c:	425a      	negs	r2, r3
 8004b2e:	415a      	adcs	r2, r3
 8004b30:	602a      	str	r2, [r5, #0]
 8004b32:	e7ee      	b.n	8004b12 <__swhatbuf_r+0x1e>
 8004b34:	2340      	movs	r3, #64	; 0x40
 8004b36:	2000      	movs	r0, #0
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	b016      	add	sp, #88	; 0x58
 8004b3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b40 <__smakebuf_r>:
 8004b40:	898b      	ldrh	r3, [r1, #12]
 8004b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b44:	079d      	lsls	r5, r3, #30
 8004b46:	4606      	mov	r6, r0
 8004b48:	460c      	mov	r4, r1
 8004b4a:	d507      	bpl.n	8004b5c <__smakebuf_r+0x1c>
 8004b4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	6123      	str	r3, [r4, #16]
 8004b54:	2301      	movs	r3, #1
 8004b56:	6163      	str	r3, [r4, #20]
 8004b58:	b002      	add	sp, #8
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	ab01      	add	r3, sp, #4
 8004b5e:	466a      	mov	r2, sp
 8004b60:	f7ff ffc8 	bl	8004af4 <__swhatbuf_r>
 8004b64:	9900      	ldr	r1, [sp, #0]
 8004b66:	4605      	mov	r5, r0
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f7ff f96b 	bl	8003e44 <_malloc_r>
 8004b6e:	b948      	cbnz	r0, 8004b84 <__smakebuf_r+0x44>
 8004b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b74:	059a      	lsls	r2, r3, #22
 8004b76:	d4ef      	bmi.n	8004b58 <__smakebuf_r+0x18>
 8004b78:	f023 0303 	bic.w	r3, r3, #3
 8004b7c:	f043 0302 	orr.w	r3, r3, #2
 8004b80:	81a3      	strh	r3, [r4, #12]
 8004b82:	e7e3      	b.n	8004b4c <__smakebuf_r+0xc>
 8004b84:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <__smakebuf_r+0x7c>)
 8004b86:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	6020      	str	r0, [r4, #0]
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b90:	81a3      	strh	r3, [r4, #12]
 8004b92:	9b00      	ldr	r3, [sp, #0]
 8004b94:	6163      	str	r3, [r4, #20]
 8004b96:	9b01      	ldr	r3, [sp, #4]
 8004b98:	6120      	str	r0, [r4, #16]
 8004b9a:	b15b      	cbz	r3, 8004bb4 <__smakebuf_r+0x74>
 8004b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f000 f81f 	bl	8004be4 <_isatty_r>
 8004ba6:	b128      	cbz	r0, 8004bb4 <__smakebuf_r+0x74>
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	f023 0303 	bic.w	r3, r3, #3
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	81a3      	strh	r3, [r4, #12]
 8004bb4:	89a0      	ldrh	r0, [r4, #12]
 8004bb6:	4305      	orrs	r5, r0
 8004bb8:	81a5      	strh	r5, [r4, #12]
 8004bba:	e7cd      	b.n	8004b58 <__smakebuf_r+0x18>
 8004bbc:	08003c01 	.word	0x08003c01

08004bc0 <_fstat_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4d07      	ldr	r5, [pc, #28]	; (8004be0 <_fstat_r+0x20>)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4608      	mov	r0, r1
 8004bca:	4611      	mov	r1, r2
 8004bcc:	602b      	str	r3, [r5, #0]
 8004bce:	f7fc f830 	bl	8000c32 <_fstat>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	d102      	bne.n	8004bdc <_fstat_r+0x1c>
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	b103      	cbz	r3, 8004bdc <_fstat_r+0x1c>
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	bd38      	pop	{r3, r4, r5, pc}
 8004bde:	bf00      	nop
 8004be0:	20004144 	.word	0x20004144

08004be4 <_isatty_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4d06      	ldr	r5, [pc, #24]	; (8004c00 <_isatty_r+0x1c>)
 8004be8:	2300      	movs	r3, #0
 8004bea:	4604      	mov	r4, r0
 8004bec:	4608      	mov	r0, r1
 8004bee:	602b      	str	r3, [r5, #0]
 8004bf0:	f7fc f82f 	bl	8000c52 <_isatty>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d102      	bne.n	8004bfe <_isatty_r+0x1a>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	b103      	cbz	r3, 8004bfe <_isatty_r+0x1a>
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	20004144 	.word	0x20004144

08004c04 <_init>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	bf00      	nop
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr

08004c10 <_fini>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr
